
Payload PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007254  08007254  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007254  08007254  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007254  08007254  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  2000000c  08007268  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08007268  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ade3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000402c  00000000  00000000  0003ae1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  0003ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001608  00000000  00000000  00040680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271b9  00000000  00000000  00041c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e892  00000000  00000000  00068e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebcb0  00000000  00000000  000876d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a0  00000000  00000000  001733d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007198 	.word	0x08007198

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08007198 	.word	0x08007198

080001d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b2a      	ldr	r3, [pc, #168]	; (8000294 <MX_ADC1_Init+0xc0>)
 80001ec:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <MX_ADC1_Init+0xc4>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f0:	4b28      	ldr	r3, [pc, #160]	; (8000294 <MX_ADC1_Init+0xc0>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	4b27      	ldr	r3, [pc, #156]	; (8000294 <MX_ADC1_Init+0xc0>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	4b25      	ldr	r3, [pc, #148]	; (8000294 <MX_ADC1_Init+0xc0>)
 80001fe:	2200      	movs	r2, #0
 8000200:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000202:	4b24      	ldr	r3, [pc, #144]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000204:	2200      	movs	r2, #0
 8000206:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <MX_ADC1_Init+0xc0>)
 800020a:	2204      	movs	r2, #4
 800020c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800020e:	4b21      	ldr	r3, [pc, #132]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000210:	2200      	movs	r2, #0
 8000212:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000214:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000216:	2200      	movs	r2, #0
 8000218:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800021a:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <MX_ADC1_Init+0xc0>)
 800021c:	2201      	movs	r2, #1
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000220:	4b1c      	ldr	r3, [pc, #112]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000222:	2200      	movs	r2, #0
 8000224:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000228:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <MX_ADC1_Init+0xc0>)
 800022a:	2200      	movs	r2, #0
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000230:	2200      	movs	r2, #0
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000236:	2200      	movs	r2, #0
 8000238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <MX_ADC1_Init+0xc0>)
 800023e:	2200      	movs	r2, #0
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000244:	2200      	movs	r2, #0
 8000246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <MX_ADC1_Init+0xc0>)
 800024c:	2204      	movs	r2, #4
 800024e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000250:	4810      	ldr	r0, [pc, #64]	; (8000294 <MX_ADC1_Init+0xc0>)
 8000252:	f001 fa43 	bl	80016dc <HAL_ADC_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800025c:	f000 fdc4 	bl	8000de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_ADC1_Init+0xc8>)
 8000262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000264:	2306      	movs	r3, #6
 8000266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800026c:	237f      	movs	r3, #127	; 0x7f
 800026e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000270:	2304      	movs	r3, #4
 8000272:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000278:	463b      	mov	r3, r7
 800027a:	4619      	mov	r1, r3
 800027c:	4805      	ldr	r0, [pc, #20]	; (8000294 <MX_ADC1_Init+0xc0>)
 800027e:	f001 fcab 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000288:	f000 fdae 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800028c:	bf00      	nop
 800028e:	3718      	adds	r7, #24
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000028 	.word	0x20000028
 8000298:	50040000 	.word	0x50040000
 800029c:	04300002 	.word	0x04300002

080002a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b0a4      	sub	sp, #144	; 0x90
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	2268      	movs	r2, #104	; 0x68
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f006 ff61 	bl	8007188 <memset>
  if(adcHandle->Instance==ADC1)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a33      	ldr	r2, [pc, #204]	; (8000398 <HAL_ADC_MspInit+0xf8>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d15f      	bne.n	8000390 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002da:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002dc:	2301      	movs	r3, #1
 80002de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80002e4:	2310      	movs	r3, #16
 80002e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002e8:	2307      	movs	r3, #7
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002f0:	2302      	movs	r3, #2
 80002f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80002f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80002f8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4618      	mov	r0, r3
 8000300:	f004 fe46 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800030a:	f000 fd6d 	bl	8000de8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800030e:	4b23      	ldr	r3, [pc, #140]	; (800039c <HAL_ADC_MspInit+0xfc>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	4a22      	ldr	r2, [pc, #136]	; (800039c <HAL_ADC_MspInit+0xfc>)
 8000314:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <HAL_ADC_MspInit+0xfc>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <HAL_ADC_MspInit+0xfc>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <HAL_ADC_MspInit+0xfc>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <HAL_ADC_MspInit+0xfc>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	f003 0304 	and.w	r3, r3, #4
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <HAL_ADC_MspInit+0xfc>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	4a16      	ldr	r2, [pc, #88]	; (800039c <HAL_ADC_MspInit+0xfc>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <HAL_ADC_MspInit+0xfc>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000356:	230f      	movs	r3, #15
 8000358:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800035a:	230b      	movs	r3, #11
 800035c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	2300      	movs	r3, #0
 8000362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000366:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <HAL_ADC_MspInit+0x100>)
 800036e:	f003 f9e5 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000372:	233f      	movs	r3, #63	; 0x3f
 8000374:	67fb      	str	r3, [r7, #124]	; 0x7c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000376:	230b      	movs	r3, #11
 8000378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000386:	4619      	mov	r1, r3
 8000388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038c:	f003 f9d6 	bl	800373c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000390:	bf00      	nop
 8000392:	3790      	adds	r7, #144	; 0x90
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	50040000 	.word	0x50040000
 800039c:	40021000 	.word	0x40021000
 80003a0:	48000800 	.word	0x48000800

080003a4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_CAN1_Init+0x64>)
 80003aa:	4a18      	ldr	r2, [pc, #96]	; (800040c <MX_CAN1_Init+0x68>)
 80003ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <MX_CAN1_Init+0x64>)
 80003b0:	2210      	movs	r2, #16
 80003b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_CAN1_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_CAN1_Init+0x64>)
 80003bc:	2200      	movs	r2, #0
 80003be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_CAN1_Init+0x64>)
 80003c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_CAN1_Init+0x64>)
 80003ca:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80003ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <MX_CAN1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_CAN1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <MX_CAN1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_CAN1_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <MX_CAN1_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_CAN1_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_CAN1_Init+0x64>)
 80003f6:	f002 fa19 	bl	800282c <HAL_CAN_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000400:	f000 fcf2 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000090 	.word	0x20000090
 800040c:	40006400 	.word	0x40006400

08000410 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08a      	sub	sp, #40	; 0x28
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1b      	ldr	r2, [pc, #108]	; (800049c <HAL_CAN_MspInit+0x8c>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d130      	bne.n	8000494 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000432:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <HAL_CAN_MspInit+0x90>)
 8000434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000436:	4a1a      	ldr	r2, [pc, #104]	; (80004a0 <HAL_CAN_MspInit+0x90>)
 8000438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043c:	6593      	str	r3, [r2, #88]	; 0x58
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_CAN_MspInit+0x90>)
 8000440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_CAN_MspInit+0x90>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <HAL_CAN_MspInit+0x90>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_CAN_MspInit+0x90>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000462:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000470:	2303      	movs	r3, #3
 8000472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000474:	230a      	movs	r3, #10
 8000476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4619      	mov	r1, r3
 800047e:	4809      	ldr	r0, [pc, #36]	; (80004a4 <HAL_CAN_MspInit+0x94>)
 8000480:	f003 f95c 	bl	800373c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2101      	movs	r1, #1
 8000488:	2014      	movs	r0, #20
 800048a:	f003 f920 	bl	80036ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800048e:	2014      	movs	r0, #20
 8000490:	f003 f939 	bl	8003706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000494:	bf00      	nop
 8000496:	3728      	adds	r7, #40	; 0x28
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40006400 	.word	0x40006400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000400 	.word	0x48000400

080004a8 <CAN_Init>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef CAN_Init(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef operation_status;

	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x0000;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterBank = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004ca:	2301      	movs	r3, #1
 80004cc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 80004d2:	230e      	movs	r3, #14
 80004d4:	62bb      	str	r3, [r7, #40]	; 0x28

	operation_status = HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4619      	mov	r1, r3
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <CAN_Init+0x7c>)
 80004dc:	f002 faa1 	bl	8002a22 <HAL_CAN_ConfigFilter>
 80004e0:	4603      	mov	r3, r0
 80004e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (operation_status != HAL_OK) goto error;
 80004e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d111      	bne.n	8000512 <CAN_Init+0x6a>
	operation_status = HAL_CAN_Start(&hcan1); // Turn on the CAN Bus
 80004ee:	480d      	ldr	r0, [pc, #52]	; (8000524 <CAN_Init+0x7c>)
 80004f0:	f002 fb61 	bl	8002bb6 <HAL_CAN_Start>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (operation_status != HAL_OK) goto error;
 80004fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d109      	bne.n	8000516 <CAN_Init+0x6e>

	operation_status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000502:	2102      	movs	r1, #2
 8000504:	4807      	ldr	r0, [pc, #28]	; (8000524 <CAN_Init+0x7c>)
 8000506:	f002 fdb1 	bl	800306c <HAL_CAN_ActivateNotification>
 800050a:	4603      	mov	r3, r0
 800050c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000510:	e002      	b.n	8000518 <CAN_Init+0x70>
	if (operation_status != HAL_OK) goto error;
 8000512:	bf00      	nop
 8000514:	e000      	b.n	8000518 <CAN_Init+0x70>
	if (operation_status != HAL_OK) goto error;
 8000516:	bf00      	nop

error:
    return operation_status;
 8000518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800051c:	4618      	mov	r0, r3
 800051e:	3730      	adds	r7, #48	; 0x30
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000090 	.word	0x20000090

08000528 <CAN_Transmit_Message>:
 *
 * @param myMessage: The CAN message
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Transmit_Message(CANMessage_t myMessage){
 8000528:	b580      	push	{r7, lr}
 800052a:	b08e      	sub	sp, #56	; 0x38
 800052c:	af00      	add	r7, sp, #0
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t txMailbox; // Transmit Mailbox
	CAN_TxHeaderTypeDef txMessage;
	
	// TX Message Parameters
	uint16_t ID = (myMessage.priority << 4) | (SOURCE_ID << 2) | (myMessage.DestinationID);
 8000534:	793b      	ldrb	r3, [r7, #4]
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	b21b      	sxth	r3, r3
 800053a:	f043 030c 	orr.w	r3, r3, #12
 800053e:	b21a      	sxth	r2, r3
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	b21b      	sxth	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b21b      	sxth	r3, r3
 8000548:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t message[8] = {myMessage.command, myMessage.data[0], myMessage.data[1], myMessage.data[2], myMessage.data[3], myMessage.data[4], myMessage.data[5],myMessage.data[6]};
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	743b      	strb	r3, [r7, #16]
 800054e:	7a3b      	ldrb	r3, [r7, #8]
 8000550:	747b      	strb	r3, [r7, #17]
 8000552:	7a7b      	ldrb	r3, [r7, #9]
 8000554:	74bb      	strb	r3, [r7, #18]
 8000556:	7abb      	ldrb	r3, [r7, #10]
 8000558:	74fb      	strb	r3, [r7, #19]
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	753b      	strb	r3, [r7, #20]
 800055e:	7b3b      	ldrb	r3, [r7, #12]
 8000560:	757b      	strb	r3, [r7, #21]
 8000562:	7b7b      	ldrb	r3, [r7, #13]
 8000564:	75bb      	strb	r3, [r7, #22]
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	75fb      	strb	r3, [r7, #23]

	txMessage.StdId = ID;
 800056a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800056c:	61bb      	str	r3, [r7, #24]
	txMessage.IDE = CAN_ID_STD;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
	txMessage.RTR = CAN_RTR_DATA;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
	txMessage.DLC = MAX_CAN_DATA_LENGTH;
 8000576:	2308      	movs	r3, #8
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28

	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0){} //wait to send CAN message
 800057a:	bf00      	nop
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <CAN_Transmit_Message+0x7c>)
 800057e:	f002 fc2e 	bl	8002dde <HAL_CAN_GetTxMailboxesFreeLevel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f9      	beq.n	800057c <CAN_Transmit_Message+0x54>

	return HAL_CAN_AddTxMessage(&hcan1, &txMessage, message, &txMailbox);
 8000588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058c:	f107 0210 	add.w	r2, r7, #16
 8000590:	f107 0118 	add.w	r1, r7, #24
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <CAN_Transmit_Message+0x7c>)
 8000596:	f002 fb52 	bl	8002c3e <HAL_CAN_AddTxMessage>
 800059a:	4603      	mov	r3, r0
}
 800059c:	4618      	mov	r0, r3
 800059e:	3738      	adds	r7, #56	; 0x38
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000090 	.word	0x20000090

080005a8 <CAN_Message_Received>:
/**
 * @brief Interrupt Handler for received CAN messages
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Message_Received(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef rxMessage; // Received Message Header
	uint8_t rxData[8]; // Received data
	uint8_t receivedDestinationId; // Destination ID of Received Message

	/* Get RX message */
	operation_status = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessage, rxData);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	f107 0218 	add.w	r2, r7, #24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4822      	ldr	r0, [pc, #136]	; (8000644 <CAN_Message_Received+0x9c>)
 80005ba:	f002 fc45 	bl	8002e48 <HAL_CAN_GetRxMessage>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (operation_status != HAL_OK) goto error;
 80005c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d132      	bne.n	8000632 <CAN_Message_Received+0x8a>
	receivedDestinationId = RECEIVED_DESTINATION_ID_MASK & rxMessage.StdId;
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0303 	and.w	r3, r3, #3
 80005d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	if(receivedDestinationId == SOURCE_ID){
 80005d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d12a      	bne.n	8000636 <CAN_Message_Received+0x8e>
	    // *NOTE* Send message to queue per your subsystem here
	    CANMessage_t can_message = {
	        .priority = rxMessage.RTR == CAN_RTR_REMOTE ? 0x7F : rxMessage.ExtId >> 24,
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	    CANMessage_t can_message = {
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d003      	beq.n	80005ee <CAN_Message_Received+0x46>
	        .priority = rxMessage.RTR == CAN_RTR_REMOTE ? 0x7F : rxMessage.ExtId >> 24,
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	0e1b      	lsrs	r3, r3, #24
	    CANMessage_t can_message = {
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	e000      	b.n	80005f0 <CAN_Message_Received+0x48>
 80005ee:	237f      	movs	r3, #127	; 0x7f
 80005f0:	713b      	strb	r3, [r7, #4]
	        .SenderID = (RECEIVED_SENDER_ID_MASK & rxMessage.StdId) >> 2,
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	089b      	lsrs	r3, r3, #2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0303 	and.w	r3, r3, #3
 80005fc:	b2db      	uxtb	r3, r3
	    CANMessage_t can_message = {
 80005fe:	717b      	strb	r3, [r7, #5]
 8000600:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000604:	71bb      	strb	r3, [r7, #6]
	        .DestinationID = receivedDestinationId,
	        .command = rxData[0],
 8000606:	7c3b      	ldrb	r3, [r7, #16]
	    CANMessage_t can_message = {
 8000608:	71fb      	strb	r3, [r7, #7]
	        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 800060a:	7c7b      	ldrb	r3, [r7, #17]
	    CANMessage_t can_message = {
 800060c:	723b      	strb	r3, [r7, #8]
	        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 800060e:	7cbb      	ldrb	r3, [r7, #18]
	    CANMessage_t can_message = {
 8000610:	727b      	strb	r3, [r7, #9]
	        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000612:	7cfb      	ldrb	r3, [r7, #19]
	    CANMessage_t can_message = {
 8000614:	72bb      	strb	r3, [r7, #10]
	        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000616:	7d3b      	ldrb	r3, [r7, #20]
	    CANMessage_t can_message = {
 8000618:	72fb      	strb	r3, [r7, #11]
	        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 800061a:	7d7b      	ldrb	r3, [r7, #21]
	    CANMessage_t can_message = {
 800061c:	733b      	strb	r3, [r7, #12]
	        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 800061e:	7dbb      	ldrb	r3, [r7, #22]
	    CANMessage_t can_message = {
 8000620:	737b      	strb	r3, [r7, #13]
	        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000622:	7dfb      	ldrb	r3, [r7, #23]
	    CANMessage_t can_message = {
 8000624:	73bb      	strb	r3, [r7, #14]
	    };
	    CAN_Queue_Enqueue(&can_queue, &can_message);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <CAN_Message_Received+0xa0>)
 800062c:	f000 f8a4 	bl	8000778 <CAN_Queue_Enqueue>
 8000630:	e002      	b.n	8000638 <CAN_Message_Received+0x90>
	if (operation_status != HAL_OK) goto error;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <CAN_Message_Received+0x90>

		// *NOTE* program custom handling per your subsystem here
	}

error:
 8000636:	bf00      	nop
	return operation_status;
 8000638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800063c:	4618      	mov	r0, r3
 800063e:	3738      	adds	r7, #56	; 0x38
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000090 	.word	0x20000090
 8000648:	20000110 	.word	0x20000110

0800064c <CAN_Send_Default_ACK>:
 *
 * @param myMessage: The received CAN message to send the ACK for
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Send_Default_ACK(CANMessage_t myMessage){
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    CANMessage_t ack_message = {
        .priority = myMessage.priority,
 8000658:	793b      	ldrb	r3, [r7, #4]
    CANMessage_t ack_message = {
 800065a:	753b      	strb	r3, [r7, #20]
 800065c:	2303      	movs	r3, #3
 800065e:	757b      	strb	r3, [r7, #21]
        .SenderID = SOURCE_ID,
        .DestinationID = myMessage.SenderID,
 8000660:	797b      	ldrb	r3, [r7, #5]
    CANMessage_t ack_message = {
 8000662:	75bb      	strb	r3, [r7, #22]
 8000664:	2301      	movs	r3, #1
 8000666:	75fb      	strb	r3, [r7, #23]
        .command = 0x01,
        .data = {myMessage.command, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
 8000668:	79fb      	ldrb	r3, [r7, #7]
    CANMessage_t ack_message = {
 800066a:	763b      	strb	r3, [r7, #24]
 800066c:	2300      	movs	r3, #0
 800066e:	767b      	strb	r3, [r7, #25]
 8000670:	2300      	movs	r3, #0
 8000672:	76bb      	strb	r3, [r7, #26]
 8000674:	2300      	movs	r3, #0
 8000676:	76fb      	strb	r3, [r7, #27]
 8000678:	2300      	movs	r3, #0
 800067a:	773b      	strb	r3, [r7, #28]
 800067c:	2300      	movs	r3, #0
 800067e:	777b      	strb	r3, [r7, #29]
 8000680:	2300      	movs	r3, #0
 8000682:	77bb      	strb	r3, [r7, #30]
    };
    return CAN_Transmit_Message(ack_message);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800068c:	f7ff ff4c 	bl	8000528 <CAN_Transmit_Message>
 8000690:	4603      	mov	r3, r0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <CAN_Send_Default_ACK_With_Data>:
 * @param myMessage: The received CAN message to send the ACK for
 * @param p_data: The 6 bytes of data to send
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Send_Default_ACK_With_Data(CANMessage_t myMessage, uint8_t *p_data){
 800069a:	b590      	push	{r4, r7, lr}
 800069c:	b089      	sub	sp, #36	; 0x24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	1d3c      	adds	r4, r7, #4
 80006a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006a6:	603b      	str	r3, [r7, #0]
    CANMessage_t ack_message = {
        .priority = myMessage.priority,
 80006a8:	793b      	ldrb	r3, [r7, #4]
    CANMessage_t ack_message = {
 80006aa:	753b      	strb	r3, [r7, #20]
 80006ac:	2303      	movs	r3, #3
 80006ae:	757b      	strb	r3, [r7, #21]
        .SenderID = SOURCE_ID,
        .DestinationID = myMessage.SenderID,
 80006b0:	797b      	ldrb	r3, [r7, #5]
    CANMessage_t ack_message = {
 80006b2:	75bb      	strb	r3, [r7, #22]
 80006b4:	2301      	movs	r3, #1
 80006b6:	75fb      	strb	r3, [r7, #23]
        .command = 0x01,
        .data = {myMessage.command, p_data[0], p_data[1], p_data[2], p_data[3], p_data[4], p_data[5]}
 80006b8:	79fb      	ldrb	r3, [r7, #7]
    CANMessage_t ack_message = {
 80006ba:	763b      	strb	r3, [r7, #24]
        .data = {myMessage.command, p_data[0], p_data[1], p_data[2], p_data[3], p_data[4], p_data[5]}
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
    CANMessage_t ack_message = {
 80006c0:	767b      	strb	r3, [r7, #25]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	76bb      	strb	r3, [r7, #26]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	76fb      	strb	r3, [r7, #27]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	78db      	ldrb	r3, [r3, #3]
 80006d2:	773b      	strb	r3, [r7, #28]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	777b      	strb	r3, [r7, #29]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	77bb      	strb	r3, [r7, #30]
    };
    return CAN_Transmit_Message(ack_message);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80006e8:	f7ff ff1e 	bl	8000528 <CAN_Transmit_Message>
 80006ec:	4603      	mov	r3, r0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3724      	adds	r7, #36	; 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}

080006f6 <CAN_Queue_Init>:
#include "can_message_queue.h"

//###############################################################################################
//Public Functions
//###############################################################################################
void CAN_Queue_Init(CANQueue_t* queue) {
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
    queue->tail = 0;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <CAN_Queue_IsEmpty>:

bool CAN_Queue_IsEmpty(const CANQueue_t* queue) {
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
    return (queue->head == queue->tail);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	bf0c      	ite	eq
 800072a:	2301      	moveq	r3, #1
 800072c:	2300      	movne	r3, #0
 800072e:	b2db      	uxtb	r3, r3
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <CAN_Queue_IsFull>:

bool CAN_Queue_IsFull(const CANQueue_t* queue) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return ((queue->tail + 1) % CAN_QUEUE_SIZE == queue->head);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <CAN_Queue_IsFull+0x38>)
 800074c:	fba3 1302 	umull	r1, r3, r3, r2
 8000750:	095b      	lsrs	r3, r3, #5
 8000752:	2164      	movs	r1, #100	; 0x64
 8000754:	fb01 f303 	mul.w	r3, r1, r3
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	4293      	cmp	r3, r2
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	51eb851f 	.word	0x51eb851f

08000778 <CAN_Queue_Enqueue>:

bool CAN_Queue_Enqueue(CANQueue_t* queue, CANMessage_t* message) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
    if (CAN_Queue_IsFull(queue)) {
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffda 	bl	800073c <CAN_Queue_IsFull>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <CAN_Queue_Enqueue+0x1a>
        return false;
 800078e:	2300      	movs	r3, #0
 8000790:	e01e      	b.n	80007d0 <CAN_Queue_Enqueue+0x58>
    }

    CANQueueItem_t* item = &queue->items[queue->tail];
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	4413      	add	r3, r2
 80007a0:	3308      	adds	r3, #8
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
    memcpy(&item->data, message, sizeof(CANMessage_t));
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	220b      	movs	r2, #11
 80007ac:	6839      	ldr	r1, [r7, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fcdc 	bl	800716c <memcpy>
    queue->tail = (queue->tail + 1) % CAN_QUEUE_SIZE;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <CAN_Queue_Enqueue+0x60>)
 80007bc:	fba3 1302 	umull	r1, r3, r3, r2
 80007c0:	095b      	lsrs	r3, r3, #5
 80007c2:	2164      	movs	r1, #100	; 0x64
 80007c4:	fb01 f303 	mul.w	r3, r1, r3
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	6053      	str	r3, [r2, #4]

    return true;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	51eb851f 	.word	0x51eb851f

080007dc <CAN_Queue_Dequeue>:

bool CAN_Queue_Dequeue(CANQueue_t* queue, CANMessage_t* messageBuffer) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
    if (CAN_Queue_IsEmpty(queue)) {
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff95 	bl	8000716 <CAN_Queue_IsEmpty>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <CAN_Queue_Dequeue+0x1a>
        return false;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e01e      	b.n	8000834 <CAN_Queue_Dequeue+0x58>
    }

    CANQueueItem_t* item = &queue->items[queue->head];
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	3308      	adds	r3, #8
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
    memcpy(messageBuffer, &item->data, sizeof(CANMessage_t));
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	220b      	movs	r2, #11
 8000810:	4619      	mov	r1, r3
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f006 fcaa 	bl	800716c <memcpy>
    queue->head = (queue->head + 1) % CAN_QUEUE_SIZE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <CAN_Queue_Dequeue+0x60>)
 8000820:	fba3 1302 	umull	r1, r3, r3, r2
 8000824:	095b      	lsrs	r3, r3, #5
 8000826:	2164      	movs	r1, #100	; 0x64
 8000828:	fb01 f303 	mul.w	r3, r1, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]

    return true;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	51eb851f 	.word	0x51eb851f

08000840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b37      	ldr	r3, [pc, #220]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a36      	ldr	r2, [pc, #216]	; (8000934 <MX_GPIO_Init+0xf4>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a30      	ldr	r2, [pc, #192]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_GPIO_Init+0xf4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a2a      	ldr	r2, [pc, #168]	; (8000934 <MX_GPIO_Init+0xf4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <MX_GPIO_Init+0xf4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800089e:	2200      	movs	r2, #0
 80008a0:	f240 71f7 	movw	r1, #2039	; 0x7f7
 80008a4:	4824      	ldr	r0, [pc, #144]	; (8000938 <MX_GPIO_Init+0xf8>)
 80008a6:	f003 f8c3 	bl	8003a30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4822      	ldr	r0, [pc, #136]	; (800093c <MX_GPIO_Init+0xfc>)
 80008b2:	f003 f8bd 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008bc:	481f      	ldr	r0, [pc, #124]	; (800093c <MX_GPIO_Init+0xfc>)
 80008be:	f003 f8b7 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f003 f8b0 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008d0:	f240 73f7 	movw	r3, #2039	; 0x7f7
 80008d4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4813      	ldr	r0, [pc, #76]	; (8000938 <MX_GPIO_Init+0xf8>)
 80008ea:	f002 ff27 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_GPIO_Init+0xfc>)
 8000908:	f002 ff18 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f002 ff08 	bl	800373c <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400
 800093c:	48000800 	.word	0x48000800

08000940 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_I2C1_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_I2C1_Init+0x74>)
 800094c:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <MX_I2C1_Init+0x7c>)
 800094e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000958:	2201      	movs	r2, #1
 800095a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <MX_I2C1_Init+0x74>)
 800097c:	f003 f88a 	bl	8003a94 <HAL_I2C_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000986:	f000 fa2f 	bl	8000de8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_I2C1_Init+0x74>)
 800098e:	f003 fc03 	bl	8004198 <HAL_I2CEx_ConfigAnalogFilter>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000998:	f000 fa26 	bl	8000de8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C1_Init+0x74>)
 80009a0:	f003 fc45 	bl	800422e <HAL_I2CEx_ConfigDigitalFilter>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 fa1d 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000b8 	.word	0x200000b8
 80009b8:	40005400 	.word	0x40005400
 80009bc:	10909cec 	.word	0x10909cec

080009c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0a4      	sub	sp, #144	; 0x90
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2268      	movs	r2, #104	; 0x68
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f006 fbd1 	bl	8007188 <memset>
  if(i2cHandle->Instance==I2C1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <HAL_I2C_MspInit+0xb0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d13b      	bne.n	8000a68 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fac7 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a08:	f000 f9ee 	bl	8000de8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a28:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f002 fe76 	bl	800373c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_I2C_MspInit+0xb4>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3790      	adds	r7, #144	; 0x90
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40021000 	.word	0x40021000

08000a78 <TEMP_transmitTemperatureData>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t secondsCounter = 0;

// function to get temperature data, package it and send it through CAN
void TEMP_transmitTemperatureData(uint8_t wellID) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	uint16_t temperatureReading = TEMP_getWellTemperatureReading(wellID);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 f9a3 	bl	8006dd0 <TEMP_getWellTemperatureReading>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	82fb      	strh	r3, [r7, #22]

	CANMessage_t message;

	message.SenderID = 0x3;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	727b      	strb	r3, [r7, #9]
	message.DestinationID = 0x1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	72bb      	strb	r3, [r7, #10]
	message.command = 0x34;
 8000a96:	2334      	movs	r3, #52	; 0x34
 8000a98:	72fb      	strb	r3, [r7, #11]
	message.priority = 0b0000011;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	723b      	strb	r3, [r7, #8]

	message.data[0] = temp_sequence++;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <TEMP_transmitTemperatureData+0x68>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	b2d1      	uxtb	r1, r2
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <TEMP_transmitTemperatureData+0x68>)
 8000aa8:	7011      	strb	r1, [r2, #0]
 8000aaa:	733b      	strb	r3, [r7, #12]
	message.data[1] = wellID;
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	737b      	strb	r3, [r7, #13]
	message.data[2] = (temperatureReading & 0xFF00) >> 8;
 8000ab0:	8afb      	ldrh	r3, [r7, #22]
 8000ab2:	0a1b      	lsrs	r3, r3, #8
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	73bb      	strb	r3, [r7, #14]
	message.data[3] = temperatureReading & 0xFF;
 8000aba:	8afb      	ldrh	r3, [r7, #22]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	73fb      	strb	r3, [r7, #15]
	message.data[4] = 0x00;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	743b      	strb	r3, [r7, #16]
    message.data[5] = 0x00;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	747b      	strb	r3, [r7, #17]
    message.data[6] = 0x00;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	74bb      	strb	r3, [r7, #18]

	CAN_Transmit_Message(message);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ad4:	f7ff fd28 	bl	8000528 <CAN_Transmit_Message>

}
 8000ad8:	bf00      	nop
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000010c 	.word	0x2000010c

08000ae4 <LIGHT_transmitLightLevelData>:

// function to get light level data, package it and send it through CAN
void LIGHT_transmitLightLevelData(uint8_t wellID) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint16_t lightLevelReading = LIGHT_getWellLightReading(wellID);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 f95b 	bl	8006dac <LIGHT_getWellLightReading>
 8000af6:	4603      	mov	r3, r0
 8000af8:	82fb      	strh	r3, [r7, #22]

	CANMessage_t message;

	message.SenderID = 0x3;
 8000afa:	2303      	movs	r3, #3
 8000afc:	727b      	strb	r3, [r7, #9]
	message.DestinationID = 0x1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	72bb      	strb	r3, [r7, #10]
	message.command = 0x33;
 8000b02:	2333      	movs	r3, #51	; 0x33
 8000b04:	72fb      	strb	r3, [r7, #11]
	message.priority = 0b0011111;
 8000b06:	231f      	movs	r3, #31
 8000b08:	723b      	strb	r3, [r7, #8]

	message.data[0] = light_sequence++;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <LIGHT_transmitLightLevelData+0x68>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	b2d1      	uxtb	r1, r2
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LIGHT_transmitLightLevelData+0x68>)
 8000b14:	7011      	strb	r1, [r2, #0]
 8000b16:	733b      	strb	r3, [r7, #12]
	message.data[1] = wellID;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	737b      	strb	r3, [r7, #13]
	message.data[2] = (lightLevelReading & 0xFF00) >> 8;
 8000b1c:	8afb      	ldrh	r3, [r7, #22]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	73bb      	strb	r3, [r7, #14]
	message.data[3] = lightLevelReading & 0xFF;
 8000b26:	8afb      	ldrh	r3, [r7, #22]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	73fb      	strb	r3, [r7, #15]
	message.data[4] = 0x00;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	743b      	strb	r3, [r7, #16]
	message.data[5] = 0x00;
 8000b30:	2300      	movs	r3, #0
 8000b32:	747b      	strb	r3, [r7, #17]
	message.data[6] = 0x00;
 8000b34:	2300      	movs	r3, #0
 8000b36:	74bb      	strb	r3, [r7, #18]

	CAN_Transmit_Message(message);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b40:	f7ff fcf2 	bl	8000528 <CAN_Transmit_Message>
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000010d 	.word	0x2000010d

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f000 fb00 	bl	800115a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5a:	f000 f8b1 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5e:	f7ff fe6f 	bl	8000840 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b62:	f7ff fb37 	bl	80001d4 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000b66:	f7ff fc1d 	bl	80003a4 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000b6a:	f7ff fee9 	bl	8000940 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000b6e:	f000 f941 	bl	8000df4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000b72:	f000 fa57 	bl	8001024 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000b76:	484f      	ldr	r0, [pc, #316]	; (8000cb4 <main+0x164>)
 8000b78:	f005 fcd0 	bl	800651c <HAL_TIM_Base_Start_IT>

  MAX7300_Init();
 8000b7c:	f006 f9b4 	bl	8006ee8 <MAX7300_Init>

  CAN_Queue_Init(&can_queue);
 8000b80:	484d      	ldr	r0, [pc, #308]	; (8000cb8 <main+0x168>)
 8000b82:	f7ff fdb8 	bl	80006f6 <CAN_Queue_Init>

  HAL_StatusTypeDef can_operation_status;
  can_operation_status = CAN_Init(); 		// defined in the custom can_driver file
 8000b86:	f7ff fc8f 	bl	80004a8 <CAN_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	75fb      	strb	r3, [r7, #23]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MAX6822_Toggle_WDI();
 8000b8e:	f006 f993 	bl	8006eb8 <MAX6822_Toggle_WDI>

	  if (!CAN_Queue_IsEmpty(&can_queue)) {
 8000b92:	4849      	ldr	r0, [pc, #292]	; (8000cb8 <main+0x168>)
 8000b94:	f7ff fdbf 	bl	8000716 <CAN_Queue_IsEmpty>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f4      	beq.n	8000b8e <main+0x3e>
		  CANMessage_t can_message;
		  CAN_Queue_Dequeue(&can_queue, &can_message);
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4843      	ldr	r0, [pc, #268]	; (8000cb8 <main+0x168>)
 8000bac:	f7ff fe16 	bl	80007dc <CAN_Queue_Dequeue>

		  uint8_t led_id, therm_id, heater_id;
		  uint8_t response_data[6] = {0,0,0,0,0,0};
 8000bb0:	4a42      	ldr	r2, [pc, #264]	; (8000cbc <main+0x16c>)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bb8:	6018      	str	r0, [r3, #0]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	8019      	strh	r1, [r3, #0]

		  switch (can_message.command) {
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	3ba0      	subs	r3, #160	; 0xa0
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d873      	bhi.n	8000cae <main+0x15e>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <main+0x7c>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000be9 	.word	0x08000be9
 8000bd0:	08000bfb 	.word	0x08000bfb
 8000bd4:	08000c19 	.word	0x08000c19
 8000bd8:	08000c37 	.word	0x08000c37
 8000bdc:	08000c55 	.word	0x08000c55
 8000be0:	08000c73 	.word	0x08000c73
 8000be4:	08000c91 	.word	0x08000c91
		      case 0xA0: // RESET command

		    	  CAN_Send_Default_ACK(can_message);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bf0:	f7ff fd2c 	bl	800064c <CAN_Send_Default_ACK>

		          MAX6822_Manual_Reset();
 8000bf4:	f006 f96c 	bl	8006ed0 <MAX6822_Manual_Reset>

		          break;
 8000bf8:	e05a      	b.n	8000cb0 <main+0x160>

		      case 0xA1: // LED ON command

		    	  led_id = can_message.data[0];
 8000bfa:	7b3b      	ldrb	r3, [r7, #12]
 8000bfc:	753b      	strb	r3, [r7, #20]

		    	  LED_enableLED(led_id);
 8000bfe:	7d3b      	ldrb	r3, [r7, #20]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f006 f8af 	bl	8006d64 <LED_enableLED>

		    	  response_data[0] = led_id;
 8000c06:	7d3b      	ldrb	r3, [r7, #20]
 8000c08:	703b      	strb	r3, [r7, #0]

		    	  CAN_Send_Default_ACK_With_Data(can_message, response_data);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	f107 0208 	add.w	r2, r7, #8
 8000c10:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c12:	f7ff fd42 	bl	800069a <CAN_Send_Default_ACK_With_Data>

				  break;
 8000c16:	e04b      	b.n	8000cb0 <main+0x160>

		      case 0xA2: // LED OFF command

		    	  led_id = can_message.data[0];
 8000c18:	7b3b      	ldrb	r3, [r7, #12]
 8000c1a:	753b      	strb	r3, [r7, #20]

		    	  LED_disableLED(led_id);
 8000c1c:	7d3b      	ldrb	r3, [r7, #20]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 f8b2 	bl	8006d88 <LED_disableLED>

		    	  response_data[0] = led_id;
 8000c24:	7d3b      	ldrb	r3, [r7, #20]
 8000c26:	703b      	strb	r3, [r7, #0]

		    	  CAN_Send_Default_ACK_With_Data(can_message, response_data);
 8000c28:	463b      	mov	r3, r7
 8000c2a:	f107 0208 	add.w	r2, r7, #8
 8000c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c30:	f7ff fd33 	bl	800069a <CAN_Send_Default_ACK_With_Data>

		          break;
 8000c34:	e03c      	b.n	8000cb0 <main+0x160>

		      case 0xA3: // THERMOREGULATION ON command

		    	  therm_id = can_message.data[0];
 8000c36:	7b3b      	ldrb	r3, [r7, #12]
 8000c38:	757b      	strb	r3, [r7, #21]

		    	  THERM_enableThermostat(therm_id);
 8000c3a:	7d7b      	ldrb	r3, [r7, #21]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f006 f90f 	bl	8006e60 <THERM_enableThermostat>

		    	  response_data[0] = therm_id;
 8000c42:	7d7b      	ldrb	r3, [r7, #21]
 8000c44:	703b      	strb	r3, [r7, #0]

		    	  CAN_Send_Default_ACK_With_Data(can_message, response_data);
 8000c46:	463b      	mov	r3, r7
 8000c48:	f107 0208 	add.w	r2, r7, #8
 8000c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c4e:	f7ff fd24 	bl	800069a <CAN_Send_Default_ACK_With_Data>

		          break;
 8000c52:	e02d      	b.n	8000cb0 <main+0x160>

		      case 0xA4: // THERMOREGULATION OFF COMMAND

		    	  therm_id = can_message.data[0];
 8000c54:	7b3b      	ldrb	r3, [r7, #12]
 8000c56:	757b      	strb	r3, [r7, #21]

		    	  THERM_disableThermostat(therm_id);
 8000c58:	7d7b      	ldrb	r3, [r7, #21]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f006 f916 	bl	8006e8c <THERM_disableThermostat>

		    	  response_data[0] = therm_id;
 8000c60:	7d7b      	ldrb	r3, [r7, #21]
 8000c62:	703b      	strb	r3, [r7, #0]

		    	  CAN_Send_Default_ACK_With_Data(can_message, response_data);
 8000c64:	463b      	mov	r3, r7
 8000c66:	f107 0208 	add.w	r2, r7, #8
 8000c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c6c:	f7ff fd15 	bl	800069a <CAN_Send_Default_ACK_With_Data>

		          break;
 8000c70:	e01e      	b.n	8000cb0 <main+0x160>

		      case 0xA5: // HEAT ON command

		    	  heater_id = can_message.data[0];
 8000c72:	7b3b      	ldrb	r3, [r7, #12]
 8000c74:	75bb      	strb	r3, [r7, #22]

		    	  HEAT_enableHeater(heater_id);
 8000c76:	7dbb      	ldrb	r3, [r7, #22]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f006 f84f 	bl	8006d1c <HEAT_enableHeater>

		    	  response_data[0] = heater_id;
 8000c7e:	7dbb      	ldrb	r3, [r7, #22]
 8000c80:	703b      	strb	r3, [r7, #0]

                  CAN_Send_Default_ACK_With_Data(can_message, response_data);
 8000c82:	463b      	mov	r3, r7
 8000c84:	f107 0208 	add.w	r2, r7, #8
 8000c88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c8a:	f7ff fd06 	bl	800069a <CAN_Send_Default_ACK_With_Data>

		          break;
 8000c8e:	e00f      	b.n	8000cb0 <main+0x160>

		      case 0xA6: // HEATER OFF command

		    	  heater_id = can_message.data[0];
 8000c90:	7b3b      	ldrb	r3, [r7, #12]
 8000c92:	75bb      	strb	r3, [r7, #22]

		    	  HEAT_disableHeater(heater_id);
 8000c94:	7dbb      	ldrb	r3, [r7, #22]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f006 f852 	bl	8006d40 <HEAT_disableHeater>

		    	  response_data[0] = heater_id;
 8000c9c:	7dbb      	ldrb	r3, [r7, #22]
 8000c9e:	703b      	strb	r3, [r7, #0]

		    	  CAN_Send_Default_ACK_With_Data(can_message, response_data);
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	f107 0208 	add.w	r2, r7, #8
 8000ca6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca8:	f7ff fcf7 	bl	800069a <CAN_Send_Default_ACK_With_Data>

		          break;
 8000cac:	e000      	b.n	8000cb0 <main+0x160>

		      default:
		          break;
 8000cae:	bf00      	nop
	  MAX6822_Toggle_WDI();
 8000cb0:	e76d      	b.n	8000b8e <main+0x3e>
 8000cb2:	bf00      	nop
 8000cb4:	200005c8 	.word	0x200005c8
 8000cb8:	20000110 	.word	0x20000110
 8000cbc:	080071b0 	.word	0x080071b0

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b096      	sub	sp, #88	; 0x58
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2244      	movs	r2, #68	; 0x44
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f006 fa5a 	bl	8007188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ce2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ce6:	f003 fafd 	bl	80042e4 <HAL_PWREx_ControlVoltageScaling>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cf0:	f000 f87a 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d10:	2328      	movs	r3, #40	; 0x28
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d14:	2307      	movs	r3, #7
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fb33 	bl	8004390 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d30:	f000 f85a 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 ff33 	bl	8004bb8 <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d58:	f000 f846 	bl	8000de8 <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3758      	adds	r7, #88	; 0x58
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  // this SHOULD happen once per second. System clock = 80MHz, timer interval is 80000000.
  if(htim->Instance == TIM2) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d128      	bne.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x64>
    secondsCounter++;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d80:	701a      	strb	r2, [r3, #0]
    if (secondsCounter >= 60) {
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b3b      	cmp	r3, #59	; 0x3b
 8000d88:	d91e      	bls.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x64>
        secondsCounter = 0;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
        for (int i = 1; i < 11; i++) {
 8000d90:	2301      	movs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e007      	b.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x42>
            TEMP_transmitTemperatureData(i);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fe6c 	bl	8000a78 <TEMP_transmitTemperatureData>
        for (int i = 1; i < 11; i++) {
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2b0a      	cmp	r3, #10
 8000daa:	ddf4      	ble.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0x32>
        }
        for (int i = 1; i < 11; i++) {
 8000dac:	2301      	movs	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	e007      	b.n	8000dc2 <HAL_TIM_PeriodElapsedCallback+0x5e>
            LIGHT_transmitLightLevelData(i);
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fe94 	bl	8000ae4 <LIGHT_transmitLightLevelData>
        for (int i = 1; i < 11; i++) {
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b0a      	cmp	r3, #10
 8000dc6:	ddf4      	ble.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x4e>
        }
    }
  }
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000010e 	.word	0x2000010e

08000dd4 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Interrupt handler for new CAN message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    CAN_Message_Received(); // no error handling right now
 8000ddc:	f7ff fbe4 	bl	80005a8 <CAN_Message_Received>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <MX_SPI3_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e42:	2207      	movs	r2, #7
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e54:	f004 fbfa 	bl	800564c <HAL_SPI_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f7ff ffc3 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000564 	.word	0x20000564
 8000e6c:	40003c00 	.word	0x40003c00

08000e70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0x7c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d128      	bne.n	8000ee4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_SPI_MspInit+0x80>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ec2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_SPI_MspInit+0x84>)
 8000ee0:	f002 fc2c 	bl	800373c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40003c00 	.word	0x40003c00
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_MspInit+0x88>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_MspInit+0x88>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_MspInit+0x88>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_MspInit+0x88>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_MspInit+0x88>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_MspInit+0x88>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	f06f 000b 	mvn.w	r0, #11
 8000f36:	f002 fbca 	bl	80036ce <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	f06f 000a 	mvn.w	r0, #10
 8000f42:	f002 fbc4 	bl	80036ce <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2101      	movs	r1, #1
 8000f4a:	f06f 0009 	mvn.w	r0, #9
 8000f4e:	f002 fbbe 	bl	80036ce <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2101      	movs	r1, #1
 8000f56:	f06f 0004 	mvn.w	r0, #4
 8000f5a:	f002 fbb8 	bl	80036ce <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2101      	movs	r1, #1
 8000f62:	f06f 0003 	mvn.w	r0, #3
 8000f66:	f002 fbb2 	bl	80036ce <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	f06f 0001 	mvn.w	r0, #1
 8000f72:	f002 fbac 	bl	80036ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f918 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <CAN1_RX0_IRQHandler+0x10>)
 8000fde:	f002 f86b 	bl	80030b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000090 	.word	0x20000090

08000fec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM2_IRQHandler+0x10>)
 8000ff2:	f005 faef 	bl	80065d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200005c8 	.word	0x200005c8

08001000 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001048:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM2_Init+0x94>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000000;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001058:	4a18      	ldr	r2, [pc, #96]	; (80010bc <MX_TIM2_Init+0x98>)
 800105a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM2_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM2_Init+0x94>)
 800106a:	f005 f9ff 	bl	800646c <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001074:	f7ff feb8 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001086:	f005 fbc4 	bl	8006812 <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001090:	f7ff feaa 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM2_Init+0x94>)
 80010a2:	f005 fdaf 	bl	8006c04 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f7ff fe9c 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200005c8 	.word	0x200005c8
 80010bc:	04c4b400 	.word	0x04c4b400

080010c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d0:	d113      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6593      	str	r3, [r2, #88]	; 0x58
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	201c      	movs	r0, #28
 80010f0:	f002 faed 	bl	80036ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f4:	201c      	movs	r0, #28
 80010f6:	f002 fb06 	bl	8003706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff ff78 	bl	8001000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f005 fff5 	bl	8007124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff fd09 	bl	8000b50 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800114c:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 8001150:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001154:	200006b8 	.word	0x200006b8

08001158 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_IRQHandler>

0800115a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f002 faa7 	bl	80036b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f80e 	bl	800118c <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e001      	b.n	8001180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117c:	f7ff febc 	bl	8000ef8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_InitTick+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d023      	beq.n	80011e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_InitTick+0x70>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 fab3 	bl	8003722 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10f      	bne.n	80011e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d809      	bhi.n	80011dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f002 fa7d 	bl	80036ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_InitTick+0x74>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e007      	b.n	80011ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e004      	b.n	80011ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	e001      	b.n	80011ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000614 	.word	0x20000614

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000614 	.word	0x20000614

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3360      	adds	r3, #96	; 0x60
 8001306:	461a      	mov	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <LL_ADC_SetOffset+0x44>)
 8001316:	4013      	ands	r3, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	4313      	orrs	r3, r2
 8001324:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	03fff000 	.word	0x03fff000

0800133c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3360      	adds	r3, #96	; 0x60
 800134a:	461a      	mov	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3360      	adds	r3, #96	; 0x60
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001392:	bf00      	nop
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	615a      	str	r2, [r3, #20]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b087      	sub	sp, #28
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3330      	adds	r3, #48	; 0x30
 80013fa:	461a      	mov	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	4413      	add	r3, r2
 8001408:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	211f      	movs	r1, #31
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	401a      	ands	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	0e9b      	lsrs	r3, r3, #26
 8001422:	f003 011f 	and.w	r1, r3, #31
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	431a      	orrs	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001442:	b480      	push	{r7}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3314      	adds	r3, #20
 8001452:	461a      	mov	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	0e5b      	lsrs	r3, r3, #25
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	0d1b      	lsrs	r3, r3, #20
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	2107      	movs	r1, #7
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	401a      	ands	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	0d1b      	lsrs	r3, r3, #20
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	431a      	orrs	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0318 	and.w	r3, r3, #24
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80014bc:	40d9      	lsrs	r1, r3
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	400b      	ands	r3, r1
 80014c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c6:	431a      	orrs	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	0007ffff 	.word	0x0007ffff

080014e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6093      	str	r3, [r2, #8]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001518:	d101      	bne.n	800151e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800153c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001540:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001568:	d101      	bne.n	800156e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800158c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b8:	f043 0202 	orr.w	r2, r3, #2
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <LL_ADC_IsEnabled+0x18>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <LL_ADC_IsEnabled+0x1a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d101      	bne.n	800160a <LL_ADC_IsDisableOngoing+0x18>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_ADC_IsDisableOngoing+0x1a>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800162c:	f043 0204 	orr.w	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001654:	f043 0210 	orr.w	r2, r3, #16
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b04      	cmp	r3, #4
 800167a:	d101      	bne.n	8001680 <LL_ADC_REG_IsConversionOngoing+0x18>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800169e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a2:	f043 0220 	orr.w	r2, r3, #32
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d101      	bne.n	80016ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e12f      	b.n	8001956 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fdcb 	bl	80002a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fef1 	bl	8001504 <LL_ADC_IsDeepPowerDownEnabled>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fed7 	bl	80014e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff0c 	bl	8001554 <LL_ADC_IsInternalRegulatorEnabled>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d115      	bne.n	800176e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fef0 	bl	800152c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_ADC_Init+0x284>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	4a84      	ldr	r2, [pc, #528]	; (8001964 <HAL_ADC_Init+0x288>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	3301      	adds	r3, #1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001760:	e002      	b.n	8001768 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3b01      	subs	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff feee 	bl	8001554 <LL_ADC_IsInternalRegulatorEnabled>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10d      	bne.n	800179a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	f043 0210 	orr.w	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff62 	bl	8001668 <LL_ADC_REG_IsConversionOngoing>
 80017a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 80c8 	bne.w	8001944 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 80c4 	bne.w	8001944 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017c4:	f043 0202 	orr.w	r2, r3, #2
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fefb 	bl	80015cc <LL_ADC_IsEnabled>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10b      	bne.n	80017f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017dc:	4862      	ldr	r0, [pc, #392]	; (8001968 <HAL_ADC_Init+0x28c>)
 80017de:	f7ff fef5 	bl	80015cc <LL_ADC_IsEnabled>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4619      	mov	r1, r3
 80017ee:	485f      	ldr	r0, [pc, #380]	; (800196c <HAL_ADC_Init+0x290>)
 80017f0:	f7ff fd4c 	bl	800128c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e5b      	ldrb	r3, [r3, #25]
 80017f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001804:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800180a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001812:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d106      	bne.n	8001830 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	3b01      	subs	r3, #1
 8001828:	045b      	lsls	r3, r3, #17
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d009      	beq.n	800184c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_ADC_Init+0x294>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	430b      	orrs	r3, r1
 800185e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff feff 	bl	8001668 <LL_ADC_REG_IsConversionOngoing>
 800186a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff20 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 8001876:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d140      	bne.n	8001900 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d13d      	bne.n	8001900 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e1b      	ldrb	r3, [r3, #24]
 800188c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800188e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001896:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a6:	f023 0306 	bic.w	r3, r3, #6
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d118      	bne.n	80018f0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018d4:	4311      	orrs	r1, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018e0:	430a      	orrs	r2, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	e007      	b.n	8001900 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d10c      	bne.n	8001922 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f023 010f 	bic.w	r1, r3, #15
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	1e5a      	subs	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
 8001920:	e007      	b.n	8001932 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 020f 	bic.w	r2, r2, #15
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f023 0303 	bic.w	r3, r3, #3
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	659a      	str	r2, [r3, #88]	; 0x58
 8001942:	e007      	b.n	8001954 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	f043 0210 	orr.w	r2, r3, #16
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001954:	7ffb      	ldrb	r3, [r7, #31]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000
 8001964:	053e2d63 	.word	0x053e2d63
 8001968:	50040000 	.word	0x50040000
 800196c:	50040300 	.word	0x50040300
 8001970:	fff0c007 	.word	0xfff0c007

08001974 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe71 	bl	8001668 <LL_ADC_REG_IsConversionOngoing>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d14f      	bne.n	8001a2c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADC_Start+0x26>
 8001996:	2302      	movs	r3, #2
 8001998:	e04b      	b.n	8001a32 <HAL_ADC_Start+0xbe>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fdd0 	bl	8002548 <ADC_Enable>
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d137      	bne.n	8001a22 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d2:	d106      	bne.n	80019e2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	f023 0206 	bic.w	r2, r3, #6
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	65da      	str	r2, [r3, #92]	; 0x5c
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	221c      	movs	r2, #28
 80019ee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fdfc 	bl	8001618 <LL_ADC_REG_StartConversion>
 8001a20:	e006      	b.n	8001a30 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001a2a:	e001      	b.n	8001a30 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_Stop+0x16>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e023      	b.n	8001a98 <HAL_ADC_Stop+0x5e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a58:	2103      	movs	r1, #3
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fcb8 	bl	80023d0 <ADC_ConversionStop>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d111      	bne.n	8001a8e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fdf2 	bl	8002654 <ADC_Disable>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d102      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e010      	b.n	8001ada <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06f      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ada:	f7ff fba7 	bl	800122c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ae0:	e021      	b.n	8001b26 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d01d      	beq.n	8001b26 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001aea:	f7ff fb9f 	bl	800122c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <HAL_ADC_PollForConversion+0x60>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d112      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10b      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f043 0204 	orr.w	r2, r3, #4
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e047      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0d6      	beq.n	8001ae2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fc3d 	bl	80013c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01c      	beq.n	8001b8a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e5b      	ldrb	r3, [r3, #25]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d118      	bne.n	8001b8a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d111      	bne.n	8001b8a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	f043 0201 	orr.w	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d104      	bne.n	8001ba2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e008      	b.n	8001bb4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d103      	bne.n	8001bb4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0b6      	sub	sp, #216	; 0xd8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x22>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e3d5      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x7ce>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fd2e 	bl	8001668 <LL_ADC_REG_IsConversionOngoing>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 83ba 	bne.w	8002388 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d824      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	3b02      	subs	r3, #2
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d81b      	bhi.n	8001c5e <HAL_ADC_ConfigChannel+0x86>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_ADC_ConfigChannel+0x54>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c45 	.word	0x08001c45
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c55 	.word	0x08001c55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	220c      	movs	r2, #12
 8001c40:	605a      	str	r2, [r3, #4]
          break;
 8001c42:	e011      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2212      	movs	r2, #18
 8001c48:	605a      	str	r2, [r3, #4]
          break;
 8001c4a:	e00d      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2218      	movs	r2, #24
 8001c50:	605a      	str	r2, [r3, #4]
          break;
 8001c52:	e009      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5a:	605a      	str	r2, [r3, #4]
          break;
 8001c5c:	e004      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2206      	movs	r2, #6
 8001c62:	605a      	str	r2, [r3, #4]
          break;
 8001c64:	e000      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001c66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	f7ff fbb8 	bl	80013ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fcf2 	bl	8001668 <LL_ADC_REG_IsConversionOngoing>
 8001c84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fd12 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 8001c92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 81c1 	bne.w	8002022 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 81bc 	bne.w	8002022 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7ff fbbf 	bl	8001442 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fb66 	bl	800139e <LL_ADC_SetSamplingTimeCommonConfig>
 8001cd2:	e00e      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6819      	ldr	r1, [r3, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f7ff fbae 	bl	8001442 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fb56 	bl	800139e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d00a      	beq.n	8001d2a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6919      	ldr	r1, [r3, #16]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d24:	f7ff fae6 	bl	80012f4 <LL_ADC_SetOffset>
 8001d28:	e17b      	b.n	8002022 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fb03 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x17e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff faf8 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	e01e      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1bc>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff faed 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	e004      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1d4>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	e018      	b.n	8001dde <HAL_ADC_ConfigChannel+0x206>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e004      	b.n	8001dde <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001dd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d106      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fabc 	bl	8001368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff faa0 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10a      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x244>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fa95 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	f003 021f 	and.w	r2, r3, #31
 8001e1a:	e01e      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x282>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fa8a 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	e004      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d105      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x29a>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	e018      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x2cc>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e004      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fa59 	bl	8001368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2102      	movs	r1, #2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fa3d 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x30a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fa32 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	e01e      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x348>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fa27 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e004      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x360>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	e016      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x38e>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e004      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2102      	movs	r1, #2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f9f8 	bl	8001368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f9dc 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x3cc>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2103      	movs	r1, #3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f9d1 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	f003 021f 	and.w	r2, r3, #31
 8001fa2:	e017      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x3fc>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2103      	movs	r1, #3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f9c6 	bl	800133c <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x414>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0e9b      	lsrs	r3, r3, #26
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	e011      	b.n	8002010 <HAL_ADC_ConfigChannel+0x438>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002010:	429a      	cmp	r2, r3
 8002012:	d106      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	2103      	movs	r1, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f9a3 	bl	8001368 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fad0 	bl	80015cc <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 8140 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	461a      	mov	r2, r3
 8002042:	f7ff fa29 	bl	8001498 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4a8f      	ldr	r2, [pc, #572]	; (8002288 <HAL_ADC_ConfigChannel+0x6b0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	f040 8131 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10b      	bne.n	800207a <HAL_ADC_ConfigChannel+0x4a2>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	3301      	adds	r3, #1
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	2b09      	cmp	r3, #9
 8002070:	bf94      	ite	ls
 8002072:	2301      	movls	r3, #1
 8002074:	2300      	movhi	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	e019      	b.n	80020ae <HAL_ADC_ConfigChannel+0x4d6>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800208a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800208c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e003      	b.n	800209e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	bf94      	ite	ls
 80020a8:	2301      	movls	r3, #1
 80020aa:	2300      	movhi	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d079      	beq.n	80021a6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d107      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x4f6>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	3301      	adds	r3, #1
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020cc:	e015      	b.n	80020fa <HAL_ADC_ConfigChannel+0x522>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020de:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80020e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e003      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80020ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	069b      	lsls	r3, r3, #26
 80020f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_ADC_ConfigChannel+0x542>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0e9b      	lsrs	r3, r3, #26
 800210c:	3301      	adds	r3, #1
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	e017      	b.n	800214a <HAL_ADC_ConfigChannel+0x572>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800212c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002132:	2320      	movs	r3, #32
 8002134:	e003      	b.n	800213e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	ea42 0103 	orr.w	r1, r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x598>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	051b      	lsls	r3, r3, #20
 800216e:	e018      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x5ca>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002180:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e003      	b.n	8002194 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800218c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	f003 021f 	and.w	r2, r3, #31
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a2:	430b      	orrs	r3, r1
 80021a4:	e081      	b.n	80022aa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x5ea>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	3301      	adds	r3, #1
 80021ba:	069b      	lsls	r3, r3, #26
 80021bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c0:	e015      	b.n	80021ee <HAL_ADC_ConfigChannel+0x616>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ADC_ConfigChannel+0x636>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	3301      	adds	r3, #1
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	e017      	b.n	800223e <HAL_ADC_ConfigChannel+0x666>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61fb      	str	r3, [r7, #28]
  return result;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	ea42 0103 	orr.w	r1, r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_ADC_ConfigChannel+0x692>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	3301      	adds	r3, #1
 8002256:	f003 021f 	and.w	r2, r3, #31
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3b1e      	subs	r3, #30
 8002262:	051b      	lsls	r3, r3, #20
 8002264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002268:	e01e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x6d0>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	613b      	str	r3, [r7, #16]
  return result;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	e006      	b.n	8002294 <HAL_ADC_ConfigChannel+0x6bc>
 8002286:	bf00      	nop
 8002288:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	051b      	lsls	r3, r3, #20
 80022a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a8:	430b      	orrs	r3, r1
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	6892      	ldr	r2, [r2, #8]
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7ff f8c7 	bl	8001442 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d06c      	beq.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c0:	483c      	ldr	r0, [pc, #240]	; (80023b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80022c2:	f7ff f809 	bl	80012d8 <LL_ADC_GetCommonPathInternalCh>
 80022c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a3a      	ldr	r2, [pc, #232]	; (80023b8 <HAL_ADC_ConfigChannel+0x7e0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d127      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d121      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a35      	ldr	r2, [pc, #212]	; (80023bc <HAL_ADC_ConfigChannel+0x7e4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d157      	bne.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022f2:	4619      	mov	r1, r3
 80022f4:	482f      	ldr	r0, [pc, #188]	; (80023b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80022f6:	f7fe ffdc 	bl	80012b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_ADC_ConfigChannel+0x7e8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002314:	e002      	b.n	800231c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3b01      	subs	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002322:	e03a      	b.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d113      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x77e>
 800232e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <HAL_ADC_ConfigChannel+0x7e4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d12a      	bne.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234c:	4619      	mov	r1, r3
 800234e:	4819      	ldr	r0, [pc, #100]	; (80023b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002350:	f7fe ffaf 	bl	80012b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002354:	e021      	b.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_ADC_ConfigChannel+0x7f4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d11c      	bne.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d116      	bne.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a12      	ldr	r2, [pc, #72]	; (80023bc <HAL_ADC_ConfigChannel+0x7e4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d111      	bne.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800237e:	4619      	mov	r1, r3
 8002380:	480c      	ldr	r0, [pc, #48]	; (80023b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002382:	f7fe ff96 	bl	80012b2 <LL_ADC_SetCommonPathInternalCh>
 8002386:	e008      	b.n	800239a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80023a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	37d8      	adds	r7, #216	; 0xd8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	80080000 	.word	0x80080000
 80023b4:	50040300 	.word	0x50040300
 80023b8:	c7520000 	.word	0xc7520000
 80023bc:	50040000 	.word	0x50040000
 80023c0:	20000000 	.word	0x20000000
 80023c4:	053e2d63 	.word	0x053e2d63
 80023c8:	cb840000 	.word	0xcb840000
 80023cc:	80000001 	.word	0x80000001

080023d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff f93e 	bl	8001668 <LL_ADC_REG_IsConversionOngoing>
 80023ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff f95f 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 80023f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8098 	beq.w	8002538 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02a      	beq.n	800246c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7e5b      	ldrb	r3, [r3, #25]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d126      	bne.n	800246c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7e1b      	ldrb	r3, [r3, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d122      	bne.n	800246c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002426:	2301      	movs	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800242a:	e014      	b.n	8002456 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4a45      	ldr	r2, [pc, #276]	; (8002544 <ADC_ConversionStop+0x174>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d90d      	bls.n	8002450 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	f043 0210 	orr.w	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e074      	b.n	800253a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	3301      	adds	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d1e3      	bne.n	800242c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d014      	beq.n	800249c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f8f6 	bl	8001668 <LL_ADC_REG_IsConversionOngoing>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff f8b3 	bl	80015f2 <LL_ADC_IsDisableOngoing>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff f8d2 	bl	8001640 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d014      	beq.n	80024cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f905 	bl	80016b6 <LL_ADC_INJ_IsConversionOngoing>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f89b 	bl	80015f2 <LL_ADC_IsDisableOngoing>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f8e1 	bl	800168e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d005      	beq.n	80024de <ADC_ConversionStop+0x10e>
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d105      	bne.n	80024e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80024d8:	230c      	movs	r3, #12
 80024da:	617b      	str	r3, [r7, #20]
        break;
 80024dc:	e005      	b.n	80024ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80024de:	2308      	movs	r3, #8
 80024e0:	617b      	str	r3, [r7, #20]
        break;
 80024e2:	e002      	b.n	80024ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80024e4:	2304      	movs	r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
        break;
 80024e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80024ea:	f7fe fe9f 	bl	800122c <HAL_GetTick>
 80024ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80024f0:	e01b      	b.n	800252a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80024f2:	f7fe fe9b 	bl	800122c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d914      	bls.n	800252a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f043 0210 	orr.w	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1dc      	bne.n	80024f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	a33fffff 	.word	0xa33fffff

08002548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f837 	bl	80015cc <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d169      	bne.n	8002638 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	4b36      	ldr	r3, [pc, #216]	; (8002644 <ADC_Enable+0xfc>)
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00d      	beq.n	800258e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e055      	b.n	800263a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fff2 	bl	800157c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002598:	482b      	ldr	r0, [pc, #172]	; (8002648 <ADC_Enable+0x100>)
 800259a:	f7fe fe9d 	bl	80012d8 <LL_ADC_GetCommonPathInternalCh>
 800259e:	4603      	mov	r3, r0
 80025a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025a8:	4b28      	ldr	r3, [pc, #160]	; (800264c <ADC_Enable+0x104>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	4a28      	ldr	r2, [pc, #160]	; (8002650 <ADC_Enable+0x108>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80025c2:	e002      	b.n	80025ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f9      	bne.n	80025c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fe2c 	bl	800122c <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025d6:	e028      	b.n	800262a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fff5 	bl	80015cc <LL_ADC_IsEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d104      	bne.n	80025f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe ffc5 	bl	800157c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025f2:	f7fe fe1b 	bl	800122c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d914      	bls.n	800262a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d00d      	beq.n	800262a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e007      	b.n	800263a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d1cf      	bne.n	80025d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	8000003f 	.word	0x8000003f
 8002648:	50040300 	.word	0x50040300
 800264c:	20000000 	.word	0x20000000
 8002650:	053e2d63 	.word	0x053e2d63

08002654 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe ffc6 	bl	80015f2 <LL_ADC_IsDisableOngoing>
 8002666:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe ffad 	bl	80015cc <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d047      	beq.n	8002708 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d144      	bne.n	8002708 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030d 	and.w	r3, r3, #13
 8002688:	2b01      	cmp	r3, #1
 800268a:	d10c      	bne.n	80026a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe ff87 	bl	80015a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2203      	movs	r2, #3
 800269c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269e:	f7fe fdc5 	bl	800122c <HAL_GetTick>
 80026a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026a4:	e029      	b.n	80026fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e023      	b.n	800270a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026c2:	f7fe fdb3 	bl	800122c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d914      	bls.n	80026fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f043 0210 	orr.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e007      	b.n	800270a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1dc      	bne.n	80026c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <LL_ADC_StartCalibration>:
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800272e:	4313      	orrs	r3, r2
 8002730:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_IsCalibrationOnGoing>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002758:	d101      	bne.n	800275e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_ADCEx_Calibration_Start+0x1c>
 8002784:	2302      	movs	r3, #2
 8002786:	e04d      	b.n	8002824 <HAL_ADCEx_Calibration_Start+0xb8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff5f 	bl	8002654 <ADC_Disable>
 8002796:	4603      	mov	r3, r0
 8002798:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d136      	bne.n	800280e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027a8:	f023 0302 	bic.w	r3, r3, #2
 80027ac:	f043 0202 	orr.w	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6839      	ldr	r1, [r7, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ffa9 	bl	8002712 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027c0:	e014      	b.n	80027ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80027ce:	d30d      	bcc.n	80027ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f023 0312 	bic.w	r3, r3, #18
 80027d8:	f043 0210 	orr.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e01b      	b.n	8002824 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ffa7 	bl	8002744 <LL_ADC_IsCalibrationOnGoing>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e2      	bne.n	80027c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	659a      	str	r2, [r3, #88]	; 0x58
 800280c:	e005      	b.n	800281a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0ed      	b.n	8002a1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fd fde0 	bl	8000410 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002860:	f7fe fce4 	bl	800122c <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002866:	e012      	b.n	800288e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002868:	f7fe fce0 	bl	800122c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b0a      	cmp	r3, #10
 8002874:	d90b      	bls.n	800288e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0c5      	b.n	8002a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0e5      	beq.n	8002868 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0202 	bic.w	r2, r2, #2
 80028aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ac:	f7fe fcbe 	bl	800122c <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028b2:	e012      	b.n	80028da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028b4:	f7fe fcba 	bl	800122c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b0a      	cmp	r3, #10
 80028c0:	d90b      	bls.n	80028da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2205      	movs	r2, #5
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e09f      	b.n	8002a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e5      	bne.n	80028b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d108      	bne.n	8002902 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e007      	b.n	8002912 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7e5b      	ldrb	r3, [r3, #25]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d108      	bne.n	800292c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e007      	b.n	800293c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e9b      	ldrb	r3, [r3, #26]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d108      	bne.n	8002956 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e007      	b.n	8002966 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0220 	bic.w	r2, r2, #32
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7edb      	ldrb	r3, [r3, #27]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d108      	bne.n	8002980 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0210 	bic.w	r2, r2, #16
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e007      	b.n	8002990 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0210 	orr.w	r2, r2, #16
 800298e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7f1b      	ldrb	r3, [r3, #28]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d108      	bne.n	80029aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0208 	orr.w	r2, r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e007      	b.n	80029ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0208 	bic.w	r2, r2, #8
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7f5b      	ldrb	r3, [r3, #29]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d108      	bne.n	80029d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0204 	orr.w	r2, r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e007      	b.n	80029e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	ea42 0103 	orr.w	r1, r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d003      	beq.n	8002a48 <HAL_CAN_ConfigFilter+0x26>
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	f040 80aa 	bne.w	8002b9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	2201      	movs	r2, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d123      	bne.n	8002aca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002aa4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3248      	adds	r2, #72	; 0x48
 8002aaa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002abe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ac0:	6979      	ldr	r1, [r7, #20]
 8002ac2:	3348      	adds	r3, #72	; 0x48
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d122      	bne.n	8002b18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002af2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3248      	adds	r2, #72	; 0x48
 8002af8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	3348      	adds	r3, #72	; 0x48
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b32:	e007      	b.n	8002b44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b5e:	e007      	b.n	8002b70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b8e:	f023 0201 	bic.w	r2, r3, #1
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e006      	b.n	8002baa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d12e      	bne.n	8002c28 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002be2:	f7fe fb23 	bl	800122c <HAL_GetTick>
 8002be6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002be8:	e012      	b.n	8002c10 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bea:	f7fe fb1f 	bl	800122c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b0a      	cmp	r3, #10
 8002bf6:	d90b      	bls.n	8002c10 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2205      	movs	r2, #5
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e012      	b.n	8002c36 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e5      	bne.n	8002bea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e006      	b.n	8002c36 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b089      	sub	sp, #36	; 0x24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c52:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c5c:	7ffb      	ldrb	r3, [r7, #31]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d003      	beq.n	8002c6a <HAL_CAN_AddTxMessage+0x2c>
 8002c62:	7ffb      	ldrb	r3, [r7, #31]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f040 80ad 	bne.w	8002dc4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8095 	beq.w	8002db4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	0e1b      	lsrs	r3, r3, #24
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c94:	2201      	movs	r2, #1
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	6809      	ldr	r1, [r1, #0]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3318      	adds	r3, #24
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	440b      	add	r3, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e00f      	b.n	8002ce2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ccc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002cd6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3318      	adds	r3, #24
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	440b      	add	r3, r1
 8002ce0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3318      	adds	r3, #24
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	7d1b      	ldrb	r3, [r3, #20]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d111      	bne.n	8002d22 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3318      	adds	r3, #24
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	6811      	ldr	r1, [r2, #0]
 8002d12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3318      	adds	r3, #24
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3304      	adds	r3, #4
 8002d20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3307      	adds	r3, #7
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	061a      	lsls	r2, r3, #24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3305      	adds	r3, #5
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	3204      	adds	r2, #4
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	4610      	mov	r0, r2
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	ea43 0200 	orr.w	r2, r3, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	440b      	add	r3, r1
 8002d54:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002d58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3303      	adds	r3, #3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	061a      	lsls	r2, r3, #24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3302      	adds	r3, #2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	4313      	orrs	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	ea43 0200 	orr.w	r2, r3, r0
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	440b      	add	r3, r1
 8002d8a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002d8e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3318      	adds	r3, #24
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	4413      	add	r3, r2
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	6811      	ldr	r1, [r2, #0]
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3318      	adds	r3, #24
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	440b      	add	r3, r1
 8002dae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e00e      	b.n	8002dd2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e006      	b.n	8002dd2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d002      	beq.n	8002dfe <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002df8:	7afb      	ldrb	r3, [r7, #11]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d11d      	bne.n	8002e3a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3301      	adds	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d003      	beq.n	8002e6c <HAL_CAN_GetRxMessage+0x24>
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	f040 80f3 	bne.w	8003052 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10e      	bne.n	8002e90 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0e7      	b.n	8003060 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0d8      	b.n	8003060 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	331b      	adds	r3, #27
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	4413      	add	r3, r2
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0204 	and.w	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	331b      	adds	r3, #27
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4413      	add	r3, r2
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0d5b      	lsrs	r3, r3, #21
 8002edc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e00b      	b.n	8002efe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	331b      	adds	r3, #27
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	4413      	add	r3, r2
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	331b      	adds	r3, #27
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	4413      	add	r3, r2
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0202 	and.w	r2, r3, #2
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	331b      	adds	r3, #27
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	331b      	adds	r3, #27
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0a1a      	lsrs	r2, r3, #8
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0c1a      	lsrs	r2, r3, #16
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e1a      	lsrs	r2, r3, #24
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	3303      	adds	r3, #3
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0a1a      	lsrs	r2, r3, #8
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	3305      	adds	r3, #5
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0c1a      	lsrs	r2, r3, #16
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	3306      	adds	r3, #6
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4413      	add	r3, r2
 8003016:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e1a      	lsrs	r2, r3, #24
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	3307      	adds	r3, #7
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d108      	bne.n	800303e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0220 	orr.w	r2, r2, #32
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	e007      	b.n	800304e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0220 	orr.w	r2, r2, #32
 800304c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e006      	b.n	8003060 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
  }
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800307c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d002      	beq.n	800308a <HAL_CAN_ActivateNotification+0x1e>
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d109      	bne.n	800309e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6959      	ldr	r1, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e006      	b.n	80030ac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d07c      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d023      	beq.n	8003150 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2201      	movs	r2, #1
 800310e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f983 	bl	8003426 <HAL_CAN_TxMailbox0CompleteCallback>
 8003120:	e016      	b.n	8003150 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e00c      	b.n	8003150 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	e002      	b.n	8003150 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f989 	bl	8003462 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d024      	beq.n	80031a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003162:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f963 	bl	800343a <HAL_CAN_TxMailbox1CompleteCallback>
 8003174:	e016      	b.n	80031a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	e00c      	b.n	80031a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	e002      	b.n	80031a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f969 	bl	8003476 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d024      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f943 	bl	800344e <HAL_CAN_TxMailbox2CompleteCallback>
 80031c8:	e016      	b.n	80031f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	e00c      	b.n	80031f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
 80031f0:	e002      	b.n	80031f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f949 	bl	800348a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003212:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2210      	movs	r2, #16
 800321a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2208      	movs	r2, #8
 8003236:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f930 	bl	800349e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fdbc 	bl	8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003276:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2210      	movs	r2, #16
 800327e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2208      	movs	r2, #8
 800329a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f912 	bl	80034c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8f9 	bl	80034b2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d006      	beq.n	80032e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2210      	movs	r2, #16
 80032da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8fc 	bl	80034da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2208      	movs	r2, #8
 80032fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8f5 	bl	80034ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d07b      	beq.n	8003406 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d072      	beq.n	80033fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003372:	2b00      	cmp	r3, #0
 8003374:	d043      	beq.n	80033fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800337c:	2b00      	cmp	r3, #0
 800337e:	d03e      	beq.n	80033fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003386:	2b60      	cmp	r3, #96	; 0x60
 8003388:	d02b      	beq.n	80033e2 <HAL_CAN_IRQHandler+0x32a>
 800338a:	2b60      	cmp	r3, #96	; 0x60
 800338c:	d82e      	bhi.n	80033ec <HAL_CAN_IRQHandler+0x334>
 800338e:	2b50      	cmp	r3, #80	; 0x50
 8003390:	d022      	beq.n	80033d8 <HAL_CAN_IRQHandler+0x320>
 8003392:	2b50      	cmp	r3, #80	; 0x50
 8003394:	d82a      	bhi.n	80033ec <HAL_CAN_IRQHandler+0x334>
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d019      	beq.n	80033ce <HAL_CAN_IRQHandler+0x316>
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d826      	bhi.n	80033ec <HAL_CAN_IRQHandler+0x334>
 800339e:	2b30      	cmp	r3, #48	; 0x30
 80033a0:	d010      	beq.n	80033c4 <HAL_CAN_IRQHandler+0x30c>
 80033a2:	2b30      	cmp	r3, #48	; 0x30
 80033a4:	d822      	bhi.n	80033ec <HAL_CAN_IRQHandler+0x334>
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d002      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x2f8>
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d005      	beq.n	80033ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033ae:	e01d      	b.n	80033ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f043 0308 	orr.w	r3, r3, #8
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033b8:	e019      	b.n	80033ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	f043 0310 	orr.w	r3, r3, #16
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033c2:	e014      	b.n	80033ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	f043 0320 	orr.w	r3, r3, #32
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033cc:	e00f      	b.n	80033ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033d6:	e00a      	b.n	80033ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033e0:	e005      	b.n	80033ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033ea:	e000      	b.n	80033ee <HAL_CAN_IRQHandler+0x336>
            break;
 80033ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2204      	movs	r2, #4
 8003404:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f872 	bl	8003502 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800341e:	bf00      	nop
 8003420:	3728      	adds	r7, #40	; 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <__NVIC_SetPriorityGrouping+0x44>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003534:	4013      	ands	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800354a:	4a04      	ldr	r2, [pc, #16]	; (800355c <__NVIC_SetPriorityGrouping+0x44>)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	60d3      	str	r3, [r2, #12]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <__NVIC_GetPriorityGrouping+0x18>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	0a1b      	lsrs	r3, r3, #8
 800356a:	f003 0307 	and.w	r3, r3, #7
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	2b00      	cmp	r3, #0
 800358c:	db0b      	blt.n	80035a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	f003 021f 	and.w	r2, r3, #31
 8003594:	4907      	ldr	r1, [pc, #28]	; (80035b4 <__NVIC_EnableIRQ+0x38>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2001      	movs	r0, #1
 800359e:	fa00 f202 	lsl.w	r2, r0, r2
 80035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000e100 	.word	0xe000e100

080035b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	6039      	str	r1, [r7, #0]
 80035c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	db0a      	blt.n	80035e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	490c      	ldr	r1, [pc, #48]	; (8003604 <__NVIC_SetPriority+0x4c>)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	0112      	lsls	r2, r2, #4
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	440b      	add	r3, r1
 80035dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035e0:	e00a      	b.n	80035f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	4908      	ldr	r1, [pc, #32]	; (8003608 <__NVIC_SetPriority+0x50>)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	3b04      	subs	r3, #4
 80035f0:	0112      	lsls	r2, r2, #4
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	440b      	add	r3, r1
 80035f6:	761a      	strb	r2, [r3, #24]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000e100 	.word	0xe000e100
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f1c3 0307 	rsb	r3, r3, #7
 8003626:	2b04      	cmp	r3, #4
 8003628:	bf28      	it	cs
 800362a:	2304      	movcs	r3, #4
 800362c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3304      	adds	r3, #4
 8003632:	2b06      	cmp	r3, #6
 8003634:	d902      	bls.n	800363c <NVIC_EncodePriority+0x30>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3b03      	subs	r3, #3
 800363a:	e000      	b.n	800363e <NVIC_EncodePriority+0x32>
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	f04f 32ff 	mov.w	r2, #4294967295
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43da      	mvns	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	401a      	ands	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003654:	f04f 31ff 	mov.w	r1, #4294967295
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	43d9      	mvns	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003664:	4313      	orrs	r3, r2
         );
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003684:	d301      	bcc.n	800368a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003686:	2301      	movs	r3, #1
 8003688:	e00f      	b.n	80036aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <SysTick_Config+0x40>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003692:	210f      	movs	r1, #15
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	f7ff ff8e 	bl	80035b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <SysTick_Config+0x40>)
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <SysTick_Config+0x40>)
 80036a4:	2207      	movs	r2, #7
 80036a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	e000e010 	.word	0xe000e010

080036b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff29 	bl	8003518 <__NVIC_SetPriorityGrouping>
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	4603      	mov	r3, r0
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036e0:	f7ff ff3e 	bl	8003560 <__NVIC_GetPriorityGrouping>
 80036e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f7ff ff8e 	bl	800360c <NVIC_EncodePriority>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff5d 	bl	80035b8 <__NVIC_SetPriority>
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff31 	bl	800357c <__NVIC_EnableIRQ>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ffa2 	bl	8003674 <SysTick_Config>
 8003730:	4603      	mov	r3, r0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374a:	e154      	b.n	80039f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8146 	beq.w	80039f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d005      	beq.n	800377c <HAL_GPIO_Init+0x40>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d130      	bne.n	80037de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037b2:	2201      	movs	r2, #1
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0201 	and.w	r2, r3, #1
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d017      	beq.n	800381a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d123      	bne.n	800386e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	08da      	lsrs	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3208      	adds	r2, #8
 8003868:	6939      	ldr	r1, [r7, #16]
 800386a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	2203      	movs	r2, #3
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0203 	and.w	r2, r3, #3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80a0 	beq.w	80039f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b0:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <HAL_GPIO_Init+0x2d8>)
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <HAL_GPIO_Init+0x2d8>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6613      	str	r3, [r2, #96]	; 0x60
 80038bc:	4b55      	ldr	r3, [pc, #340]	; (8003a14 <HAL_GPIO_Init+0x2d8>)
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038c8:	4a53      	ldr	r2, [pc, #332]	; (8003a18 <HAL_GPIO_Init+0x2dc>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3302      	adds	r3, #2
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038f2:	d019      	beq.n	8003928 <HAL_GPIO_Init+0x1ec>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a49      	ldr	r2, [pc, #292]	; (8003a1c <HAL_GPIO_Init+0x2e0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_GPIO_Init+0x1e8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_GPIO_Init+0x2e4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00d      	beq.n	8003920 <HAL_GPIO_Init+0x1e4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a47      	ldr	r2, [pc, #284]	; (8003a24 <HAL_GPIO_Init+0x2e8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <HAL_GPIO_Init+0x1e0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a46      	ldr	r2, [pc, #280]	; (8003a28 <HAL_GPIO_Init+0x2ec>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_GPIO_Init+0x1dc>
 8003914:	2304      	movs	r3, #4
 8003916:	e008      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003918:	2307      	movs	r3, #7
 800391a:	e006      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 800391c:	2303      	movs	r3, #3
 800391e:	e004      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003920:	2302      	movs	r3, #2
 8003922:	e002      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003928:	2300      	movs	r3, #0
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800393a:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_GPIO_Init+0x2dc>)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003948:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800396c:	4a2f      	ldr	r2, [pc, #188]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003972:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003996:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039c0:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3301      	adds	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f aea3 	bne.w	800374c <HAL_GPIO_Init+0x10>
  }
}
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	48000400 	.word	0x48000400
 8003a20:	48000800 	.word	0x48000800
 8003a24:	48000c00 	.word	0x48000c00
 8003a28:	48001000 	.word	0x48001000
 8003a2c:	40010400 	.word	0x40010400

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43d9      	mvns	r1, r3
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	400b      	ands	r3, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e081      	b.n	8003baa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fc ff80 	bl	80009c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ae4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	e006      	b.n	8003b1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d104      	bne.n	8003b2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	817b      	strh	r3, [r7, #10]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	f040 80da 	bne.w	8003d8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_I2C_Master_Transmit+0x30>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0d3      	b.n	8003d8c <HAL_I2C_Master_Transmit+0x1d8>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd fb1e 	bl	800122c <HAL_GetTick>
 8003bf0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2319      	movs	r3, #25
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f8f0 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0be      	b.n	8003d8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2221      	movs	r2, #33	; 0x21
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	893a      	ldrh	r2, [r7, #8]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2bff      	cmp	r3, #255	; 0xff
 8003c3e:	d90e      	bls.n	8003c5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	22ff      	movs	r2, #255	; 0xff
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	8979      	ldrh	r1, [r7, #10]
 8003c4e:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa6c 	bl	8004134 <I2C_TransferConfig>
 8003c5c:	e06c      	b.n	8003d38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fa5b 	bl	8004134 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c7e:	e05b      	b.n	8003d38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	6a39      	ldr	r1, [r7, #32]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f8ed 	bl	8003e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e07b      	b.n	8003d8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d034      	beq.n	8003d38 <HAL_I2C_Master_Transmit+0x184>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d130      	bne.n	8003d38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f87f 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e04d      	b.n	8003d8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2bff      	cmp	r3, #255	; 0xff
 8003cf8:	d90e      	bls.n	8003d18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fa0f 	bl	8004134 <I2C_TransferConfig>
 8003d16:	e00f      	b.n	8003d38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	8979      	ldrh	r1, [r7, #10]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f9fe 	bl	8004134 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d19e      	bne.n	8003c80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f8cc 	bl	8003ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e01a      	b.n	8003d8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	80002000 	.word	0x80002000
 8003d98:	fe00e800 	.word	0xfe00e800

08003d9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d103      	bne.n	8003dba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d007      	beq.n	8003dd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	619a      	str	r2, [r3, #24]
  }
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df4:	e022      	b.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d01e      	beq.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fd fa15 	bl	800122c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d113      	bne.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e00f      	b.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d0cd      	beq.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e70:	e02c      	b.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f870 	bl	8003f5c <I2C_IsErrorOccurred>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e02a      	b.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d01e      	beq.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fd f9cd 	bl	800122c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d113      	bne.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d1cb      	bne.n	8003e72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef0:	e028      	b.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f830 	bl	8003f5c <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e026      	b.n	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fd f991 	bl	800122c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d113      	bne.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e007      	b.n	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d1cf      	bne.n	8003ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d075      	beq.n	8004074 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f90:	e056      	b.n	8004040 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d052      	beq.n	8004040 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f9a:	f7fd f947 	bl	800122c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <I2C_IsErrorOccurred+0x54>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d147      	bne.n	8004040 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d12e      	bne.n	8004032 <I2C_IsErrorOccurred+0xd6>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fda:	d02a      	beq.n	8004032 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d027      	beq.n	8004032 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ff2:	f7fd f91b 	bl	800122c <HAL_GetTick>
 8003ff6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff8:	e01b      	b.n	8004032 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ffa:	f7fd f917 	bl	800122c <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b19      	cmp	r3, #25
 8004006:	d914      	bls.n	8004032 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b20      	cmp	r3, #32
 800403e:	d1dc      	bne.n	8003ffa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d003      	beq.n	8004056 <I2C_IsErrorOccurred+0xfa>
 800404e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004052:	2b00      	cmp	r3, #0
 8004054:	d09d      	beq.n	8003f92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2220      	movs	r2, #32
 8004064:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004096:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f043 0308 	orr.w	r3, r3, #8
 80040ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01c      	beq.n	8004124 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fe56 	bl	8003d9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <I2C_IsErrorOccurred+0x1d4>)
 80040fc:	400b      	ands	r3, r1
 80040fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	fe00e800 	.word	0xfe00e800

08004134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	817b      	strh	r3, [r7, #10]
 8004142:	4613      	mov	r3, r2
 8004144:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800414c:	7a7b      	ldrb	r3, [r7, #9]
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004154:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	4313      	orrs	r3, r2
 800415e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004162:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	0d5b      	lsrs	r3, r3, #21
 800416e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <I2C_TransferConfig+0x60>)
 8004174:	430b      	orrs	r3, r1
 8004176:	43db      	mvns	r3, r3
 8004178:	ea02 0103 	and.w	r1, r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	03ff63ff 	.word	0x03ff63ff

08004198 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d138      	bne.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e032      	b.n	8004222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b20      	cmp	r3, #32
 8004242:	d139      	bne.n	80042b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800424e:	2302      	movs	r3, #2
 8004250:	e033      	b.n	80042ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2224      	movs	r2, #36	; 0x24
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004280:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40007000 	.word	0x40007000

080042e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f2:	d130      	bne.n	8004356 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d038      	beq.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004310:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2232      	movs	r2, #50	; 0x32
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	0c9b      	lsrs	r3, r3, #18
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004328:	e002      	b.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3b01      	subs	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004330:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d102      	bne.n	8004344 <HAL_PWREx_ControlVoltageScaling+0x60>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f2      	bne.n	800432a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004350:	d110      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e00f      	b.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004362:	d007      	beq.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800436c:	4a05      	ldr	r2, [pc, #20]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004372:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40007000 	.word	0x40007000
 8004388:	20000000 	.word	0x20000000
 800438c:	431bde83 	.word	0x431bde83

08004390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f000 bc02 	b.w	8004ba8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a4:	4b96      	ldr	r3, [pc, #600]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ae:	4b94      	ldr	r3, [pc, #592]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80e4 	beq.w	800458e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <HAL_RCC_OscConfig+0x4c>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	f040 808b 	bne.w	80044ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	f040 8087 	bne.w	80044ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043dc:	4b88      	ldr	r3, [pc, #544]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_OscConfig+0x64>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e3d9      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1a      	ldr	r2, [r3, #32]
 80043f8:	4b81      	ldr	r3, [pc, #516]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_RCC_OscConfig+0x7e>
 8004404:	4b7e      	ldr	r3, [pc, #504]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440c:	e005      	b.n	800441a <HAL_RCC_OscConfig+0x8a>
 800440e:	4b7c      	ldr	r3, [pc, #496]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441a:	4293      	cmp	r3, r2
 800441c:	d223      	bcs.n	8004466 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fd54 	bl	8004ed0 <RCC_SetFlashLatencyFromMSIRange>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e3ba      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004432:	4b73      	ldr	r3, [pc, #460]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a72      	ldr	r2, [pc, #456]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004438:	f043 0308 	orr.w	r3, r3, #8
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	496d      	ldr	r1, [pc, #436]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800444c:	4313      	orrs	r3, r2
 800444e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004450:	4b6b      	ldr	r3, [pc, #428]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	4968      	ldr	r1, [pc, #416]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
 8004464:	e025      	b.n	80044b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004466:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800446c:	f043 0308 	orr.w	r3, r3, #8
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4960      	ldr	r1, [pc, #384]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004480:	4313      	orrs	r3, r2
 8004482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004484:	4b5e      	ldr	r3, [pc, #376]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	495b      	ldr	r1, [pc, #364]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fd14 	bl	8004ed0 <RCC_SetFlashLatencyFromMSIRange>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e37a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b2:	f000 fc81 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 80044b6:	4602      	mov	r2, r0
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	4950      	ldr	r1, [pc, #320]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80044c4:	5ccb      	ldrb	r3, [r1, r3]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	fa22 f303 	lsr.w	r3, r2, r3
 80044ce:	4a4e      	ldr	r2, [pc, #312]	; (8004608 <HAL_RCC_OscConfig+0x278>)
 80044d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044d2:	4b4e      	ldr	r3, [pc, #312]	; (800460c <HAL_RCC_OscConfig+0x27c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fe58 	bl	800118c <HAL_InitTick>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d052      	beq.n	800458c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	e35e      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d032      	beq.n	8004558 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044f2:	4b43      	ldr	r3, [pc, #268]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a42      	ldr	r2, [pc, #264]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044fe:	f7fc fe95 	bl	800122c <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004506:	f7fc fe91 	bl	800122c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e347      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004518:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004524:	4b36      	ldr	r3, [pc, #216]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a35      	ldr	r2, [pc, #212]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800452a:	f043 0308 	orr.w	r3, r3, #8
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	4930      	ldr	r1, [pc, #192]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004542:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	492b      	ldr	r1, [pc, #172]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
 8004556:	e01a      	b.n	800458e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a28      	ldr	r2, [pc, #160]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004564:	f7fc fe62 	bl	800122c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800456c:	f7fc fe5e 	bl	800122c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e314      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x1dc>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800458c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d073      	beq.n	8004682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x21c>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d10e      	bne.n	80045c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d063      	beq.n	8004680 <HAL_RCC_OscConfig+0x2f0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d15f      	bne.n	8004680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e2f1      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d106      	bne.n	80045dc <HAL_RCC_OscConfig+0x24c>
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e025      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e4:	d114      	bne.n	8004610 <HAL_RCC_OscConfig+0x280>
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a05      	ldr	r2, [pc, #20]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	4b03      	ldr	r3, [pc, #12]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a02      	ldr	r2, [pc, #8]	; (8004600 <HAL_RCC_OscConfig+0x270>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e013      	b.n	8004628 <HAL_RCC_OscConfig+0x298>
 8004600:	40021000 	.word	0x40021000
 8004604:	080071b8 	.word	0x080071b8
 8004608:	20000000 	.word	0x20000000
 800460c:	20000004 	.word	0x20000004
 8004610:	4ba0      	ldr	r3, [pc, #640]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a9f      	ldr	r2, [pc, #636]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b9d      	ldr	r3, [pc, #628]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a9c      	ldr	r2, [pc, #624]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d013      	beq.n	8004658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fc fdfc 	bl	800122c <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7fc fdf8 	bl	800122c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e2ae      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800464a:	4b92      	ldr	r3, [pc, #584]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x2a8>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fc fde8 	bl	800122c <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004660:	f7fc fde4 	bl	800122c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e29a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004672:	4b88      	ldr	r3, [pc, #544]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x2d0>
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d060      	beq.n	8004750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b04      	cmp	r3, #4
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_OscConfig+0x310>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d119      	bne.n	80046ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d116      	bne.n	80046ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a0:	4b7c      	ldr	r3, [pc, #496]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_OscConfig+0x328>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e277      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b76      	ldr	r3, [pc, #472]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	4973      	ldr	r1, [pc, #460]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046cc:	e040      	b.n	8004750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d023      	beq.n	800471e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d6:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6e      	ldr	r2, [pc, #440]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fc fda3 	bl	800122c <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ea:	f7fc fd9f 	bl	800122c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e255      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046fc:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004708:	4b62      	ldr	r3, [pc, #392]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	495f      	ldr	r1, [pc, #380]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
 800471c:	e018      	b.n	8004750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471e:	4b5d      	ldr	r3, [pc, #372]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a5c      	ldr	r2, [pc, #368]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fc fd7f 	bl	800122c <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004732:	f7fc fd7b 	bl	800122c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e231      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004744:	4b53      	ldr	r3, [pc, #332]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d03c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01c      	beq.n	800479e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004764:	4b4b      	ldr	r3, [pc, #300]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476a:	4a4a      	ldr	r2, [pc, #296]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fc fd5a 	bl	800122c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477c:	f7fc fd56 	bl	800122c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e20c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800478e:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ef      	beq.n	800477c <HAL_RCC_OscConfig+0x3ec>
 800479c:	e01b      	b.n	80047d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479e:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80047a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a4:	4a3b      	ldr	r2, [pc, #236]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fc fd3d 	bl	800122c <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b6:	f7fc fd39 	bl	800122c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e1ef      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c8:	4b32      	ldr	r3, [pc, #200]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80047ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ef      	bne.n	80047b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80a6 	beq.w	8004930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e4:	2300      	movs	r3, #0
 80047e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047e8:	4b2a      	ldr	r3, [pc, #168]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10d      	bne.n	8004810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	4a26      	ldr	r2, [pc, #152]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 80047fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004800:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480c:	2301      	movs	r3, #1
 800480e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004810:	4b21      	ldr	r3, [pc, #132]	; (8004898 <HAL_RCC_OscConfig+0x508>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d118      	bne.n	800484e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800481c:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_OscConfig+0x508>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_RCC_OscConfig+0x508>)
 8004822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004828:	f7fc fd00 	bl	800122c <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004830:	f7fc fcfc 	bl	800122c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e1b2      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x508>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d108      	bne.n	8004868 <HAL_RCC_OscConfig+0x4d8>
 8004856:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485c:	4a0d      	ldr	r2, [pc, #52]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004866:	e029      	b.n	80048bc <HAL_RCC_OscConfig+0x52c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b05      	cmp	r3, #5
 800486e:	d115      	bne.n	800489c <HAL_RCC_OscConfig+0x50c>
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	4a07      	ldr	r2, [pc, #28]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004878:	f043 0304 	orr.w	r3, r3, #4
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	4a03      	ldr	r2, [pc, #12]	; (8004894 <HAL_RCC_OscConfig+0x504>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004890:	e014      	b.n	80048bc <HAL_RCC_OscConfig+0x52c>
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	40007000 	.word	0x40007000
 800489c:	4b9a      	ldr	r3, [pc, #616]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	4a99      	ldr	r2, [pc, #612]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ac:	4b96      	ldr	r3, [pc, #600]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	4a95      	ldr	r2, [pc, #596]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 80048b4:	f023 0304 	bic.w	r3, r3, #4
 80048b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d016      	beq.n	80048f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fc fcb2 	bl	800122c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fc fcae 	bl	800122c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e162      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e2:	4b89      	ldr	r3, [pc, #548]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ed      	beq.n	80048cc <HAL_RCC_OscConfig+0x53c>
 80048f0:	e015      	b.n	800491e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fc fc9b 	bl	800122c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fc fc97 	bl	800122c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e14b      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004910:	4b7d      	ldr	r3, [pc, #500]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ed      	bne.n	80048fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491e:	7ffb      	ldrb	r3, [r7, #31]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004924:	4b78      	ldr	r3, [pc, #480]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	4a77      	ldr	r2, [pc, #476]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 800492a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d03c      	beq.n	80049b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01c      	beq.n	800497e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004944:	4b70      	ldr	r3, [pc, #448]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494a:	4a6f      	ldr	r2, [pc, #444]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fc fc6a 	bl	800122c <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800495c:	f7fc fc66 	bl	800122c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e11c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800496e:	4b66      	ldr	r3, [pc, #408]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ef      	beq.n	800495c <HAL_RCC_OscConfig+0x5cc>
 800497c:	e01b      	b.n	80049b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800497e:	4b62      	ldr	r3, [pc, #392]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004984:	4a60      	ldr	r2, [pc, #384]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fc fc4d 	bl	800122c <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004996:	f7fc fc49 	bl	800122c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e0ff      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049a8:	4b57      	ldr	r3, [pc, #348]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 80049aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1ef      	bne.n	8004996 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80f3 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	f040 80c9 	bne.w	8004b5c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ca:	4b4f      	ldr	r3, [pc, #316]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f003 0203 	and.w	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	429a      	cmp	r2, r3
 80049dc:	d12c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	3b01      	subs	r3, #1
 80049ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d123      	bne.n	8004a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d11b      	bne.n	8004a38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d113      	bne.n	8004a38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d109      	bne.n	8004a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	3b01      	subs	r3, #1
 8004a32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d06b      	beq.n	8004b10 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b0c      	cmp	r3, #12
 8004a3c:	d062      	beq.n	8004b04 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a3e:	4b32      	ldr	r3, [pc, #200]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0ac      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b2e      	ldr	r3, [pc, #184]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2d      	ldr	r2, [pc, #180]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a5a:	f7fc fbe7 	bl	800122c <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fc fbe3 	bl	800122c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e099      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a74:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a80:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <HAL_RCC_OscConfig+0x77c>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a90:	3a01      	subs	r2, #1
 8004a92:	0112      	lsls	r2, r2, #4
 8004a94:	4311      	orrs	r1, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a9a:	0212      	lsls	r2, r2, #8
 8004a9c:	4311      	orrs	r1, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004aa2:	0852      	lsrs	r2, r2, #1
 8004aa4:	3a01      	subs	r2, #1
 8004aa6:	0552      	lsls	r2, r2, #21
 8004aa8:	4311      	orrs	r1, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aae:	0852      	lsrs	r2, r2, #1
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0652      	lsls	r2, r2, #25
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aba:	06d2      	lsls	r2, r2, #27
 8004abc:	430a      	orrs	r2, r1
 8004abe:	4912      	ldr	r1, [pc, #72]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ac4:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a0f      	ldr	r2, [pc, #60]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a0c      	ldr	r2, [pc, #48]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004adc:	f7fc fba6 	bl	800122c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fc fba2 	bl	800122c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e058      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <HAL_RCC_OscConfig+0x778>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b02:	e050      	b.n	8004ba6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e04f      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d144      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b28:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b34:	f7fc fb7a 	bl	800122c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7fc fb76 	bl	800122c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e02c      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4e:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x7ac>
 8004b5a:	e024      	b.n	8004ba6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d01f      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fc fb5d 	bl	800122c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fc fb59 	bl	800122c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e00f      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	4905      	ldr	r1, [pc, #20]	; (8004bb0 <HAL_RCC_OscConfig+0x820>)
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_RCC_OscConfig+0x824>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60cb      	str	r3, [r1, #12]
 8004ba0:	e001      	b.n	8004ba6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3720      	adds	r7, #32
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	feeefffc 	.word	0xfeeefffc

08004bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0e7      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b75      	ldr	r3, [pc, #468]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d910      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b72      	ldr	r3, [pc, #456]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 0207 	bic.w	r2, r3, #7
 8004be2:	4970      	ldr	r1, [pc, #448]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b6e      	ldr	r3, [pc, #440]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0cf      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b66      	ldr	r3, [pc, #408]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d908      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b63      	ldr	r3, [pc, #396]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4960      	ldr	r1, [pc, #384]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d04c      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3e:	4b5a      	ldr	r3, [pc, #360]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d121      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0a6      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d107      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c56:	4b54      	ldr	r3, [pc, #336]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d115      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e09a      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6e:	4b4e      	ldr	r3, [pc, #312]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e08e      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c7e:	4b4a      	ldr	r3, [pc, #296]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e086      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b46      	ldr	r3, [pc, #280]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4943      	ldr	r1, [pc, #268]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca0:	f7fc fac4 	bl	800122c <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fc fac0 	bl	800122c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e06e      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b3a      	ldr	r3, [pc, #232]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d1eb      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d208      	bcs.n	8004cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cec:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	492b      	ldr	r1, [pc, #172]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfe:	4b29      	ldr	r3, [pc, #164]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d210      	bcs.n	8004d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0c:	4b25      	ldr	r3, [pc, #148]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 0207 	bic.w	r2, r3, #7
 8004d14:	4923      	ldr	r1, [pc, #140]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e036      	b.n	8004d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	4918      	ldr	r1, [pc, #96]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4910      	ldr	r1, [pc, #64]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d6c:	f000 f824 	bl	8004db8 <HAL_RCC_GetSysClockFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	490b      	ldr	r1, [pc, #44]	; (8004dac <HAL_RCC_ClockConfig+0x1f4>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <HAL_RCC_ClockConfig+0x1fc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fc f9fb 	bl	800118c <HAL_InitTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40022000 	.word	0x40022000
 8004da8:	40021000 	.word	0x40021000
 8004dac:	080071b8 	.word	0x080071b8
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000004 	.word	0x20000004

08004db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	; 0x24
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd0:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0x34>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d121      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11e      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dec:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004df8:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	e005      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e14:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10d      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e004      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d134      	bne.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e46:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0xac>
 8004e5c:	e005      	b.n	8004e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e60:	617b      	str	r3, [r7, #20]
      break;
 8004e62:	e005      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e66:	617b      	str	r3, [r7, #20]
      break;
 8004e68:	e002      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	617b      	str	r3, [r7, #20]
      break;
 8004e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	fb03 f202 	mul.w	r2, r3, r2
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	0e5b      	lsrs	r3, r3, #25
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004eb0:	69bb      	ldr	r3, [r7, #24]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3724      	adds	r7, #36	; 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	080071c8 	.word	0x080071c8
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	007a1200 	.word	0x007a1200

08004ed0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ee8:	f7ff f9ee 	bl	80042c8 <HAL_PWREx_GetVoltageRange>
 8004eec:	6178      	str	r0, [r7, #20]
 8004eee:	e014      	b.n	8004f1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	4a24      	ldr	r2, [pc, #144]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efa:	6593      	str	r3, [r2, #88]	; 0x58
 8004efc:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f08:	f7ff f9de 	bl	80042c8 <HAL_PWREx_GetVoltageRange>
 8004f0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f20:	d10b      	bne.n	8004f3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b80      	cmp	r3, #128	; 0x80
 8004f26:	d919      	bls.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2ba0      	cmp	r3, #160	; 0xa0
 8004f2c:	d902      	bls.n	8004f34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f2e:	2302      	movs	r3, #2
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e013      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f34:	2301      	movs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e010      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d902      	bls.n	8004f46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f40:	2303      	movs	r3, #3
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	e00a      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b80      	cmp	r3, #128	; 0x80
 8004f4a:	d102      	bne.n	8004f52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	e004      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b70      	cmp	r3, #112	; 0x70
 8004f56:	d101      	bne.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f58:	2301      	movs	r3, #1
 8004f5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 0207 	bic.w	r2, r3, #7
 8004f64:	4909      	ldr	r1, [pc, #36]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d001      	beq.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40022000 	.word	0x40022000

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f98:	2300      	movs	r3, #0
 8004f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d031      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fb4:	d01a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fba:	d814      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004fc6:	4b5d      	ldr	r3, [pc, #372]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	4a5c      	ldr	r2, [pc, #368]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd2:	e00c      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fa44 	bl	8005468 <RCCEx_PLLSAI1_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	74fb      	strb	r3, [r7, #19]
      break;
 8004fea:	e000      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fee:	7cfb      	ldrb	r3, [r7, #19]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff4:	4b51      	ldr	r3, [pc, #324]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	494e      	ldr	r1, [pc, #312]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800500a:	e001      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500c:	7cfb      	ldrb	r3, [r7, #19]
 800500e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 809e 	beq.w	800515a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005022:	4b46      	ldr	r3, [pc, #280]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00d      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	4a3f      	ldr	r2, [pc, #252]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005042:	6593      	str	r3, [r2, #88]	; 0x58
 8005044:	4b3d      	ldr	r3, [pc, #244]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005050:	2301      	movs	r3, #1
 8005052:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005054:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a39      	ldr	r2, [pc, #228]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800505a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005060:	f7fc f8e4 	bl	800122c <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005066:	e009      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005068:	f7fc f8e0 	bl	800122c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d902      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	74fb      	strb	r3, [r7, #19]
        break;
 800507a:	e005      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800507c:	4b30      	ldr	r3, [pc, #192]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ef      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d15a      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800508e:	4b2b      	ldr	r3, [pc, #172]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005098:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01e      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d019      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050b6:	4b21      	ldr	r3, [pc, #132]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050d6:	4a19      	ldr	r2, [pc, #100]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d016      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fc f8a0 	bl	800122c <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ee:	e00b      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fc f89c 	bl	800122c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d902      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	74fb      	strb	r3, [r7, #19]
            break;
 8005106:	e006      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800510a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ec      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005116:	7cfb      	ldrb	r3, [r7, #19]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512a:	4904      	ldr	r1, [pc, #16]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005132:	e009      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	74bb      	strb	r3, [r7, #18]
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
 8005140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005148:	7c7b      	ldrb	r3, [r7, #17]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800514e:	4b9e      	ldr	r3, [pc, #632]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	4a9d      	ldr	r2, [pc, #628]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005158:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005166:	4b98      	ldr	r3, [pc, #608]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f023 0203 	bic.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	4994      	ldr	r1, [pc, #592]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005188:	4b8f      	ldr	r3, [pc, #572]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f023 020c 	bic.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	498c      	ldr	r1, [pc, #560]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051aa:	4b87      	ldr	r3, [pc, #540]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	4983      	ldr	r1, [pc, #524]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051cc:	4b7e      	ldr	r3, [pc, #504]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	497b      	ldr	r1, [pc, #492]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051ee:	4b76      	ldr	r3, [pc, #472]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	4972      	ldr	r1, [pc, #456]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005210:	4b6d      	ldr	r3, [pc, #436]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	496a      	ldr	r1, [pc, #424]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005232:	4b65      	ldr	r3, [pc, #404]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005240:	4961      	ldr	r1, [pc, #388]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005254:	4b5c      	ldr	r3, [pc, #368]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	4959      	ldr	r1, [pc, #356]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005276:	4b54      	ldr	r3, [pc, #336]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	4950      	ldr	r1, [pc, #320]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005298:	4b4b      	ldr	r3, [pc, #300]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	4948      	ldr	r1, [pc, #288]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052ba:	4b43      	ldr	r3, [pc, #268]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052c0:	f023 0203 	bic.w	r2, r3, #3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	493f      	ldr	r1, [pc, #252]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d028      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052dc:	4b3a      	ldr	r3, [pc, #232]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	4937      	ldr	r1, [pc, #220]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fa:	d106      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fc:	4b32      	ldr	r3, [pc, #200]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a31      	ldr	r2, [pc, #196]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005306:	60d3      	str	r3, [r2, #12]
 8005308:	e011      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005312:	d10c      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	2101      	movs	r1, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f8a4 	bl	8005468 <RCCEx_PLLSAI1_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d028      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800533a:	4b23      	ldr	r3, [pc, #140]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005348:	491f      	ldr	r1, [pc, #124]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005358:	d106      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800535a:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005364:	60d3      	str	r3, [r2, #12]
 8005366:	e011      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005370:	d10c      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f875 	bl	8005468 <RCCEx_PLLSAI1_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	4908      	ldr	r1, [pc, #32]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b6:	d109      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a02      	ldr	r2, [pc, #8]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c2:	60d3      	str	r3, [r2, #12]
 80053c4:	e014      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	2101      	movs	r1, #1
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 f843 	bl	8005468 <RCCEx_PLLSAI1_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01c      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053fc:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	4916      	ldr	r1, [pc, #88]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541a:	d10c      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	2102      	movs	r1, #2
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f820 	bl	8005468 <RCCEx_PLLSAI1_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800542c:	7cfb      	ldrb	r3, [r7, #19]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005432:	7cfb      	ldrb	r3, [r7, #19]
 8005434:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005450:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005458:	7cbb      	ldrb	r3, [r7, #18]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000

08005468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005476:	4b74      	ldr	r3, [pc, #464]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005482:	4b71      	ldr	r3, [pc, #452]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0203 	and.w	r2, r3, #3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d10d      	bne.n	80054ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
       ||
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800549a:	4b6b      	ldr	r3, [pc, #428]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
       ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d047      	beq.n	800553e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e044      	b.n	800553e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d018      	beq.n	80054ee <RCCEx_PLLSAI1_Config+0x86>
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d825      	bhi.n	800550c <RCCEx_PLLSAI1_Config+0xa4>
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d002      	beq.n	80054ca <RCCEx_PLLSAI1_Config+0x62>
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d009      	beq.n	80054dc <RCCEx_PLLSAI1_Config+0x74>
 80054c8:	e020      	b.n	800550c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ca:	4b5f      	ldr	r3, [pc, #380]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11d      	bne.n	8005512 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054da:	e01a      	b.n	8005512 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054dc:	4b5a      	ldr	r3, [pc, #360]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d116      	bne.n	8005516 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ec:	e013      	b.n	8005516 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ee:	4b56      	ldr	r3, [pc, #344]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054fa:	4b53      	ldr	r3, [pc, #332]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800550a:	e006      	b.n	800551a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
      break;
 8005510:	e004      	b.n	800551c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800551a:	bf00      	nop
    }

    if(status == HAL_OK)
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005522:	4b49      	ldr	r3, [pc, #292]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	430b      	orrs	r3, r1
 8005538:	4943      	ldr	r1, [pc, #268]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800553a:	4313      	orrs	r3, r2
 800553c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d17c      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005544:	4b40      	ldr	r3, [pc, #256]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a3f      	ldr	r2, [pc, #252]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800554a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800554e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005550:	f7fb fe6c 	bl	800122c <HAL_GetTick>
 8005554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005556:	e009      	b.n	800556c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005558:	f7fb fe68 	bl	800122c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d902      	bls.n	800556c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	73fb      	strb	r3, [r7, #15]
        break;
 800556a:	e005      	b.n	8005578 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800556c:	4b36      	ldr	r3, [pc, #216]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ef      	bne.n	8005558 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d15f      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d110      	bne.n	80055a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005584:	4b30      	ldr	r3, [pc, #192]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800558c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6892      	ldr	r2, [r2, #8]
 8005594:	0211      	lsls	r1, r2, #8
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	06d2      	lsls	r2, r2, #27
 800559c:	430a      	orrs	r2, r1
 800559e:	492a      	ldr	r1, [pc, #168]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	610b      	str	r3, [r1, #16]
 80055a4:	e027      	b.n	80055f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d112      	bne.n	80055d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ac:	4b26      	ldr	r3, [pc, #152]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	0211      	lsls	r1, r2, #8
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6912      	ldr	r2, [r2, #16]
 80055c2:	0852      	lsrs	r2, r2, #1
 80055c4:	3a01      	subs	r2, #1
 80055c6:	0552      	lsls	r2, r2, #21
 80055c8:	430a      	orrs	r2, r1
 80055ca:	491f      	ldr	r1, [pc, #124]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	610b      	str	r3, [r1, #16]
 80055d0:	e011      	b.n	80055f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d2:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	0211      	lsls	r1, r2, #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6952      	ldr	r2, [r2, #20]
 80055e8:	0852      	lsrs	r2, r2, #1
 80055ea:	3a01      	subs	r2, #1
 80055ec:	0652      	lsls	r2, r2, #25
 80055ee:	430a      	orrs	r2, r1
 80055f0:	4915      	ldr	r1, [pc, #84]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005600:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005602:	f7fb fe13 	bl	800122c <HAL_GetTick>
 8005606:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005608:	e009      	b.n	800561e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800560a:	f7fb fe0f 	bl	800122c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d902      	bls.n	800561e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	73fb      	strb	r3, [r7, #15]
          break;
 800561c:	e005      	b.n	800562a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0ef      	beq.n	800560a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	4903      	ldr	r1, [pc, #12]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800563e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000

0800564c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e095      	b.n	800578a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566e:	d009      	beq.n	8005684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	61da      	str	r2, [r3, #28]
 8005676:	e005      	b.n	8005684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb fbe6 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056c4:	d902      	bls.n	80056cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	e002      	b.n	80056d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056da:	d007      	beq.n	80056ec <HAL_SPI_Init+0xa0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	ea42 0103 	orr.w	r1, r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	0c1b      	lsrs	r3, r3, #16
 8005748:	f003 0204 	and.w	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005768:	ea42 0103 	orr.w	r1, r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b088      	sub	sp, #32
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_SPI_Transmit+0x22>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e158      	b.n	8005a66 <HAL_SPI_Transmit+0x2d4>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057bc:	f7fb fd36 	bl	800122c <HAL_GetTick>
 80057c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d002      	beq.n	80057d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057d6:	e13d      	b.n	8005a54 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_SPI_Transmit+0x52>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057e8:	e134      	b.n	8005a54 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2203      	movs	r2, #3
 80057ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005834:	d10f      	bne.n	8005856 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005844:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005854:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d007      	beq.n	8005874 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005872:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800587c:	d94b      	bls.n	8005916 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_SPI_Transmit+0xfa>
 8005886:	8afb      	ldrh	r3, [r7, #22]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d13e      	bne.n	800590a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058b0:	e02b      	b.n	800590a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d112      	bne.n	80058e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	881a      	ldrh	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	1c9a      	adds	r2, r3, #2
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058e4:	e011      	b.n	800590a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e6:	f7fb fca1 	bl	800122c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d803      	bhi.n	80058fe <HAL_SPI_Transmit+0x16c>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d102      	bne.n	8005904 <HAL_SPI_Transmit+0x172>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005908:	e0a4      	b.n	8005a54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1ce      	bne.n	80058b2 <HAL_SPI_Transmit+0x120>
 8005914:	e07c      	b.n	8005a10 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_SPI_Transmit+0x192>
 800591e:	8afb      	ldrh	r3, [r7, #22]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d170      	bne.n	8005a06 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d912      	bls.n	8005954 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	881a      	ldrh	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b02      	subs	r3, #2
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005952:	e058      	b.n	8005a06 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800597a:	e044      	b.n	8005a06 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d12b      	bne.n	80059e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d912      	bls.n	80059ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	881a      	ldrh	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	1c9a      	adds	r2, r3, #2
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b02      	subs	r3, #2
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b8:	e025      	b.n	8005a06 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059e0:	e011      	b.n	8005a06 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059e2:	f7fb fc23 	bl	800122c <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d803      	bhi.n	80059fa <HAL_SPI_Transmit+0x268>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_Transmit+0x26e>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a04:	e026      	b.n	8005a54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1b5      	bne.n	800597c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fce3 	bl	80063e0 <SPI_EndRxTxTransaction>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e000      	b.n	8005a54 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005a52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b088      	sub	sp, #32
 8005a72:	af02      	add	r7, sp, #8
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8a:	d112      	bne.n	8005ab2 <HAL_SPI_Receive+0x44>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10e      	bne.n	8005ab2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2204      	movs	r2, #4
 8005a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a9c:	88fa      	ldrh	r2, [r7, #6]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f910 	bl	8005cce <HAL_SPI_TransmitReceive>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	e109      	b.n	8005cc6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_SPI_Receive+0x52>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e102      	b.n	8005cc6 <HAL_SPI_Receive+0x258>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ac8:	f7fb fbb0 	bl	800122c <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d002      	beq.n	8005ae0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
 8005adc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ade:	e0e9      	b.n	8005cb4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_SPI_Receive+0x7e>
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005af0:	e0e0      	b.n	8005cb4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2204      	movs	r2, #4
 8005af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b3c:	d908      	bls.n	8005b50 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	e007      	b.n	8005b60 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b68:	d10f      	bne.n	8005b8a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d007      	beq.n	8005ba8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb0:	d867      	bhi.n	8005c82 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bb2:	e030      	b.n	8005c16 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d117      	bne.n	8005bf2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f103 020c 	add.w	r2, r3, #12
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005bf0:	e011      	b.n	8005c16 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf2:	f7fb fb1b 	bl	800122c <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d803      	bhi.n	8005c0a <HAL_SPI_Receive+0x19c>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d102      	bne.n	8005c10 <HAL_SPI_Receive+0x1a2>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c14:	e04e      	b.n	8005cb4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1c8      	bne.n	8005bb4 <HAL_SPI_Receive+0x146>
 8005c22:	e034      	b.n	8005c8e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d115      	bne.n	8005c5e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	b292      	uxth	r2, r2
 8005c3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	1c9a      	adds	r2, r3, #2
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c5c:	e011      	b.n	8005c82 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c5e:	f7fb fae5 	bl	800122c <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d803      	bhi.n	8005c76 <HAL_SPI_Receive+0x208>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d102      	bne.n	8005c7c <HAL_SPI_Receive+0x20e>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c80:	e018      	b.n	8005cb4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1ca      	bne.n	8005c24 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fb4c 	bl	8006330 <SPI_EndRxTransaction>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
 8005cb0:	e000      	b.n	8005cb4 <HAL_SPI_Receive+0x246>
  }

error :
 8005cb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b08a      	sub	sp, #40	; 0x28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
 8005cda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x26>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e1fb      	b.n	80060ec <HAL_SPI_TransmitReceive+0x41e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cfc:	f7fb fa96 	bl	800122c <HAL_GetTick>
 8005d00:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d08:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d10:	887b      	ldrh	r3, [r7, #2]
 8005d12:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005d14:	887b      	ldrh	r3, [r7, #2]
 8005d16:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d18:	7efb      	ldrb	r3, [r7, #27]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d00e      	beq.n	8005d3c <HAL_SPI_TransmitReceive+0x6e>
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d24:	d106      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x66>
 8005d2e:	7efb      	ldrb	r3, [r7, #27]
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d003      	beq.n	8005d3c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d3a:	e1cd      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_SPI_TransmitReceive+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_SPI_TransmitReceive+0x80>
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005d54:	e1c0      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d003      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2205      	movs	r2, #5
 8005d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	887a      	ldrh	r2, [r7, #2]
 8005d7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	887a      	ldrh	r2, [r7, #2]
 8005d82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	887a      	ldrh	r2, [r7, #2]
 8005d90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	887a      	ldrh	r2, [r7, #2]
 8005d96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dac:	d802      	bhi.n	8005db4 <HAL_SPI_TransmitReceive+0xe6>
 8005dae:	8a3b      	ldrh	r3, [r7, #16]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d908      	bls.n	8005dc6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dc2:	605a      	str	r2, [r3, #4]
 8005dc4:	e007      	b.n	8005dd6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dd4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b40      	cmp	r3, #64	; 0x40
 8005de2:	d007      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dfc:	d97c      	bls.n	8005ef8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x13e>
 8005e06:	8a7b      	ldrh	r3, [r7, #18]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d169      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	881a      	ldrh	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	1c9a      	adds	r2, r3, #2
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e30:	e056      	b.n	8005ee0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d11b      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x1aa>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d016      	beq.n	8005e78 <HAL_SPI_TransmitReceive+0x1aa>
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d113      	bne.n	8005e78 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	1c9a      	adds	r2, r3, #2
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d11c      	bne.n	8005ec0 <HAL_SPI_TransmitReceive+0x1f2>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	b292      	uxth	r2, r2
 8005e9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	1c9a      	adds	r2, r3, #2
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ec0:	f7fb f9b4 	bl	800122c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d807      	bhi.n	8005ee0 <HAL_SPI_TransmitReceive+0x212>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d003      	beq.n	8005ee0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ede:	e0fb      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1a3      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x164>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d19d      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x164>
 8005ef6:	e0df      	b.n	80060b8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x23a>
 8005f00:	8a7b      	ldrh	r3, [r7, #18]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 80cb 	bne.w	800609e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d912      	bls.n	8005f38 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	881a      	ldrh	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	1c9a      	adds	r2, r3, #2
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b02      	subs	r3, #2
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f36:	e0b2      	b.n	800609e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f5e:	e09e      	b.n	800609e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d134      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x30a>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02f      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x30a>
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d12c      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d912      	bls.n	8005fae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	881a      	ldrh	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b02      	subs	r3, #2
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fac:	e012      	b.n	8005fd4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d148      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x3aa>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d042      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d923      	bls.n	8006046 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	b292      	uxth	r2, r2
 800600a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b02      	subs	r3, #2
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d81f      	bhi.n	8006074 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	e016      	b.n	8006074 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f103 020c 	add.w	r2, r3, #12
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006078:	f7fb f8d8 	bl	800122c <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006084:	429a      	cmp	r2, r3
 8006086:	d803      	bhi.n	8006090 <HAL_SPI_TransmitReceive+0x3c2>
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d102      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x3c8>
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800609c:	e01c      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f47f af5b 	bne.w	8005f60 <HAL_SPI_TransmitReceive+0x292>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f47f af54 	bne.w	8005f60 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f98f 	bl	80063e0 <SPI_EndRxTxTransaction>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d006      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	661a      	str	r2, [r3, #96]	; 0x60
 80060d4:	e000      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80060d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3728      	adds	r7, #40	; 0x28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006104:	f7fb f892 	bl	800122c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4413      	add	r3, r2
 8006112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006114:	f7fb f88a 	bl	800122c <HAL_GetTick>
 8006118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	015b      	lsls	r3, r3, #5
 8006120:	0d1b      	lsrs	r3, r3, #20
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	fb02 f303 	mul.w	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612a:	e054      	b.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006132:	d050      	beq.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006134:	f7fb f87a 	bl	800122c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	429a      	cmp	r2, r3
 8006142:	d902      	bls.n	800614a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d13d      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006162:	d111      	bne.n	8006188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616c:	d004      	beq.n	8006178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006176:	d107      	bne.n	8006188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006190:	d10f      	bne.n	80061b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e017      	b.n	80061f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4013      	ands	r3, r2
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	bf0c      	ite	eq
 80061e6:	2301      	moveq	r3, #1
 80061e8:	2300      	movne	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d19b      	bne.n	800612c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000000 	.word	0x20000000

08006204 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006216:	f7fb f809 	bl	800122c <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	4413      	add	r3, r2
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006226:	f7fb f801 	bl	800122c <HAL_GetTick>
 800622a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006234:	4b3d      	ldr	r3, [pc, #244]	; (800632c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	00da      	lsls	r2, r3, #3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	0d1b      	lsrs	r3, r3, #20
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800624c:	e060      	b.n	8006310 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006254:	d107      	bne.n	8006266 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006264:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d050      	beq.n	8006310 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800626e:	f7fa ffdd 	bl	800122c <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627a:	429a      	cmp	r2, r3
 800627c:	d902      	bls.n	8006284 <SPI_WaitFifoStateUntilTimeout+0x80>
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d13d      	bne.n	8006300 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006292:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629c:	d111      	bne.n	80062c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a6:	d004      	beq.n	80062b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b0:	d107      	bne.n	80062c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ca:	d10f      	bne.n	80062ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e010      	b.n	8006322 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	3b01      	subs	r3, #1
 800630e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d196      	bne.n	800624e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000000 	.word	0x20000000

08006330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006344:	d111      	bne.n	800636a <SPI_EndRxTransaction+0x3a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634e:	d004      	beq.n	800635a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006358:	d107      	bne.n	800636a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006368:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2200      	movs	r2, #0
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff febd 	bl	80060f4 <SPI_WaitFlagStateUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006384:	f043 0220 	orr.w	r2, r3, #32
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e023      	b.n	80063d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006398:	d11d      	bne.n	80063d6 <SPI_EndRxTransaction+0xa6>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a2:	d004      	beq.n	80063ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ac:	d113      	bne.n	80063d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff ff22 	bl	8006204 <SPI_WaitFifoStateUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e000      	b.n	80063d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff ff03 	bl	8006204 <SPI_WaitFifoStateUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e027      	b.n	8006464 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fe68 	bl	80060f4 <SPI_WaitFlagStateUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e014      	b.n	8006464 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fedc 	bl	8006204 <SPI_WaitFifoStateUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e000      	b.n	8006464 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e049      	b.n	8006512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fa fe14 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f000 faa2 	bl	80069f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d001      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e040      	b.n	80065b6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x58>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d009      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x58>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <HAL_TIM_Base_Start_IT+0xac>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x58>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a17      	ldr	r2, [pc, #92]	; (80065cc <HAL_TIM_Base_Start_IT+0xb0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d115      	bne.n	80065a0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d015      	beq.n	80065b2 <HAL_TIM_Base_Start_IT+0x96>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658c:	d011      	beq.n	80065b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659e:	e008      	b.n	80065b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e000      	b.n	80065b4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	00010007 	.word	0x00010007

080065d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d122      	bne.n	8006630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d11b      	bne.n	8006630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0202 	mvn.w	r2, #2
 8006600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9ce 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 800661c:	e005      	b.n	800662a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9c0 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f9d1 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b04      	cmp	r3, #4
 800663c:	d122      	bne.n	8006684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b04      	cmp	r3, #4
 800664a:	d11b      	bne.n	8006684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0204 	mvn.w	r2, #4
 8006654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9a4 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 8006670:	e005      	b.n	800667e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f996 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9a7 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b08      	cmp	r3, #8
 8006690:	d122      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b08      	cmp	r3, #8
 800669e:	d11b      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0208 	mvn.w	r2, #8
 80066a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2204      	movs	r2, #4
 80066ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f97a 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 80066c4:	e005      	b.n	80066d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f96c 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f97d 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d122      	bne.n	800672c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d11b      	bne.n	800672c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0210 	mvn.w	r2, #16
 80066fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2208      	movs	r2, #8
 8006702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f950 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 8006718:	e005      	b.n	8006726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f942 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f953 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d10e      	bne.n	8006758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b01      	cmp	r3, #1
 8006746:	d107      	bne.n	8006758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0201 	mvn.w	r2, #1
 8006750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fa fb06 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d10e      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d107      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800677c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fab8 	bl	8006cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006792:	d10e      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679e:	2b80      	cmp	r3, #128	; 0x80
 80067a0:	d107      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 faab 	bl	8006d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d10e      	bne.n	80067de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b40      	cmp	r3, #64	; 0x40
 80067cc:	d107      	bne.n	80067de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f901 	bl	80069e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d10e      	bne.n	800680a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d107      	bne.n	800680a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0220 	mvn.w	r2, #32
 8006802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa6b 	bl	8006ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_TIM_ConfigClockSource+0x1c>
 800682a:	2302      	movs	r3, #2
 800682c:	e0b6      	b.n	800699c <HAL_TIM_ConfigClockSource+0x18a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006850:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006858:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686a:	d03e      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0xd8>
 800686c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006870:	f200 8087 	bhi.w	8006982 <HAL_TIM_ConfigClockSource+0x170>
 8006874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006878:	f000 8086 	beq.w	8006988 <HAL_TIM_ConfigClockSource+0x176>
 800687c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006880:	d87f      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
 8006882:	2b70      	cmp	r3, #112	; 0x70
 8006884:	d01a      	beq.n	80068bc <HAL_TIM_ConfigClockSource+0xaa>
 8006886:	2b70      	cmp	r3, #112	; 0x70
 8006888:	d87b      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
 800688a:	2b60      	cmp	r3, #96	; 0x60
 800688c:	d050      	beq.n	8006930 <HAL_TIM_ConfigClockSource+0x11e>
 800688e:	2b60      	cmp	r3, #96	; 0x60
 8006890:	d877      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
 8006892:	2b50      	cmp	r3, #80	; 0x50
 8006894:	d03c      	beq.n	8006910 <HAL_TIM_ConfigClockSource+0xfe>
 8006896:	2b50      	cmp	r3, #80	; 0x50
 8006898:	d873      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d058      	beq.n	8006950 <HAL_TIM_ConfigClockSource+0x13e>
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d86f      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
 80068a2:	2b30      	cmp	r3, #48	; 0x30
 80068a4:	d064      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x15e>
 80068a6:	2b30      	cmp	r3, #48	; 0x30
 80068a8:	d86b      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d060      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x15e>
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d867      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d05c      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x15e>
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d05a      	beq.n	8006970 <HAL_TIM_ConfigClockSource+0x15e>
 80068ba:	e062      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	6899      	ldr	r1, [r3, #8]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f000 f97a 	bl	8006bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	609a      	str	r2, [r3, #8]
      break;
 80068e8:	e04f      	b.n	800698a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6899      	ldr	r1, [r3, #8]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f000 f963 	bl	8006bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800690c:	609a      	str	r2, [r3, #8]
      break;
 800690e:	e03c      	b.n	800698a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6859      	ldr	r1, [r3, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	461a      	mov	r2, r3
 800691e:	f000 f8d7 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2150      	movs	r1, #80	; 0x50
 8006928:	4618      	mov	r0, r3
 800692a:	f000 f930 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 800692e:	e02c      	b.n	800698a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	461a      	mov	r2, r3
 800693e:	f000 f8f6 	bl	8006b2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2160      	movs	r1, #96	; 0x60
 8006948:	4618      	mov	r0, r3
 800694a:	f000 f920 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 800694e:	e01c      	b.n	800698a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6859      	ldr	r1, [r3, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	461a      	mov	r2, r3
 800695e:	f000 f8b7 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2140      	movs	r1, #64	; 0x40
 8006968:	4618      	mov	r0, r3
 800696a:	f000 f910 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 800696e:	e00c      	b.n	800698a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f000 f907 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 8006980:	e003      	b.n	800698a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	73fb      	strb	r3, [r7, #15]
      break;
 8006986:	e000      	b.n	800698a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006988:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a2e      	ldr	r2, [pc, #184]	; (8006ac0 <TIM_Base_SetConfig+0xcc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_Base_SetConfig+0x28>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d003      	beq.n	8006a1c <TIM_Base_SetConfig+0x28>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a2b      	ldr	r2, [pc, #172]	; (8006ac4 <TIM_Base_SetConfig+0xd0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a23      	ldr	r2, [pc, #140]	; (8006ac0 <TIM_Base_SetConfig+0xcc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00f      	beq.n	8006a56 <TIM_Base_SetConfig+0x62>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d00b      	beq.n	8006a56 <TIM_Base_SetConfig+0x62>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a20      	ldr	r2, [pc, #128]	; (8006ac4 <TIM_Base_SetConfig+0xd0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <TIM_Base_SetConfig+0x62>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1f      	ldr	r2, [pc, #124]	; (8006ac8 <TIM_Base_SetConfig+0xd4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_Base_SetConfig+0x62>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a1e      	ldr	r2, [pc, #120]	; (8006acc <TIM_Base_SetConfig+0xd8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d108      	bne.n	8006a68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <TIM_Base_SetConfig+0xcc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d007      	beq.n	8006aa4 <TIM_Base_SetConfig+0xb0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a0c      	ldr	r2, [pc, #48]	; (8006ac8 <TIM_Base_SetConfig+0xd4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_Base_SetConfig+0xb0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a0b      	ldr	r2, [pc, #44]	; (8006acc <TIM_Base_SetConfig+0xd8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d103      	bne.n	8006aac <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	615a      	str	r2, [r3, #20]
}
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400

08006ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f023 030a 	bic.w	r3, r3, #10
 8006b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b087      	sub	sp, #28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0210 	bic.w	r2, r3, #16
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f043 0307 	orr.w	r3, r3, #7
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	609a      	str	r2, [r3, #8]
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	021a      	lsls	r2, r3, #8
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	609a      	str	r2, [r3, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e054      	b.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d108      	bne.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00e      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c84:	d009      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a11      	ldr	r2, [pc, #68]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d10c      	bne.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40000400 	.word	0x40000400
 8006cdc:	40014000 	.word	0x40014000

08006ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HEAT_enableHeater>:

#include <stdint.h>

const uint8_t HEATERIDS[11] = {-1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};

void HEAT_enableHeater(uint8_t heaterID) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
	MAX7300_setPin(HEATERIDS[heaterID], 1);
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <HEAT_enableHeater+0x20>)
 8006d2a:	5cd3      	ldrb	r3, [r2, r3]
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 f956 	bl	8006fe0 <MAX7300_setPin>
}
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	080071f8 	.word	0x080071f8

08006d40 <HEAT_disableHeater>:

void HEAT_disableHeater(uint8_t heaterID) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]
	MAX7300_setPin(HEATERIDS[heaterID], 0);
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	4a04      	ldr	r2, [pc, #16]	; (8006d60 <HEAT_disableHeater+0x20>)
 8006d4e:	5cd3      	ldrb	r3, [r2, r3]
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 f944 	bl	8006fe0 <MAX7300_setPin>
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	080071f8 	.word	0x080071f8

08006d64 <LED_enableLED>:
#include <stdint.h>
#include "lowlevel/max7300.h"

const uint8_t LEDPINS[11] = {-1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21};

void LED_enableLED(uint8_t ledID) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	71fb      	strb	r3, [r7, #7]
	MAX7300_setPin(LEDPINS[ledID], 1);
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <LED_enableLED+0x20>)
 8006d72:	5cd3      	ldrb	r3, [r2, r3]
 8006d74:	2101      	movs	r1, #1
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f932 	bl	8006fe0 <MAX7300_setPin>
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	08007204 	.word	0x08007204

08006d88 <LED_disableLED>:

void LED_disableLED(uint8_t ledID) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	71fb      	strb	r3, [r7, #7]
	MAX7300_setPin(LEDPINS[ledID], 0);
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <LED_disableLED+0x20>)
 8006d96:	5cd3      	ldrb	r3, [r2, r3]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f920 	bl	8006fe0 <MAX7300_setPin>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	08007204 	.word	0x08007204

08006dac <LIGHT_getWellLightReading>:

#include <stdint.h>
#include "spi.h"
#include "gpio.h"

uint16_t LIGHT_getWellLightReading(uint8_t wellID) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	71fb      	strb	r3, [r7, #7]
	uint16_t result;
	result = TLV2553_measureChannel(wellID - 1);
 8006db6:	79fb      	ldrb	r3, [r7, #7]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f952 	bl	8007064 <TLV2553_measureChannel>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	81fb      	strh	r3, [r7, #14]
	return result;
 8006dc4:	89fb      	ldrh	r3, [r7, #14]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <TEMP_getWellTemperatureReading>:
#include "adc.h"

const uint32_t ADCCHANNELS[11] = {-1, ADC_CHANNEL_1, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5,
								   	  ADC_CHANNEL_6, ADC_CHANNEL_7, ADC_CHANNEL_8, ADC_CHANNEL_9, ADC_CHANNEL_10};

uint16_t TEMP_getWellTemperatureReading(uint8_t wellID) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]

	uint16_t result;

	ADC_ChannelConfTypeDef adcConfig = {0};
 8006dda:	f107 0308 	add.w	r3, r7, #8
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	609a      	str	r2, [r3, #8]
 8006de6:	60da      	str	r2, [r3, #12]
 8006de8:	611a      	str	r2, [r3, #16]
 8006dea:	615a      	str	r2, [r3, #20]

	// Configure the ADC for the channel desired (well 1 = channel 1, etc)
	adcConfig.Channel = ADCCHANNELS[wellID];
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	4a1a      	ldr	r2, [pc, #104]	; (8006e58 <TEMP_getWellTemperatureReading+0x88>)
 8006df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df4:	60bb      	str	r3, [r7, #8]

	// these settings copied from autogenerated code
	adcConfig.Rank = ADC_REGULAR_RANK_1;
 8006df6:	2306      	movs	r3, #6
 8006df8:	60fb      	str	r3, [r7, #12]
	adcConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8006dfa:	2307      	movs	r3, #7
 8006dfc:	613b      	str	r3, [r7, #16]
	adcConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006dfe:	237f      	movs	r3, #127	; 0x7f
 8006e00:	617b      	str	r3, [r7, #20]
	adcConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006e02:	2304      	movs	r3, #4
 8006e04:	61bb      	str	r3, [r7, #24]
	adcConfig.Offset = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]

	// Configure the channel with these new settings
	HAL_ADC_ConfigChannel(&hadc1, &adcConfig);
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4812      	ldr	r0, [pc, #72]	; (8006e5c <TEMP_getWellTemperatureReading+0x8c>)
 8006e12:	f7fa fee1 	bl	8001bd8 <HAL_ADC_ConfigChannel>

	// Perform self-calibration
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8006e16:	217f      	movs	r1, #127	; 0x7f
 8006e18:	4810      	ldr	r0, [pc, #64]	; (8006e5c <TEMP_getWellTemperatureReading+0x8c>)
 8006e1a:	f7fb fca7 	bl	800276c <HAL_ADCEx_Calibration_Start>

	// Start conversion
	HAL_ADC_Start(&hadc1);
 8006e1e:	480f      	ldr	r0, [pc, #60]	; (8006e5c <TEMP_getWellTemperatureReading+0x8c>)
 8006e20:	f7fa fda8 	bl	8001974 <HAL_ADC_Start>

	// Poll for conversion with 1ms timeout
	while (HAL_ADC_PollForConversion(&hadc1, 1) != HAL_OK) {}
 8006e24:	bf00      	nop
 8006e26:	2101      	movs	r1, #1
 8006e28:	480c      	ldr	r0, [pc, #48]	; (8006e5c <TEMP_getWellTemperatureReading+0x8c>)
 8006e2a:	f7fa fe39 	bl	8001aa0 <HAL_ADC_PollForConversion>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f8      	bne.n	8006e26 <TEMP_getWellTemperatureReading+0x56>

	uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8006e34:	4809      	ldr	r0, [pc, #36]	; (8006e5c <TEMP_getWellTemperatureReading+0x8c>)
 8006e36:	f7fa fec2 	bl	8001bbe <HAL_ADC_GetValue>
 8006e3a:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_ADC_Stop(&hadc1);
 8006e3c:	4807      	ldr	r0, [pc, #28]	; (8006e5c <TEMP_getWellTemperatureReading+0x8c>)
 8006e3e:	f7fa fdfc 	bl	8001a3a <HAL_ADC_Stop>

	result = adcValue & 0xFFF; // 12 bits, pad 0s
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e4a:	847b      	strh	r3, [r7, #34]	; 0x22

	return result;
 8006e4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3728      	adds	r7, #40	; 0x28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	08007210 	.word	0x08007210
 8006e5c:	20000028 	.word	0x20000028

08006e60 <THERM_enableThermostat>:
#include "gpio.h"

const uint16_t THERMPINS[11] = {-1, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_4, GPIO_PIN_5,
								   GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10};

void THERM_enableThermostat(uint8_t thermID) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, THERMPINS[thermID], GPIO_PIN_SET);
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	4a05      	ldr	r2, [pc, #20]	; (8006e84 <THERM_enableThermostat+0x24>)
 8006e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e72:	2201      	movs	r2, #1
 8006e74:	4619      	mov	r1, r3
 8006e76:	4804      	ldr	r0, [pc, #16]	; (8006e88 <THERM_enableThermostat+0x28>)
 8006e78:	f7fc fdda 	bl	8003a30 <HAL_GPIO_WritePin>
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	0800723c 	.word	0x0800723c
 8006e88:	48000400 	.word	0x48000400

08006e8c <THERM_disableThermostat>:

void THERM_disableThermostat(uint8_t thermID) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, THERMPINS[thermID], GPIO_PIN_RESET);
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <THERM_disableThermostat+0x24>)
 8006e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4804      	ldr	r0, [pc, #16]	; (8006eb4 <THERM_disableThermostat+0x28>)
 8006ea4:	f7fc fdc4 	bl	8003a30 <HAL_GPIO_WritePin>
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	0800723c 	.word	0x0800723c
 8006eb4:	48000400 	.word	0x48000400

08006eb8 <MAX6822_Toggle_WDI>:
#include "gpio.h"

#define WDI_PIN 	GPIOC, GPIO_PIN_9 	// watchdog input pin
#define MR_PIN		GPIOC, GPIO_PIN_8	// master reset pin

void MAX6822_Toggle_WDI() {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8006ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ec0:	4802      	ldr	r0, [pc, #8]	; (8006ecc <MAX6822_Toggle_WDI+0x14>)
 8006ec2:	f7fc fdcd 	bl	8003a60 <HAL_GPIO_TogglePin>
}
 8006ec6:	bf00      	nop
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	48000800 	.word	0x48000800

08006ed0 <MAX6822_Manual_Reset>:

// This will force a reset of the STM32 by pulling the Manual Reset line low on the watchdog
void MAX6822_Manual_Reset() {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eda:	4802      	ldr	r0, [pc, #8]	; (8006ee4 <MAX6822_Manual_Reset+0x14>)
 8006edc:	f7fc fda8 	bl	8003a30 <HAL_GPIO_WritePin>
}
 8006ee0:	bf00      	nop
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	48000800 	.word	0x48000800

08006ee8 <MAX7300_Init>:
uint8_t PORTREGISTERS[32]; // array of dataport addresses. Only 12-31 will be populated

uint8_t payloadBuffer[128]; // array of bytes to use as payload buffer

// Initialize the device with all required settings
void MAX7300_Init(void) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af02      	add	r7, sp, #8

	// initialize the PORTREGISTERS array (addresses as per datasheet)
	int portAddress = 0x2C; // port 12 is 2C, we increment by one
 8006eee:	232c      	movs	r3, #44	; 0x2c
 8006ef0:	60fb      	str	r3, [r7, #12]
	for (int i = 12; i < 32; i++) {
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	e00c      	b.n	8006f12 <MAX7300_Init+0x2a>
		PORTREGISTERS[i] = portAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	b2d9      	uxtb	r1, r3
 8006efc:	4a35      	ldr	r2, [pc, #212]	; (8006fd4 <MAX7300_Init+0xec>)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	460a      	mov	r2, r1
 8006f04:	701a      	strb	r2, [r3, #0]
		portAddress++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
	for (int i = 12; i < 32; i++) {
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b1f      	cmp	r3, #31
 8006f16:	ddef      	ble.n	8006ef8 <MAX7300_Init+0x10>
	}

	// sending on peripheral I2C1, at the above address, from payloadBuffer, 2 bytes, max timeout time
	payloadBuffer[0] = MAX7300_REG_CONFIG; // define command address as the configuration register
 8006f18:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = 0b00000001; // MSB is 0 for no transition detection, LSB is 1 for normal operation
 8006f1e:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 2, 10);
 8006f24:	230a      	movs	r3, #10
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	2302      	movs	r3, #2
 8006f2a:	4a2b      	ldr	r2, [pc, #172]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f2c:	2180      	movs	r1, #128	; 0x80
 8006f2e:	482b      	ldr	r0, [pc, #172]	; (8006fdc <MAX7300_Init+0xf4>)
 8006f30:	f7fc fe40 	bl	8003bb4 <HAL_I2C_Master_Transmit>
	// now to configure the ports. See tables 1 and 2 in the datasheet

	// part 1: we first have to set the register bits (LSB contained in PORTREGISTERS) to 1 to indicate active high output
	// writing more than 1 byte will automatically increment the command address. So we can just keep writing bytes and it will continue
	// to increment. We write all ports from 12 to 31 this way very quickly (see autoincrementing in datasheet)
	payloadBuffer[0] = PORTREGISTERS[12];
 8006f34:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <MAX7300_Init+0xec>)
 8006f36:	7b1a      	ldrb	r2, [r3, #12]
 8006f38:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f3a:	701a      	strb	r2, [r3, #0]
	for (int i = 12; i < 32; i++) {
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e007      	b.n	8006f52 <MAX7300_Init+0x6a>
		payloadBuffer[i] = 1;
 8006f42:	4a25      	ldr	r2, [pc, #148]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4413      	add	r3, r2
 8006f48:	2201      	movs	r2, #1
 8006f4a:	701a      	strb	r2, [r3, #0]
	for (int i = 12; i < 32; i++) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b1f      	cmp	r3, #31
 8006f56:	ddf4      	ble.n	8006f42 <MAX7300_Init+0x5a>
	}

	HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 21, 10);
 8006f58:	230a      	movs	r3, #10
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2315      	movs	r3, #21
 8006f5e:	4a1e      	ldr	r2, [pc, #120]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f60:	2180      	movs	r1, #128	; 0x80
 8006f62:	481e      	ldr	r0, [pc, #120]	; (8006fdc <MAX7300_Init+0xf4>)
 8006f64:	f7fc fe26 	bl	8003bb4 <HAL_I2C_Master_Transmit>

	// part 2: we write the 'output' bit pair to each port's configuration bits (see datasheet table 2)
	payloadBuffer[0] = MAX7300_REG_CONFIG_P15_P12;
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f6a:	220b      	movs	r2, #11
 8006f6c:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = 0b01010101;
 8006f6e:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f70:	2255      	movs	r2, #85	; 0x55
 8006f72:	705a      	strb	r2, [r3, #1]
	payloadBuffer[2] = 0b01010101;
 8006f74:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f76:	2255      	movs	r2, #85	; 0x55
 8006f78:	709a      	strb	r2, [r3, #2]
	payloadBuffer[3] = 0b01010101;
 8006f7a:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f7c:	2255      	movs	r2, #85	; 0x55
 8006f7e:	70da      	strb	r2, [r3, #3]
	payloadBuffer[4] = 0b01010101;
 8006f80:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f82:	2255      	movs	r2, #85	; 0x55
 8006f84:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 5, 10);
 8006f86:	230a      	movs	r3, #10
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2305      	movs	r3, #5
 8006f8c:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006f8e:	2180      	movs	r1, #128	; 0x80
 8006f90:	4812      	ldr	r0, [pc, #72]	; (8006fdc <MAX7300_Init+0xf4>)
 8006f92:	f7fc fe0f 	bl	8003bb4 <HAL_I2C_Master_Transmit>

	// MAX7300 is now configured for all pins 12-31 to be outputs

	// we will now set all of the LOW just in case
	for (int i = 12; i < 32; i++) {
 8006f96:	230c      	movs	r3, #12
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	e013      	b.n	8006fc4 <MAX7300_Init+0xdc>
		payloadBuffer[0] = PORTREGISTERS[i]; // set the address to the relevant port's setting address
 8006f9c:	4a0d      	ldr	r2, [pc, #52]	; (8006fd4 <MAX7300_Init+0xec>)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	781a      	ldrb	r2, [r3, #0]
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006fa6:	701a      	strb	r2, [r3, #0]
		payloadBuffer[1] = 0; // set the data to be written to 0
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 2, 10);
 8006fae:	230a      	movs	r3, #10
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	4a08      	ldr	r2, [pc, #32]	; (8006fd8 <MAX7300_Init+0xf0>)
 8006fb6:	2180      	movs	r1, #128	; 0x80
 8006fb8:	4808      	ldr	r0, [pc, #32]	; (8006fdc <MAX7300_Init+0xf4>)
 8006fba:	f7fc fdfb 	bl	8003bb4 <HAL_I2C_Master_Transmit>
	for (int i = 12; i < 32; i++) {
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b1f      	cmp	r3, #31
 8006fc8:	dde8      	ble.n	8006f9c <MAX7300_Init+0xb4>
	}

	// now all outputs are off

}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20000618 	.word	0x20000618
 8006fd8:	20000638 	.word	0x20000638
 8006fdc:	200000b8 	.word	0x200000b8

08006fe0 <MAX7300_setPin>:

// set pin "pinNumber" to the value in "pinValue"
void MAX7300_setPin(int pinNumber, int pinValue) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	if ((pinNumber >= 12) & (pinNumber <= 31) & ((pinValue == 1) | (pinValue == 0))) {
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b0b      	cmp	r3, #11
 8006fee:	bfcc      	ite	gt
 8006ff0:	2301      	movgt	r3, #1
 8006ff2:	2300      	movle	r3, #0
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b1f      	cmp	r3, #31
 8006ffa:	bfd4      	ite	le
 8006ffc:	2301      	movle	r3, #1
 8006ffe:	2300      	movgt	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	4013      	ands	r3, r2
 8007004:	b2db      	uxtb	r3, r3
 8007006:	4619      	mov	r1, r3
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	bf0c      	ite	eq
 800700e:	2301      	moveq	r3, #1
 8007010:	2300      	movne	r3, #0
 8007012:	b2da      	uxtb	r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf0c      	ite	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	2300      	movne	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	4313      	orrs	r3, r2
 8007022:	b2db      	uxtb	r3, r3
 8007024:	400b      	ands	r3, r1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d011      	beq.n	800704e <MAX7300_setPin+0x6e>
		payloadBuffer[0] = PORTREGISTERS[pinNumber];
 800702a:	4a0b      	ldr	r2, [pc, #44]	; (8007058 <MAX7300_setPin+0x78>)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4413      	add	r3, r2
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	4b0a      	ldr	r3, [pc, #40]	; (800705c <MAX7300_setPin+0x7c>)
 8007034:	701a      	strb	r2, [r3, #0]
		payloadBuffer[1] = pinValue;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b08      	ldr	r3, [pc, #32]	; (800705c <MAX7300_setPin+0x7c>)
 800703c:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 2, 10);
 800703e:	230a      	movs	r3, #10
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	2302      	movs	r3, #2
 8007044:	4a05      	ldr	r2, [pc, #20]	; (800705c <MAX7300_setPin+0x7c>)
 8007046:	2180      	movs	r1, #128	; 0x80
 8007048:	4805      	ldr	r0, [pc, #20]	; (8007060 <MAX7300_setPin+0x80>)
 800704a:	f7fc fdb3 	bl	8003bb4 <HAL_I2C_Master_Transmit>
	}
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000618 	.word	0x20000618
 800705c:	20000638 	.word	0x20000638
 8007060:	200000b8 	.word	0x200000b8

08007064 <TLV2553_measureChannel>:

uint16_t readingData[10];	// array of 16 bit ints for raw temperature data

// returns a 12-bit resolution ADC reading. Left 4 bits will be padded 0s
// see table 2 and figure 37 in datasheet
uint16_t TLV2553_measureChannel(int channelNumber) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	uint8_t response[2] = {0,0};
 800706c:	2300      	movs	r3, #0
 800706e:	81bb      	strh	r3, [r7, #12]
	uint16_t result = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	81fb      	strh	r3, [r7, #14]
	uint8_t command = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	72fb      	strb	r3, [r7, #11]

	command = command | (channelNumber << 4); 	// indicates ADC channel (pin) number
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	b25a      	sxtb	r2, r3
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	b25b      	sxtb	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b25b      	sxtb	r3, r3
 8007086:	b2db      	uxtb	r3, r3
 8007088:	72fb      	strb	r3, [r7, #11]
	command = command | (0b11 << 2);			// indicates a 16 bit message length (LSBs padded with 0s)
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	f043 030c 	orr.w	r3, r3, #12
 8007090:	b2db      	uxtb	r3, r3
 8007092:	72fb      	strb	r3, [r7, #11]
	command = command & 0b11111101;				// D1 is 0 to indicate MSB out first
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	f023 0302 	bic.w	r3, r3, #2
 800709a:	b2db      	uxtb	r3, r3
 800709c:	72fb      	strb	r3, [r7, #11]
	command = command & 0b11111110; 			// D0 is 0 to indicate unipolar binary
 800709e:	7afb      	ldrb	r3, [r7, #11]
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	72fb      	strb	r3, [r7, #11]

	TLV2553_enableCS();
 80070a8:	f000 f826 	bl	80070f8 <TLV2553_enableCS>

	HAL_SPI_Transmit(&hspi3, &command, 1, 10);
 80070ac:	f107 010b 	add.w	r1, r7, #11
 80070b0:	230a      	movs	r3, #10
 80070b2:	2201      	movs	r2, #1
 80070b4:	480f      	ldr	r0, [pc, #60]	; (80070f4 <TLV2553_measureChannel+0x90>)
 80070b6:	f7fe fb6c 	bl	8005792 <HAL_SPI_Transmit>

	// I forgot to wire the end-of-conversion pin. So I am waiting 5ms since the maximum conversion time is 1.6ms.
	HAL_Delay(5);
 80070ba:	2005      	movs	r0, #5
 80070bc:	f7fa f8c2 	bl	8001244 <HAL_Delay>

	HAL_SPI_Receive(&hspi3, response, 2, 10);
 80070c0:	f107 010c 	add.w	r1, r7, #12
 80070c4:	230a      	movs	r3, #10
 80070c6:	2202      	movs	r2, #2
 80070c8:	480a      	ldr	r0, [pc, #40]	; (80070f4 <TLV2553_measureChannel+0x90>)
 80070ca:	f7fe fcd0 	bl	8005a6e <HAL_SPI_Receive>

	TLV2553_disableCS();
 80070ce:	f000 f81e 	bl	800710e <TLV2553_disableCS>

	result = (response[0] << 8) | (response[1]);
 80070d2:	7b3b      	ldrb	r3, [r7, #12]
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	b21a      	sxth	r2, r3
 80070d8:	7b7b      	ldrb	r3, [r7, #13]
 80070da:	b21b      	sxth	r3, r3
 80070dc:	4313      	orrs	r3, r2
 80070de:	b21b      	sxth	r3, r3
 80070e0:	81fb      	strh	r3, [r7, #14]
	result = result >> 4;						// move padded 0s from LSB to MSB
 80070e2:	89fb      	ldrh	r3, [r7, #14]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	81fb      	strh	r3, [r7, #14]

	return result;
 80070e8:	89fb      	ldrh	r3, [r7, #14]

}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20000564 	.word	0x20000564

080070f8 <TLV2553_enableCS>:

void TLV2553_enableCS(void) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007106:	f7fc fc93 	bl	8003a30 <HAL_GPIO_WritePin>
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}

0800710e <TLV2553_disableCS>:

void TLV2553_disableCS(void) {
 800710e:	b580      	push	{r7, lr}
 8007110:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8007112:	2201      	movs	r2, #1
 8007114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800711c:	f7fc fc88 	bl	8003a30 <HAL_GPIO_WritePin>
}
 8007120:	bf00      	nop
 8007122:	bd80      	pop	{r7, pc}

08007124 <__libc_init_array>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4d0d      	ldr	r5, [pc, #52]	; (800715c <__libc_init_array+0x38>)
 8007128:	4c0d      	ldr	r4, [pc, #52]	; (8007160 <__libc_init_array+0x3c>)
 800712a:	1b64      	subs	r4, r4, r5
 800712c:	10a4      	asrs	r4, r4, #2
 800712e:	2600      	movs	r6, #0
 8007130:	42a6      	cmp	r6, r4
 8007132:	d109      	bne.n	8007148 <__libc_init_array+0x24>
 8007134:	4d0b      	ldr	r5, [pc, #44]	; (8007164 <__libc_init_array+0x40>)
 8007136:	4c0c      	ldr	r4, [pc, #48]	; (8007168 <__libc_init_array+0x44>)
 8007138:	f000 f82e 	bl	8007198 <_init>
 800713c:	1b64      	subs	r4, r4, r5
 800713e:	10a4      	asrs	r4, r4, #2
 8007140:	2600      	movs	r6, #0
 8007142:	42a6      	cmp	r6, r4
 8007144:	d105      	bne.n	8007152 <__libc_init_array+0x2e>
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	f855 3b04 	ldr.w	r3, [r5], #4
 800714c:	4798      	blx	r3
 800714e:	3601      	adds	r6, #1
 8007150:	e7ee      	b.n	8007130 <__libc_init_array+0xc>
 8007152:	f855 3b04 	ldr.w	r3, [r5], #4
 8007156:	4798      	blx	r3
 8007158:	3601      	adds	r6, #1
 800715a:	e7f2      	b.n	8007142 <__libc_init_array+0x1e>
 800715c:	08007254 	.word	0x08007254
 8007160:	08007254 	.word	0x08007254
 8007164:	08007254 	.word	0x08007254
 8007168:	08007258 	.word	0x08007258

0800716c <memcpy>:
 800716c:	440a      	add	r2, r1
 800716e:	4291      	cmp	r1, r2
 8007170:	f100 33ff 	add.w	r3, r0, #4294967295
 8007174:	d100      	bne.n	8007178 <memcpy+0xc>
 8007176:	4770      	bx	lr
 8007178:	b510      	push	{r4, lr}
 800717a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007182:	4291      	cmp	r1, r2
 8007184:	d1f9      	bne.n	800717a <memcpy+0xe>
 8007186:	bd10      	pop	{r4, pc}

08007188 <memset>:
 8007188:	4402      	add	r2, r0
 800718a:	4603      	mov	r3, r0
 800718c:	4293      	cmp	r3, r2
 800718e:	d100      	bne.n	8007192 <memset+0xa>
 8007190:	4770      	bx	lr
 8007192:	f803 1b01 	strb.w	r1, [r3], #1
 8007196:	e7f9      	b.n	800718c <memset+0x4>

08007198 <_init>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr

080071a4 <_fini>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr
