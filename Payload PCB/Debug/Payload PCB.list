
Payload PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004304  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d8  080044d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044d8  080044d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d8  080044d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000000c  080044ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  080044ec  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f53  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bef  00000000  00000000  00030f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00033b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00034b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252fe  00000000  00000000  000359c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d01  00000000  00000000  0005acc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c0a  00000000  00000000  0006f9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001505d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004094  00000000  00000000  00150624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004480 	.word	0x08004480

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004480 	.word	0x08004480

080001d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b29      	ldr	r3, [pc, #164]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001ec:	4a29      	ldr	r2, [pc, #164]	; (8000294 <MX_ADC1_Init+0xc0>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f0:	4b27      	ldr	r3, [pc, #156]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	4b26      	ldr	r3, [pc, #152]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	4b24      	ldr	r3, [pc, #144]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001fe:	2200      	movs	r2, #0
 8000200:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000202:	4b23      	ldr	r3, [pc, #140]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000204:	2200      	movs	r2, #0
 8000206:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000208:	4b21      	ldr	r3, [pc, #132]	; (8000290 <MX_ADC1_Init+0xbc>)
 800020a:	2204      	movs	r2, #4
 800020c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800020e:	4b20      	ldr	r3, [pc, #128]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000214:	4b1e      	ldr	r3, [pc, #120]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800021a:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <MX_ADC1_Init+0xbc>)
 800021c:	2201      	movs	r2, #1
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000220:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000222:	2200      	movs	r2, #0
 8000224:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <MX_ADC1_Init+0xbc>)
 800022a:	2200      	movs	r2, #0
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022e:	4b18      	ldr	r3, [pc, #96]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000230:	2200      	movs	r2, #0
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000236:	2200      	movs	r2, #0
 8000238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_ADC1_Init+0xbc>)
 800023e:	2200      	movs	r2, #0
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000244:	2200      	movs	r2, #0
 8000246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <MX_ADC1_Init+0xbc>)
 800024c:	f000 ff22 	bl	8001094 <HAL_ADC_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000256:	f000 fbf7 	bl	8000a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_ADC1_Init+0xc4>)
 800025c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800025e:	2306      	movs	r3, #6
 8000260:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000266:	237f      	movs	r3, #127	; 0x7f
 8000268:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800026a:	2304      	movs	r3, #4
 800026c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000272:	463b      	mov	r3, r7
 8000274:	4619      	mov	r1, r3
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000278:	f001 f858 	bl	800132c <HAL_ADC_ConfigChannel>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000282:	f000 fbe1 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000286:	bf00      	nop
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028
 8000294:	50040000 	.word	0x50040000
 8000298:	04300002 	.word	0x04300002

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b0a4      	sub	sp, #144	; 0x90
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2268      	movs	r2, #104	; 0x68
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f004 f8d7 	bl	8004470 <memset>
  if(adcHandle->Instance==ADC1)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a33      	ldr	r2, [pc, #204]	; (8000394 <HAL_ADC_MspInit+0xf8>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d15f      	bne.n	800038c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002d6:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002d8:	2301      	movs	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80002e0:	2310      	movs	r3, #16
 80002e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002e4:	2307      	movs	r3, #7
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002e8:	2302      	movs	r3, #2
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80002f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 fc08 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000306:	f000 fb9f 	bl	8000a48 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a22      	ldr	r2, [pc, #136]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000328:	f043 0304 	orr.w	r3, r3, #4
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0304 	and.w	r3, r3, #4
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	4a16      	ldr	r2, [pc, #88]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000352:	230f      	movs	r3, #15
 8000354:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000356:	230b      	movs	r3, #11
 8000358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000362:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000366:	4619      	mov	r1, r3
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <HAL_ADC_MspInit+0x100>)
 800036a:	f001 ffc1 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800036e:	233f      	movs	r3, #63	; 0x3f
 8000370:	67fb      	str	r3, [r7, #124]	; 0x7c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000372:	230b      	movs	r3, #11
 8000374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000382:	4619      	mov	r1, r3
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f001 ffb2 	bl	80022f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800038c:	bf00      	nop
 800038e:	3790      	adds	r7, #144	; 0x90
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	50040000 	.word	0x50040000
 8000398:	40021000 	.word	0x40021000
 800039c:	48000800 	.word	0x48000800

080003a0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <MX_CAN1_Init+0x60>)
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <MX_CAN1_Init+0x64>)
 80003a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_CAN1_Init+0x60>)
 80003ac:	2210      	movs	r2, #16
 80003ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_CAN1_Init+0x60>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_CAN1_Init+0x60>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_CAN1_Init+0x60>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_CAN1_Init+0x60>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <MX_CAN1_Init+0x60>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_CAN1_Init+0x60>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_CAN1_Init+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_CAN1_Init+0x60>)
 80003dc:	2200      	movs	r2, #0
 80003de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <MX_CAN1_Init+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_CAN1_Init+0x60>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_CAN1_Init+0x60>)
 80003ee:	f001 fb99 	bl	8001b24 <HAL_CAN_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 fb26 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000090 	.word	0x20000090
 8000404:	40006400 	.word	0x40006400

08000408 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a17      	ldr	r2, [pc, #92]	; (8000484 <HAL_CAN_MspInit+0x7c>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d128      	bne.n	800047c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <HAL_CAN_MspInit+0x80>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	4a16      	ldr	r2, [pc, #88]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a10      	ldr	r2, [pc, #64]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000448:	f043 0302 	orr.w	r3, r3, #2
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0302 	and.w	r3, r3, #2
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800045a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000460:	2302      	movs	r3, #2
 8000462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 800046c:	230a      	movs	r3, #10
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <HAL_CAN_MspInit+0x84>)
 8000478:	f001 ff3a 	bl	80022f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800047c:	bf00      	nop
 800047e:	3728      	adds	r7, #40	; 0x28
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40006400 	.word	0x40006400
 8000488:	40021000 	.word	0x40021000
 800048c:	48000400 	.word	0x48000400

08000490 <CAN_Init>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef CAN_Init(){
 8000490:	b580      	push	{r7, lr}
 8000492:	b08c      	sub	sp, #48	; 0x30
 8000494:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef operation_status;

	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x0000;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterBank = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004b2:	2301      	movs	r3, #1
 80004b4:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 80004ba:	230e      	movs	r3, #14
 80004bc:	62bb      	str	r3, [r7, #40]	; 0x28

	operation_status = HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	4619      	mov	r1, r3
 80004c2:	4812      	ldr	r0, [pc, #72]	; (800050c <CAN_Init+0x7c>)
 80004c4:	f001 fc29 	bl	8001d1a <HAL_CAN_ConfigFilter>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (operation_status != HAL_OK) goto error;
 80004ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d111      	bne.n	80004fa <CAN_Init+0x6a>
	operation_status = HAL_CAN_Start(&hcan1); // Turn on the CAN Bus
 80004d6:	480d      	ldr	r0, [pc, #52]	; (800050c <CAN_Init+0x7c>)
 80004d8:	f001 fce9 	bl	8001eae <HAL_CAN_Start>
 80004dc:	4603      	mov	r3, r0
 80004de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (operation_status != HAL_OK) goto error;
 80004e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d109      	bne.n	80004fe <CAN_Init+0x6e>

	operation_status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004ea:	2102      	movs	r1, #2
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <CAN_Init+0x7c>)
 80004ee:	f001 fdf2 	bl	80020d6 <HAL_CAN_ActivateNotification>
 80004f2:	4603      	mov	r3, r0
 80004f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004f8:	e002      	b.n	8000500 <CAN_Init+0x70>
	if (operation_status != HAL_OK) goto error;
 80004fa:	bf00      	nop
 80004fc:	e000      	b.n	8000500 <CAN_Init+0x70>
	if (operation_status != HAL_OK) goto error;
 80004fe:	bf00      	nop

error:
    return operation_status;
 8000500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000504:	4618      	mov	r0, r3
 8000506:	3730      	adds	r7, #48	; 0x30
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000090 	.word	0x20000090

08000510 <CAN_Transmit_Message>:
 *
 * @param myMessage: The CAN message
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Transmit_Message(CANMessage_t myMessage){
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af00      	add	r7, sp, #0
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t txMailbox; // Transmit Mailbox
	CAN_TxHeaderTypeDef txMessage;
	
	// TX Message Parameters
	uint16_t ID = (myMessage.priority << 4) | (SOURCE_ID << 2) | (myMessage.DestinationID);
 800051c:	793b      	ldrb	r3, [r7, #4]
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	b21b      	sxth	r3, r3
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	b21a      	sxth	r2, r3
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	b21b      	sxth	r3, r3
 800052c:	4313      	orrs	r3, r2
 800052e:	b21b      	sxth	r3, r3
 8000530:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t message[8] = {myMessage.command, myMessage.data[0], myMessage.data[1], myMessage.data[2], myMessage.data[3], myMessage.data[4], myMessage.data[5],myMessage.data[6]};
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	743b      	strb	r3, [r7, #16]
 8000536:	7a3b      	ldrb	r3, [r7, #8]
 8000538:	747b      	strb	r3, [r7, #17]
 800053a:	7a7b      	ldrb	r3, [r7, #9]
 800053c:	74bb      	strb	r3, [r7, #18]
 800053e:	7abb      	ldrb	r3, [r7, #10]
 8000540:	74fb      	strb	r3, [r7, #19]
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	753b      	strb	r3, [r7, #20]
 8000546:	7b3b      	ldrb	r3, [r7, #12]
 8000548:	757b      	strb	r3, [r7, #21]
 800054a:	7b7b      	ldrb	r3, [r7, #13]
 800054c:	75bb      	strb	r3, [r7, #22]
 800054e:	7bbb      	ldrb	r3, [r7, #14]
 8000550:	75fb      	strb	r3, [r7, #23]

	txMessage.StdId = ID;
 8000552:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000554:	61bb      	str	r3, [r7, #24]
	txMessage.IDE = CAN_ID_STD;
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
	txMessage.RTR = CAN_RTR_DATA;
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
	txMessage.DLC = MAX_CAN_DATA_LENGTH;
 800055e:	2308      	movs	r3, #8
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28

	return HAL_CAN_AddTxMessage(&hcan1, &txMessage, message, &txMailbox);
 8000562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000566:	f107 0210 	add.w	r2, r7, #16
 800056a:	f107 0118 	add.w	r1, r7, #24
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <CAN_Transmit_Message+0x70>)
 8000570:	f001 fce1 	bl	8001f36 <HAL_CAN_AddTxMessage>
 8000574:	4603      	mov	r3, r0
}
 8000576:	4618      	mov	r0, r3
 8000578:	3738      	adds	r7, #56	; 0x38
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000090 	.word	0x20000090

08000584 <CAN_Send_Default_ACK>:
 *
 * @param myMessage: The received CAN message to send the ACK for
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Send_Default_ACK(CANMessage_t myMessage){
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    CANMessage_t ack_message = {
        .priority = myMessage.priority,
 8000590:	793b      	ldrb	r3, [r7, #4]
    CANMessage_t ack_message = {
 8000592:	753b      	strb	r3, [r7, #20]
 8000594:	2302      	movs	r3, #2
 8000596:	757b      	strb	r3, [r7, #21]
        .SenderID = SOURCE_ID,
        .DestinationID = myMessage.SenderID,
 8000598:	797b      	ldrb	r3, [r7, #5]
    CANMessage_t ack_message = {
 800059a:	75bb      	strb	r3, [r7, #22]
 800059c:	2301      	movs	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]
        .command = 0x01,
        .data = {myMessage.command, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
 80005a0:	79fb      	ldrb	r3, [r7, #7]
    CANMessage_t ack_message = {
 80005a2:	763b      	strb	r3, [r7, #24]
 80005a4:	2300      	movs	r3, #0
 80005a6:	767b      	strb	r3, [r7, #25]
 80005a8:	2300      	movs	r3, #0
 80005aa:	76bb      	strb	r3, [r7, #26]
 80005ac:	2300      	movs	r3, #0
 80005ae:	76fb      	strb	r3, [r7, #27]
 80005b0:	2300      	movs	r3, #0
 80005b2:	773b      	strb	r3, [r7, #28]
 80005b4:	2300      	movs	r3, #0
 80005b6:	777b      	strb	r3, [r7, #29]
 80005b8:	2300      	movs	r3, #0
 80005ba:	77bb      	strb	r3, [r7, #30]
    };
    return CAN_Transmit_Message(ack_message);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005c4:	f7ff ffa4 	bl	8000510 <CAN_Transmit_Message>
 80005c8:	4603      	mov	r3, r0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <CAN_Queue_Init>:
#include "can_message_queue.h"

//###############################################################################################
//Public Functions
//###############################################################################################
void CAN_Queue_Init(CANQueue_t* queue) {
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
    queue->tail = 0;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <CAN_Queue_IsEmpty>:

bool CAN_Queue_IsEmpty(const CANQueue_t* queue) {
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
    return (queue->head == queue->tail);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <CAN_Queue_Dequeue>:
    queue->tail = (queue->tail + 1) % CAN_QUEUE_SIZE;

    return true;
}

bool CAN_Queue_Dequeue(CANQueue_t* queue, CANMessage_t* messageBuffer) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    if (CAN_Queue_IsEmpty(queue)) {
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ffe5 	bl	80005f2 <CAN_Queue_IsEmpty>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <CAN_Queue_Dequeue+0x1a>
        return false;
 800062e:	2300      	movs	r3, #0
 8000630:	e01e      	b.n	8000670 <CAN_Queue_Dequeue+0x58>
    }

    CANQueueItem_t* item = &queue->items[queue->head];
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	3308      	adds	r3, #8
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
    memcpy(messageBuffer, &item->data, sizeof(CANMessage_t));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	220b      	movs	r2, #11
 800064c:	4619      	mov	r1, r3
 800064e:	6838      	ldr	r0, [r7, #0]
 8000650:	f003 ff00 	bl	8004454 <memcpy>
    queue->head = (queue->head + 1) % CAN_QUEUE_SIZE;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <CAN_Queue_Dequeue+0x60>)
 800065c:	fba3 1302 	umull	r1, r3, r3, r2
 8000660:	095b      	lsrs	r3, r3, #5
 8000662:	2164      	movs	r1, #100	; 0x64
 8000664:	fb01 f303 	mul.w	r3, r1, r3
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]

    return true;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	51eb851f 	.word	0x51eb851f

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <MX_GPIO_Init+0xe8>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a33      	ldr	r2, [pc, #204]	; (8000764 <MX_GPIO_Init+0xe8>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <MX_GPIO_Init+0xe8>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_GPIO_Init+0xe8>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <MX_GPIO_Init+0xe8>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_GPIO_Init+0xe8>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <MX_GPIO_Init+0xe8>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a27      	ldr	r2, [pc, #156]	; (8000764 <MX_GPIO_Init+0xe8>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <MX_GPIO_Init+0xe8>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80006da:	2200      	movs	r2, #0
 80006dc:	f240 71f7 	movw	r1, #2039	; 0x7f7
 80006e0:	4821      	ldr	r0, [pc, #132]	; (8000768 <MX_GPIO_Init+0xec>)
 80006e2:	f001 ff7f 	bl	80025e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <MX_GPIO_Init+0xf0>)
 80006ee:	f001 ff79 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f001 ff72 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000700:	f240 73f7 	movw	r3, #2039	; 0x7f7
 8000704:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <MX_GPIO_Init+0xec>)
 800071a:	f001 fde9 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800071e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <MX_GPIO_Init+0xf0>)
 8000738:	f001 fdda 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800073c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f001 fdca 	bl	80022f0 <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400
 800076c:	48000800 	.word	0x48000800

08000770 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000780:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_I2C1_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007ae:	f001 ff31 	bl	8002614 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 f946 	bl	8000a48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007c0:	f002 faaa 	bl	8002d18 <HAL_I2CEx_ConfigAnalogFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007ca:	f000 f93d 	bl	8000a48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007d2:	f002 faec 	bl	8002dae <HAL_I2CEx_ConfigDigitalFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f934 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000b8 	.word	0x200000b8
 80007e8:	40005400 	.word	0x40005400

080007ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a4      	sub	sp, #144	; 0x90
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2268      	movs	r2, #104	; 0x68
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fe2f 	bl	8004470 <memset>
  if(i2cHandle->Instance==I2C1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <HAL_I2C_MspInit+0xb0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d13b      	bne.n	8000894 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000820:	2300      	movs	r3, #0
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4618      	mov	r0, r3
 800082a:	f003 f971 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000834:	f000 f908 	bl	8000a48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_I2C_MspInit+0xb4>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <HAL_I2C_MspInit+0xb4>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_I2C_MspInit+0xb4>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000850:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000854:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000868:	2304      	movs	r3, #4
 800086a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f001 fd3a 	bl	80022f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_I2C_MspInit+0xb4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_I2C_MspInit+0xb4>)
 8000882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000886:	6593      	str	r3, [r2, #88]	; 0x58
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_I2C_MspInit+0xb4>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000894:	bf00      	nop
 8000896:	3790      	adds	r7, #144	; 0x90
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 f9dd 	bl	8000c6a <HAL_Init>
  CANQueue_t can_queue; // CAN Queue object

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f884 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff fee2 	bl	800067c <MX_GPIO_Init>
  MX_ADC1_Init();
 80008b8:	f7ff fc8c 	bl	80001d4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80008bc:	f7ff fd70 	bl	80003a0 <MX_CAN1_Init>
  MX_I2C1_Init();
 80008c0:	f7ff ff56 	bl	8000770 <MX_I2C1_Init>
  MX_SPI3_Init();
 80008c4:	f000 f8c6 	bl	8000a54 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  MAX7300_Init();
 80008c8:	f003 fd24 	bl	8004314 <MAX7300_Init>
  CAN_Queue_Init(&can_queue);
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe7e 	bl	80005d2 <CAN_Queue_Init>

  HAL_StatusTypeDef can_operation_status;
  can_operation_status = CAN_Init(); 		// defined in the custom can_driver file
 80008d6:	f7ff fddb 	bl	8000490 <CAN_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
//	  MAX7300_setPin(21, LOW);
//	  HAL_Delay(10000);

	  //TODO: implement MAX6822 toggle code

	  if (!CAN_Queue_IsEmpty(&can_queue)) {
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe84 	bl	80005f2 <CAN_Queue_IsEmpty>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f083 0301 	eor.w	r3, r3, #1
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f4      	beq.n	80008e0 <main+0x3c>
		  CANMessage_t can_message;
		  CAN_Queue_Dequeue(&can_queue, &can_message);
 80008f6:	f107 020c 	add.w	r2, r7, #12
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe89 	bl	8000618 <CAN_Queue_Dequeue>

		  CANMessage_t response; // response that we will generate

		  switch (can_message.command) {
 8000906:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800090a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800090e:	78db      	ldrb	r3, [r3, #3]
 8000910:	3ba0      	subs	r3, #160	; 0xa0
 8000912:	2b06      	cmp	r3, #6
 8000914:	d84f      	bhi.n	80009b6 <main+0x112>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <main+0x78>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	08000939 	.word	0x08000939
 8000920:	0800094b 	.word	0x0800094b
 8000924:	0800095d 	.word	0x0800095d
 8000928:	0800096f 	.word	0x0800096f
 800092c:	08000981 	.word	0x08000981
 8000930:	08000993 	.word	0x08000993
 8000934:	080009a5 	.word	0x080009a5
		  case 0xA0: // reset STM32
			  CAN_Send_Default_ACK(can_message);
 8000938:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800093c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8000940:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000944:	f7ff fe1e 	bl	8000584 <CAN_Send_Default_ACK>
			  // manually reset the device (implement in MAX6822 driver)
			  break;
 8000948:	e036      	b.n	80009b8 <main+0x114>
		  case 0xA1: // turn on an LED
			  CAN_Send_Default_ACK(can_message);
 800094a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800094e:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8000952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000956:	f7ff fe15 	bl	8000584 <CAN_Send_Default_ACK>
			  // TODO: enable LED
			  // TODO: send response
			  break;
 800095a:	e02d      	b.n	80009b8 <main+0x114>
		  case 0xA2: // turn off an LED
			  CAN_Send_Default_ACK(can_message);
 800095c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000960:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8000964:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000968:	f7ff fe0c 	bl	8000584 <CAN_Send_Default_ACK>
			  // TODO: disable LED
			  // TODO: send response
			  break;
 800096c:	e024      	b.n	80009b8 <main+0x114>
		  case 0xA3: // turn a thermoregulation system on
			  CAN_Send_Default_ACK(can_message);
 800096e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000972:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8000976:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800097a:	f7ff fe03 	bl	8000584 <CAN_Send_Default_ACK>
			  // TODO: enable thermoregulation system
			  // TODO: send response
			  break;
 800097e:	e01b      	b.n	80009b8 <main+0x114>
		  case 0xA4: // turn a thermoregulation system off
			  CAN_Send_Default_ACK(can_message);
 8000980:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000984:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8000988:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800098c:	f7ff fdfa 	bl	8000584 <CAN_Send_Default_ACK>
			  // TODO: disable thermoregulation system
			  // TODO: send response
			  break;
 8000990:	e012      	b.n	80009b8 <main+0x114>
		  case 0xA5: // turn a heater on
			  CAN_Send_Default_ACK(can_message);
 8000992:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000996:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800099a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800099e:	f7ff fdf1 	bl	8000584 <CAN_Send_Default_ACK>
			  // TODO: enable heater
			  // TODO: send response
			  break;
 80009a2:	e009      	b.n	80009b8 <main+0x114>
		  case 0xA6: // turn a heater off
			  CAN_Send_Default_ACK(can_message);
 80009a4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80009a8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80009ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009b0:	f7ff fde8 	bl	8000584 <CAN_Send_Default_ACK>
			  // TODO: disable heater
			  // TODO: send response
			  break;
 80009b4:	e000      	b.n	80009b8 <main+0x114>
		  default:
			  break;
 80009b6:	bf00      	nop
	  if (!CAN_Queue_IsEmpty(&can_queue)) {
 80009b8:	e792      	b.n	80008e0 <main+0x3c>
 80009ba:	bf00      	nop

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b096      	sub	sp, #88	; 0x58
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2244      	movs	r2, #68	; 0x44
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 fd50 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e2:	f002 fa3f 	bl	8002e64 <HAL_PWREx_ControlVoltageScaling>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009ec:	f000 f82c 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009f0:	2310      	movs	r3, #16
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f4:	2301      	movs	r3, #1
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009fc:	2360      	movs	r3, #96	; 0x60
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fa81 	bl	8002f10 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a14:	f000 f818 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fe81 	bl	8003738 <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a3c:	f000 f804 	bl	8000a48 <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3758      	adds	r7, #88	; 0x58
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_SPI3_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a6e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000a72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000aae:	2208      	movs	r2, #8
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_SPI3_Init+0x74>)
 8000ab4:	f003 fb8a 	bl	80041cc <HAL_SPI_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f7ff ffc3 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000010c 	.word	0x2000010c
 8000acc:	40003c00 	.word	0x40003c00

08000ad0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <HAL_SPI_MspInit+0x7c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d128      	bne.n	8000b44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_SPI_MspInit+0x80>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <HAL_SPI_MspInit+0x80>)
 8000af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_SPI_MspInit+0x80>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_SPI_MspInit+0x80>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_SPI_MspInit+0x80>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_SPI_MspInit+0x80>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b34:	2306      	movs	r3, #6
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_SPI_MspInit+0x84>)
 8000b40:	f001 fbd6 	bl	80022f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40003c00 	.word	0x40003c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000800 	.word	0x48000800

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f892 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c1c:	f7ff ffea 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 fbe1 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4a:	f7ff fe2b 	bl	80008a4 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	080044e0 	.word	0x080044e0
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	20000214 	.word	0x20000214

08000c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_IRQHandler>

08000c6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f001 fb07 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f80e 	bl	8000c9c <HAL_InitTick>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e001      	b.n	8000c90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c8c:	f7ff ff64 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_InitTick+0x6c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d023      	beq.n	8000cf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_InitTick+0x70>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_InitTick+0x6c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fb05 	bl	80022d6 <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10f      	bne.n	8000cf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d809      	bhi.n	8000cec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f001 fadd 	bl	800229e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_InitTick+0x74>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e007      	b.n	8000cfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e004      	b.n	8000cfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e001      	b.n	8000cfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000170 	.word	0x20000170

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000170 	.word	0x20000170

08000d54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3360      	adds	r3, #96	; 0x60
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <LL_ADC_SetOffset+0x44>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	4313      	orrs	r3, r2
 8000dec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000df4:	bf00      	nop
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	03fff000 	.word	0x03fff000

08000e04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3360      	adds	r3, #96	; 0x60
 8000e12:	461a      	mov	r2, r3
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3360      	adds	r3, #96	; 0x60
 8000e40:	461a      	mov	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e5a:	bf00      	nop
 8000e5c:	371c      	adds	r7, #28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	615a      	str	r2, [r3, #20]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3330      	adds	r3, #48	; 0x30
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	211f      	movs	r1, #31
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	0e9b      	lsrs	r3, r3, #26
 8000ec4:	f003 011f 	and.w	r1, r3, #31
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3314      	adds	r3, #20
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	0e5b      	lsrs	r3, r3, #25
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	0d1b      	lsrs	r3, r3, #20
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	2107      	movs	r1, #7
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	0d1b      	lsrs	r3, r3, #20
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f2e:	bf00      	nop
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0318 	and.w	r3, r3, #24
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f60:	40d9      	lsrs	r1, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	400b      	ands	r3, r1
 8000f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	0007ffff 	.word	0x0007ffff

08000f84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6093      	str	r3, [r2, #8]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fbc:	d101      	bne.n	8000fc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800100c:	d101      	bne.n	8001012 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <LL_ADC_IsEnabled+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_ADC_IsEnabled+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b04      	cmp	r3, #4
 8001058:	d101      	bne.n	800105e <LL_ADC_REG_IsConversionOngoing+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b08      	cmp	r3, #8
 800107e:	d101      	bne.n	8001084 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e12f      	b.n	800130e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d109      	bne.n	80010d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f8ed 	bl	800029c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff67 	bl	8000fa8 <LL_ADC_IsDeepPowerDownEnabled>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff4d 	bl	8000f84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff82 	bl	8000ff8 <LL_ADC_IsInternalRegulatorEnabled>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d115      	bne.n	8001126 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff66 	bl	8000fd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001104:	4b84      	ldr	r3, [pc, #528]	; (8001318 <HAL_ADC_Init+0x284>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	4a84      	ldr	r2, [pc, #528]	; (800131c <HAL_ADC_Init+0x288>)
 800110c:	fba2 2303 	umull	r2, r3, r2, r3
 8001110:	099b      	lsrs	r3, r3, #6
 8001112:	3301      	adds	r3, #1
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001118:	e002      	b.n	8001120 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3b01      	subs	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff64 	bl	8000ff8 <LL_ADC_IsInternalRegulatorEnabled>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10d      	bne.n	8001152 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	f043 0210 	orr.w	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff75 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 800115c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 80c8 	bne.w	80012fc <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 80c4 	bne.w	80012fc <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800117c:	f043 0202 	orr.w	r2, r3, #2
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff49 	bl	8001020 <LL_ADC_IsEnabled>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10b      	bne.n	80011ac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001194:	4862      	ldr	r0, [pc, #392]	; (8001320 <HAL_ADC_Init+0x28c>)
 8001196:	f7ff ff43 	bl	8001020 <LL_ADC_IsEnabled>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	485f      	ldr	r0, [pc, #380]	; (8001324 <HAL_ADC_Init+0x290>)
 80011a8:	f7ff fdd4 	bl	8000d54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7e5b      	ldrb	r3, [r3, #25]
 80011b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d106      	bne.n	80011e8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	3b01      	subs	r3, #1
 80011e0:	045b      	lsls	r3, r3, #17
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_ADC_Init+0x294>)
 800120c:	4013      	ands	r3, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	430b      	orrs	r3, r1
 8001216:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff12 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 8001222:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff1f 	bl	800106c <LL_ADC_INJ_IsConversionOngoing>
 800122e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d140      	bne.n	80012b8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d13d      	bne.n	80012b8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e1b      	ldrb	r3, [r3, #24]
 8001244:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001246:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800124e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800125e:	f023 0306 	bic.w	r3, r3, #6
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	430b      	orrs	r3, r1
 800126a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001272:	2b01      	cmp	r3, #1
 8001274:	d118      	bne.n	80012a8 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001280:	f023 0304 	bic.w	r3, r3, #4
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800128c:	4311      	orrs	r1, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001292:	4311      	orrs	r1, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001298:	430a      	orrs	r2, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	e007      	b.n	80012b8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	691a      	ldr	r2, [r3, #16]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d10c      	bne.n	80012da <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f023 010f 	bic.w	r1, r3, #15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
 80012d8:	e007      	b.n	80012ea <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 020f 	bic.w	r2, r2, #15
 80012e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f023 0303 	bic.w	r3, r3, #3
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	659a      	str	r2, [r3, #88]	; 0x58
 80012fa:	e007      	b.n	800130c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800130c:	7ffb      	ldrb	r3, [r7, #31]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000
 800131c:	053e2d63 	.word	0x053e2d63
 8001320:	50040000 	.word	0x50040000
 8001324:	50040300 	.word	0x50040300
 8001328:	fff0c007 	.word	0xfff0c007

0800132c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0b6      	sub	sp, #216	; 0xd8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_ConfigChannel+0x22>
 800134a:	2302      	movs	r3, #2
 800134c:	e3d5      	b.n	8001afa <HAL_ADC_ConfigChannel+0x7ce>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe73 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 83ba 	bne.w	8001adc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d824      	bhi.n	80013ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	3b02      	subs	r3, #2
 8001376:	2b03      	cmp	r3, #3
 8001378:	d81b      	bhi.n	80013b2 <HAL_ADC_ConfigChannel+0x86>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <HAL_ADC_ConfigChannel+0x54>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	08001391 	.word	0x08001391
 8001384:	08001399 	.word	0x08001399
 8001388:	080013a1 	.word	0x080013a1
 800138c:	080013a9 	.word	0x080013a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	220c      	movs	r2, #12
 8001394:	605a      	str	r2, [r3, #4]
          break;
 8001396:	e011      	b.n	80013bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2212      	movs	r2, #18
 800139c:	605a      	str	r2, [r3, #4]
          break;
 800139e:	e00d      	b.n	80013bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2218      	movs	r2, #24
 80013a4:	605a      	str	r2, [r3, #4]
          break;
 80013a6:	e009      	b.n	80013bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	605a      	str	r2, [r3, #4]
          break;
 80013b0:	e004      	b.n	80013bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2206      	movs	r2, #6
 80013b6:	605a      	str	r2, [r3, #4]
          break;
 80013b8:	e000      	b.n	80013bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80013ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	f7ff fd5f 	bl	8000e8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fe37 	bl	8001046 <LL_ADC_REG_IsConversionOngoing>
 80013d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe43 	bl	800106c <LL_ADC_INJ_IsConversionOngoing>
 80013e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 81c1 	bne.w	8001776 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 81bc 	bne.w	8001776 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001406:	d10f      	bne.n	8001428 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fd66 	bl	8000ee4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fd20 	bl	8000e66 <LL_ADC_SetSamplingTimeCommonConfig>
 8001426:	e00e      	b.n	8001446 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	461a      	mov	r2, r3
 8001436:	f7ff fd55 	bl	8000ee4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fd10 	bl	8000e66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d00a      	beq.n	800147e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6919      	ldr	r1, [r3, #16]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001478:	f7ff fca0 	bl	8000dbc <LL_ADC_SetOffset>
 800147c:	e17b      	b.n	8001776 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fcbd 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10a      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x17e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fcb2 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	0e9b      	lsrs	r3, r3, #26
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	e01e      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x1bc>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fca7 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80014d8:	2320      	movs	r3, #32
 80014da:	e004      	b.n	80014e6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80014dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x1d4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0e9b      	lsrs	r3, r3, #26
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	e018      	b.n	8001532 <HAL_ADC_ConfigChannel+0x206>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800151c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001524:	2320      	movs	r3, #32
 8001526:	e004      	b.n	8001532 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001528:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001532:	429a      	cmp	r2, r3
 8001534:	d106      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fc76 	bl	8000e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fc5a 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10a      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x244>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2101      	movs	r1, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fc4f 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	0e9b      	lsrs	r3, r3, #26
 800156a:	f003 021f 	and.w	r2, r3, #31
 800156e:	e01e      	b.n	80015ae <HAL_ADC_ConfigChannel+0x282>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fc44 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800158e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800159e:	2320      	movs	r3, #32
 80015a0:	e004      	b.n	80015ac <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80015a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x29a>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0e9b      	lsrs	r3, r3, #26
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	e018      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x2cc>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80015da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80015e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80015ea:	2320      	movs	r3, #32
 80015ec:	e004      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80015ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d106      	bne.n	800160a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fc13 	bl	8000e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2102      	movs	r1, #2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fbf7 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10a      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x30a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2102      	movs	r1, #2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fbec 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	0e9b      	lsrs	r3, r3, #26
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	e01e      	b.n	8001674 <HAL_ADC_ConfigChannel+0x348>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2102      	movs	r1, #2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fbe1 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800165c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001664:	2320      	movs	r3, #32
 8001666:	e004      	b.n	8001672 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <HAL_ADC_ConfigChannel+0x360>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0e9b      	lsrs	r3, r3, #26
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	e016      	b.n	80016ba <HAL_ADC_ConfigChannel+0x38e>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800169e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80016a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80016ac:	2320      	movs	r3, #32
 80016ae:	e004      	b.n	80016ba <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80016b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d106      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fbb2 	bl	8000e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2103      	movs	r1, #3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb96 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10a      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x3cc>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2103      	movs	r1, #3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb8b 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	0e9b      	lsrs	r3, r3, #26
 80016f2:	f003 021f 	and.w	r2, r3, #31
 80016f6:	e017      	b.n	8001728 <HAL_ADC_ConfigChannel+0x3fc>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2103      	movs	r1, #3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fb80 	bl	8000e04 <LL_ADC_GetOffsetChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001712:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800171a:	2320      	movs	r3, #32
 800171c:	e003      	b.n	8001726 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800171e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x414>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0e9b      	lsrs	r3, r3, #26
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	e011      	b.n	8001764 <HAL_ADC_ConfigChannel+0x438>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800174e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001750:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001758:	2320      	movs	r3, #32
 800175a:	e003      	b.n	8001764 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800175c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001764:	429a      	cmp	r2, r3
 8001766:	d106      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	2103      	movs	r1, #3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fb5d 	bl	8000e30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fc50 	bl	8001020 <LL_ADC_IsEnabled>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 8140 	bne.w	8001a08 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	461a      	mov	r2, r3
 8001796:	f7ff fbd1 	bl	8000f3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4a8f      	ldr	r2, [pc, #572]	; (80019dc <HAL_ADC_ConfigChannel+0x6b0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	f040 8131 	bne.w	8001a08 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10b      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x4a2>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0e9b      	lsrs	r3, r3, #26
 80017bc:	3301      	adds	r3, #1
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	2b09      	cmp	r3, #9
 80017c4:	bf94      	ite	ls
 80017c6:	2301      	movls	r3, #1
 80017c8:	2300      	movhi	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	e019      	b.n	8001802 <HAL_ADC_ConfigChannel+0x4d6>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80017dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017de:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80017e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80017e6:	2320      	movs	r3, #32
 80017e8:	e003      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80017ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	bf94      	ite	ls
 80017fc:	2301      	movls	r3, #1
 80017fe:	2300      	movhi	r3, #0
 8001800:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001802:	2b00      	cmp	r3, #0
 8001804:	d079      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800180e:	2b00      	cmp	r3, #0
 8001810:	d107      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x4f6>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	0e9b      	lsrs	r3, r3, #26
 8001818:	3301      	adds	r3, #1
 800181a:	069b      	lsls	r3, r3, #26
 800181c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001820:	e015      	b.n	800184e <HAL_ADC_ConfigChannel+0x522>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001832:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800183a:	2320      	movs	r3, #32
 800183c:	e003      	b.n	8001846 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3301      	adds	r3, #1
 8001848:	069b      	lsls	r3, r3, #26
 800184a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_ADC_ConfigChannel+0x542>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0e9b      	lsrs	r3, r3, #26
 8001860:	3301      	adds	r3, #1
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	e017      	b.n	800189e <HAL_ADC_ConfigChannel+0x572>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800187c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001886:	2320      	movs	r3, #32
 8001888:	e003      	b.n	8001892 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800188a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	ea42 0103 	orr.w	r1, r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10a      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x598>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0e9b      	lsrs	r3, r3, #26
 80018b4:	3301      	adds	r3, #1
 80018b6:	f003 021f 	and.w	r2, r3, #31
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	051b      	lsls	r3, r3, #20
 80018c2:	e018      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x5ca>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80018d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80018d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80018dc:	2320      	movs	r3, #32
 80018de:	e003      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80018e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	f003 021f 	and.w	r2, r3, #31
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f6:	430b      	orrs	r3, r1
 80018f8:	e081      	b.n	80019fe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	2b00      	cmp	r3, #0
 8001904:	d107      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x5ea>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0e9b      	lsrs	r3, r3, #26
 800190c:	3301      	adds	r3, #1
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001914:	e015      	b.n	8001942 <HAL_ADC_ConfigChannel+0x616>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e003      	b.n	800193a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	069b      	lsls	r3, r3, #26
 800193e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x636>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0e9b      	lsrs	r3, r3, #26
 8001954:	3301      	adds	r3, #1
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	e017      	b.n	8001992 <HAL_ADC_ConfigChannel+0x666>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	61fb      	str	r3, [r7, #28]
  return result;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e003      	b.n	8001986 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	ea42 0103 	orr.w	r1, r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_ADC_ConfigChannel+0x692>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e9b      	lsrs	r3, r3, #26
 80019a8:	3301      	adds	r3, #1
 80019aa:	f003 021f 	and.w	r2, r3, #31
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	3b1e      	subs	r3, #30
 80019b6:	051b      	lsls	r3, r3, #20
 80019b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019bc:	e01e      	b.n	80019fc <HAL_ADC_ConfigChannel+0x6d0>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	613b      	str	r3, [r7, #16]
  return result;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d104      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80019d6:	2320      	movs	r3, #32
 80019d8:	e006      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x6bc>
 80019da:	bf00      	nop
 80019dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	f003 021f 	and.w	r2, r3, #31
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	3b1e      	subs	r3, #30
 80019f6:	051b      	lsls	r3, r3, #20
 80019f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019fc:	430b      	orrs	r3, r1
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	6892      	ldr	r2, [r2, #8]
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff fa6e 	bl	8000ee4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_ADC_ConfigChannel+0x7d8>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d06c      	beq.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a14:	483c      	ldr	r0, [pc, #240]	; (8001b08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a16:	f7ff f9c3 	bl	8000da0 <LL_ADC_GetCommonPathInternalCh>
 8001a1a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <HAL_ADC_ConfigChannel+0x7e0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d127      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d121      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a35      	ldr	r2, [pc, #212]	; (8001b10 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d157      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a46:	4619      	mov	r1, r3
 8001a48:	482f      	ldr	r0, [pc, #188]	; (8001b08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001a4a:	f7ff f996 	bl	8000d7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a4e:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_ADC_ConfigChannel+0x7e8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <HAL_ADC_ConfigChannel+0x7ec>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a76:	e03a      	b.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a27      	ldr	r2, [pc, #156]	; (8001b1c <HAL_ADC_ConfigChannel+0x7f0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d113      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x77e>
 8001a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_ADC_ConfigChannel+0x7e4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d12a      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4819      	ldr	r0, [pc, #100]	; (8001b08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001aa4:	f7ff f969 	bl	8000d7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001aa8:	e021      	b.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d11c      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d116      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d111      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ad6:	f7ff f950 	bl	8000d7a <LL_ADC_SetCommonPathInternalCh>
 8001ada:	e008      	b.n	8001aee <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001af6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	37d8      	adds	r7, #216	; 0xd8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	80080000 	.word	0x80080000
 8001b08:	50040300 	.word	0x50040300
 8001b0c:	c7520000 	.word	0xc7520000
 8001b10:	50040000 	.word	0x50040000
 8001b14:	20000000 	.word	0x20000000
 8001b18:	053e2d63 	.word	0x053e2d63
 8001b1c:	cb840000 	.word	0xcb840000
 8001b20:	80000001 	.word	0x80000001

08001b24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0ed      	b.n	8001d12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe fc60 	bl	8000408 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b58:	f7ff f8f0 	bl	8000d3c <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b5e:	e012      	b.n	8001b86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b60:	f7ff f8ec 	bl	8000d3c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b0a      	cmp	r3, #10
 8001b6c:	d90b      	bls.n	8001b86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0c5      	b.n	8001d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0e5      	beq.n	8001b60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0202 	bic.w	r2, r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba4:	f7ff f8ca 	bl	8000d3c <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001baa:	e012      	b.n	8001bd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bac:	f7ff f8c6 	bl	8000d3c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b0a      	cmp	r3, #10
 8001bb8:	d90b      	bls.n	8001bd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2205      	movs	r2, #5
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e09f      	b.n	8001d12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e5      	bne.n	8001bac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e1b      	ldrb	r3, [r3, #24]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e007      	b.n	8001c0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7e5b      	ldrb	r3, [r3, #25]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e007      	b.n	8001c34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7e9b      	ldrb	r3, [r3, #26]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d108      	bne.n	8001c4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e007      	b.n	8001c5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0220 	bic.w	r2, r2, #32
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7edb      	ldrb	r3, [r3, #27]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d108      	bne.n	8001c78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0210 	bic.w	r2, r2, #16
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e007      	b.n	8001c88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0210 	orr.w	r2, r2, #16
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7f1b      	ldrb	r3, [r3, #28]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d108      	bne.n	8001ca2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0208 	orr.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e007      	b.n	8001cb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0208 	bic.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7f5b      	ldrb	r3, [r3, #29]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d108      	bne.n	8001ccc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0204 	orr.w	r2, r2, #4
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e007      	b.n	8001cdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0204 	bic.w	r2, r2, #4
 8001cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	ea42 0103 	orr.w	r1, r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d003      	beq.n	8001d40 <HAL_CAN_ConfigFilter+0x26>
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	f040 80aa 	bne.w	8001e94 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2201      	movs	r2, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d123      	bne.n	8001dc2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	401a      	ands	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3248      	adds	r2, #72	; 0x48
 8001da2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001db6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001db8:	6979      	ldr	r1, [r7, #20]
 8001dba:	3348      	adds	r3, #72	; 0x48
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d122      	bne.n	8001e10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3248      	adds	r2, #72	; 0x48
 8001df0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e06:	6979      	ldr	r1, [r7, #20]
 8001e08:	3348      	adds	r3, #72	; 0x48
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e2a:	e007      	b.n	8001e3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e86:	f023 0201 	bic.w	r2, r3, #1
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e006      	b.n	8001ea2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
  }
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d12e      	bne.n	8001f20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eda:	f7fe ff2f 	bl	8000d3c <HAL_GetTick>
 8001ede:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ee0:	e012      	b.n	8001f08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ee2:	f7fe ff2b 	bl	8000d3c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b0a      	cmp	r3, #10
 8001eee:	d90b      	bls.n	8001f08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2205      	movs	r2, #5
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e012      	b.n	8001f2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1e5      	bne.n	8001ee2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e006      	b.n	8001f2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b089      	sub	sp, #36	; 0x24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f54:	7ffb      	ldrb	r3, [r7, #31]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d003      	beq.n	8001f62 <HAL_CAN_AddTxMessage+0x2c>
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	f040 80ad 	bne.w	80020bc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10a      	bne.n	8001f82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8095 	beq.w	80020ac <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	0e1b      	lsrs	r3, r3, #24
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	409a      	lsls	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	6809      	ldr	r1, [r1, #0]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	440b      	add	r3, r1
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e00f      	b.n	8001fda <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fc4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fca:	68f9      	ldr	r1, [r7, #12]
 8001fcc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001fce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3318      	adds	r3, #24
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	440b      	add	r3, r1
 8001fd8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	440b      	add	r3, r1
 8001fea:	3304      	adds	r3, #4
 8001fec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	7d1b      	ldrb	r3, [r3, #20]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d111      	bne.n	800201a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	6811      	ldr	r1, [r2, #0]
 800200a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3318      	adds	r3, #24
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	440b      	add	r3, r1
 8002016:	3304      	adds	r3, #4
 8002018:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3307      	adds	r3, #7
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	061a      	lsls	r2, r3, #24
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3306      	adds	r3, #6
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3305      	adds	r3, #5
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	4313      	orrs	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	3204      	adds	r2, #4
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	4610      	mov	r0, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	6811      	ldr	r1, [r2, #0]
 8002042:	ea43 0200 	orr.w	r2, r3, r0
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	440b      	add	r3, r1
 800204c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002050:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3303      	adds	r3, #3
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	061a      	lsls	r2, r3, #24
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3302      	adds	r3, #2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	4313      	orrs	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	4610      	mov	r0, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	6811      	ldr	r1, [r2, #0]
 8002078:	ea43 0200 	orr.w	r2, r3, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	440b      	add	r3, r1
 8002082:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002086:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3318      	adds	r3, #24
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4413      	add	r3, r2
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	6811      	ldr	r1, [r2, #0]
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3318      	adds	r3, #24
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	440b      	add	r3, r1
 80020a6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e00e      	b.n	80020ca <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e006      	b.n	80020ca <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d002      	beq.n	80020f4 <HAL_CAN_ActivateNotification+0x1e>
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d109      	bne.n	8002108 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6959      	ldr	r1, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e006      	b.n	8002116 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002254:	d301      	bcc.n	800225a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002256:	2301      	movs	r3, #1
 8002258:	e00f      	b.n	800227a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <SysTick_Config+0x40>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002262:	210f      	movs	r1, #15
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f7ff ff8e 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SysTick_Config+0x40>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Config+0x40>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff47 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b0:	f7ff ff5c 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f7ff ff8e 	bl	80021dc <NVIC_EncodePriority>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff5d 	bl	8002188 <__NVIC_SetPriority>
}
 80022ce:	bf00      	nop
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffb0 	bl	8002244 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fe:	e154      	b.n	80025aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8146 	beq.w	80025a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d005      	beq.n	8002330 <HAL_GPIO_Init+0x40>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d130      	bne.n	8002392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002366:	2201      	movs	r2, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f003 0201 	and.w	r2, r3, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b03      	cmp	r3, #3
 800239c:	d017      	beq.n	80023ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d123      	bne.n	8002422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	08da      	lsrs	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3208      	adds	r2, #8
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0203 	and.w	r2, r3, #3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80a0 	beq.w	80025a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002464:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_GPIO_Init+0x2d8>)
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <HAL_GPIO_Init+0x2d8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6613      	str	r3, [r2, #96]	; 0x60
 8002470:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_GPIO_Init+0x2d8>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800247c:	4a53      	ldr	r2, [pc, #332]	; (80025cc <HAL_GPIO_Init+0x2dc>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024a6:	d019      	beq.n	80024dc <HAL_GPIO_Init+0x1ec>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x2e0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_GPIO_Init+0x1e8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2e4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00d      	beq.n	80024d4 <HAL_GPIO_Init+0x1e4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_GPIO_Init+0x2e8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d007      	beq.n	80024d0 <HAL_GPIO_Init+0x1e0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a46      	ldr	r2, [pc, #280]	; (80025dc <HAL_GPIO_Init+0x2ec>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_GPIO_Init+0x1dc>
 80024c8:	2304      	movs	r3, #4
 80024ca:	e008      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024cc:	2307      	movs	r3, #7
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d0:	2303      	movs	r3, #3
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024dc:	2300      	movs	r3, #0
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ee:	4937      	ldr	r1, [pc, #220]	; (80025cc <HAL_GPIO_Init+0x2dc>)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024fc:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002520:	4a2f      	ldr	r2, [pc, #188]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800254a:	4a25      	ldr	r2, [pc, #148]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_GPIO_Init+0x2f0>)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3301      	adds	r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f aea3 	bne.w	8002300 <HAL_GPIO_Init+0x10>
  }
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	48000400 	.word	0x48000400
 80025d4:	48000800 	.word	0x48000800
 80025d8:	48000c00 	.word	0x48000c00
 80025dc:	48001000 	.word	0x48001000
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002600:	e002      	b.n	8002608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e081      	b.n	800272a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe f8d6 	bl	80007ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	; 0x24
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002664:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002674:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d107      	bne.n	800268e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	e006      	b.n	800269c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800269a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d104      	bne.n	80026ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	461a      	mov	r2, r3
 8002740:	460b      	mov	r3, r1
 8002742:	817b      	strh	r3, [r7, #10]
 8002744:	4613      	mov	r3, r2
 8002746:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	f040 80da 	bne.w	800290a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_I2C_Master_Transmit+0x30>
 8002760:	2302      	movs	r3, #2
 8002762:	e0d3      	b.n	800290c <HAL_I2C_Master_Transmit+0x1d8>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800276c:	f7fe fae6 	bl	8000d3c <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2319      	movs	r3, #25
 8002778:	2201      	movs	r2, #1
 800277a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f8f0 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0be      	b.n	800290c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2221      	movs	r2, #33	; 0x21
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2210      	movs	r2, #16
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	893a      	ldrh	r2, [r7, #8]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2bff      	cmp	r3, #255	; 0xff
 80027be:	d90e      	bls.n	80027de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_I2C_Master_Transmit+0x1e0>)
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fa6c 	bl	8002cb4 <I2C_TransferConfig>
 80027dc:	e06c      	b.n	80028b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	4b48      	ldr	r3, [pc, #288]	; (8002914 <HAL_I2C_Master_Transmit+0x1e0>)
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fa5b 	bl	8002cb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027fe:	e05b      	b.n	80028b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	6a39      	ldr	r1, [r7, #32]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f8ed 	bl	80029e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e07b      	b.n	800290c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d034      	beq.n	80028b8 <HAL_I2C_Master_Transmit+0x184>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d130      	bne.n	80028b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f87f 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e04d      	b.n	800290c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2bff      	cmp	r3, #255	; 0xff
 8002878:	d90e      	bls.n	8002898 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	22ff      	movs	r2, #255	; 0xff
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	b2da      	uxtb	r2, r3
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	2300      	movs	r3, #0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fa0f 	bl	8002cb4 <I2C_TransferConfig>
 8002896:	e00f      	b.n	80028b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	8979      	ldrh	r1, [r7, #10]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f9fe 	bl	8002cb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d19e      	bne.n	8002800 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	6a39      	ldr	r1, [r7, #32]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f8cc 	bl	8002a64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e01a      	b.n	800290c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2220      	movs	r2, #32
 80028dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_I2C_Master_Transmit+0x1e4>)
 80028ea:	400b      	ands	r3, r1
 80028ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	80002000 	.word	0x80002000
 8002918:	fe00e800 	.word	0xfe00e800

0800291c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d103      	bne.n	800293a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d007      	beq.n	8002958 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	619a      	str	r2, [r3, #24]
  }
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002974:	e022      	b.n	80029bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d01e      	beq.n	80029bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7fe f9dd 	bl	8000d3c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d113      	bne.n	80029bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	f043 0220 	orr.w	r2, r3, #32
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e00f      	b.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d0cd      	beq.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029f0:	e02c      	b.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f870 	bl	8002adc <I2C_IsErrorOccurred>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e02a      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d01e      	beq.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7fe f995 	bl	8000d3c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d113      	bne.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e007      	b.n	8002a5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d1cb      	bne.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a70:	e028      	b.n	8002ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f830 	bl	8002adc <I2C_IsErrorOccurred>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e026      	b.n	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe f959 	bl	8000d3c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d113      	bne.n	8002ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e007      	b.n	8002ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d1cf      	bne.n	8002a72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d075      	beq.n	8002bf4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b10:	e056      	b.n	8002bc0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d052      	beq.n	8002bc0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe f90f 	bl	8000d3c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_IsErrorOccurred+0x54>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d147      	bne.n	8002bc0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b52:	d12e      	bne.n	8002bb2 <I2C_IsErrorOccurred+0xd6>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5a:	d02a      	beq.n	8002bb2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d027      	beq.n	8002bb2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b72:	f7fe f8e3 	bl	8000d3c <HAL_GetTick>
 8002b76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b78:	e01b      	b.n	8002bb2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b7a:	f7fe f8df 	bl	8000d3c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b19      	cmp	r3, #25
 8002b86:	d914      	bls.n	8002bb2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d1dc      	bne.n	8002b7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d003      	beq.n	8002bd6 <I2C_IsErrorOccurred+0xfa>
 8002bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d09d      	beq.n	8002b12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2220      	movs	r2, #32
 8002be4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f043 0308 	orr.w	r3, r3, #8
 8002c2e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01c      	beq.n	8002ca4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff fe56 	bl	800291c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <I2C_IsErrorOccurred+0x1d4>)
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3728      	adds	r7, #40	; 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	fe00e800 	.word	0xfe00e800

08002cb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	817b      	strh	r3, [r7, #10]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ccc:	7a7b      	ldrb	r3, [r7, #9]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ce2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	0d5b      	lsrs	r3, r3, #21
 8002cee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <I2C_TransferConfig+0x60>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	ea02 0103 	and.w	r1, r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	03ff63ff 	.word	0x03ff63ff

08002d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d138      	bne.n	8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e032      	b.n	8002da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d139      	bne.n	8002e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e033      	b.n	8002e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2224      	movs	r2, #36	; 0x24
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40007000 	.word	0x40007000

08002e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e72:	d130      	bne.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e80:	d038      	beq.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2232      	movs	r2, #50	; 0x32
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	4a1b      	ldr	r2, [pc, #108]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0c9b      	lsrs	r3, r3, #18
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea8:	e002      	b.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d102      	bne.n	8002ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f2      	bne.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d110      	bne.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e00f      	b.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee2:	d007      	beq.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40007000 	.word	0x40007000
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	431bde83 	.word	0x431bde83

08002f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f000 bc02 	b.w	8003728 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f24:	4b96      	ldr	r3, [pc, #600]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f2e:	4b94      	ldr	r3, [pc, #592]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80e4 	beq.w	800310e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_RCC_OscConfig+0x4c>
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b0c      	cmp	r3, #12
 8002f50:	f040 808b 	bne.w	800306a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 8087 	bne.w	800306a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f5c:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_OscConfig+0x64>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e3d9      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	4b81      	ldr	r3, [pc, #516]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_RCC_OscConfig+0x7e>
 8002f84:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f8c:	e005      	b.n	8002f9a <HAL_RCC_OscConfig+0x8a>
 8002f8e:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d223      	bcs.n	8002fe6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fd54 	bl	8003a50 <RCC_SetFlashLatencyFromMSIRange>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e3ba      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a72      	ldr	r2, [pc, #456]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b70      	ldr	r3, [pc, #448]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	496d      	ldr	r1, [pc, #436]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	4968      	ldr	r1, [pc, #416]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
 8002fe4:	e025      	b.n	8003032 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe6:	4b66      	ldr	r3, [pc, #408]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a65      	ldr	r2, [pc, #404]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4960      	ldr	r1, [pc, #384]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003004:	4b5e      	ldr	r3, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	495b      	ldr	r1, [pc, #364]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fd14 	bl	8003a50 <RCC_SetFlashLatencyFromMSIRange>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e37a      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003032:	f000 fc81 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b51      	ldr	r3, [pc, #324]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4950      	ldr	r1, [pc, #320]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a4e      	ldr	r2, [pc, #312]	; (8003188 <HAL_RCC_OscConfig+0x278>)
 8003050:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003052:	4b4e      	ldr	r3, [pc, #312]	; (800318c <HAL_RCC_OscConfig+0x27c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fe20 	bl	8000c9c <HAL_InitTick>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d052      	beq.n	800310c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	e35e      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d032      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a42      	ldr	r2, [pc, #264]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800307e:	f7fd fe5d 	bl	8000d3c <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003086:	f7fd fe59 	bl	8000d3c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e347      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003098:	4b39      	ldr	r3, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a4:	4b36      	ldr	r3, [pc, #216]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a35      	ldr	r2, [pc, #212]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030aa:	f043 0308 	orr.w	r3, r3, #8
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b33      	ldr	r3, [pc, #204]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4930      	ldr	r1, [pc, #192]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	492b      	ldr	r1, [pc, #172]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
 80030d6:	e01a      	b.n	800310e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e4:	f7fd fe2a 	bl	8000d3c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ec:	f7fd fe26 	bl	8000d3c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e314      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1dc>
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800310c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d073      	beq.n	8003202 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x21c>
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d10e      	bne.n	8003144 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d10b      	bne.n	8003144 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d063      	beq.n	8003200 <HAL_RCC_OscConfig+0x2f0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d15f      	bne.n	8003200 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e2f1      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x24c>
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e025      	b.n	80031a8 <HAL_RCC_OscConfig+0x298>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003164:	d114      	bne.n	8003190 <HAL_RCC_OscConfig+0x280>
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 800316c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a02      	ldr	r2, [pc, #8]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e013      	b.n	80031a8 <HAL_RCC_OscConfig+0x298>
 8003180:	40021000 	.word	0x40021000
 8003184:	08004498 	.word	0x08004498
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004
 8003190:	4ba0      	ldr	r3, [pc, #640]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a9f      	ldr	r2, [pc, #636]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b9d      	ldr	r3, [pc, #628]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a9c      	ldr	r2, [pc, #624]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fd fdc4 	bl	8000d3c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fd fdc0 	bl	8000d3c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e2ae      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	4b92      	ldr	r3, [pc, #584]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2a8>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fd fdb0 	bl	8000d3c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fd fdac 	bl	8000d3c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e29a      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f2:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2d0>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d060      	beq.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d005      	beq.n	8003220 <HAL_RCC_OscConfig+0x310>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d119      	bne.n	800324e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d116      	bne.n	800324e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003220:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x328>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e277      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b76      	ldr	r3, [pc, #472]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	061b      	lsls	r3, r3, #24
 8003246:	4973      	ldr	r1, [pc, #460]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324c:	e040      	b.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d023      	beq.n	800329e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003256:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6e      	ldr	r2, [pc, #440]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fd fd6b 	bl	8000d3c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326a:	f7fd fd67 	bl	8000d3c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e255      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b62      	ldr	r3, [pc, #392]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	495f      	ldr	r1, [pc, #380]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	e018      	b.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5c      	ldr	r2, [pc, #368]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80032a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fd fd47 	bl	8000d3c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fd fd43 	bl	8000d3c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e231      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d03c      	beq.n	8003356 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01c      	beq.n	800331e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e4:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ea:	4a4a      	ldr	r2, [pc, #296]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd fd22 	bl	8000d3c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fd fd1e 	bl	8000d3c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e20c      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ef      	beq.n	80032fc <HAL_RCC_OscConfig+0x3ec>
 800331c:	e01b      	b.n	8003356 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331e:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003324:	4a3b      	ldr	r2, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fd fd05 	bl	8000d3c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003336:	f7fd fd01 	bl	8000d3c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e1ef      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003348:	4b32      	ldr	r3, [pc, #200]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ef      	bne.n	8003336 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80a6 	beq.w	80034b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003368:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10d      	bne.n	8003390 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	4a26      	ldr	r2, [pc, #152]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	; 0x58
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338c:	2301      	movs	r3, #1
 800338e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_RCC_OscConfig+0x508>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d118      	bne.n	80033ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <HAL_RCC_OscConfig+0x508>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_RCC_OscConfig+0x508>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a8:	f7fd fcc8 	bl	8000d3c <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b0:	f7fd fcc4 	bl	8000d3c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e1b2      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_RCC_OscConfig+0x508>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d108      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4d8>
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e6:	e029      	b.n	800343c <HAL_RCC_OscConfig+0x52c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b05      	cmp	r3, #5
 80033ee:	d115      	bne.n	800341c <HAL_RCC_OscConfig+0x50c>
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f043 0304 	orr.w	r3, r3, #4
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a03      	ldr	r2, [pc, #12]	; (8003414 <HAL_RCC_OscConfig+0x504>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003410:	e014      	b.n	800343c <HAL_RCC_OscConfig+0x52c>
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	40007000 	.word	0x40007000
 800341c:	4b9a      	ldr	r3, [pc, #616]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	4a99      	ldr	r2, [pc, #612]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800342c:	4b96      	ldr	r3, [pc, #600]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	4a95      	ldr	r2, [pc, #596]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d016      	beq.n	8003472 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd fc7a 	bl	8000d3c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fd fc76 	bl	8000d3c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e162      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003462:	4b89      	ldr	r3, [pc, #548]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ed      	beq.n	800344c <HAL_RCC_OscConfig+0x53c>
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7fd fc63 	bl	8000d3c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fc5f 	bl	8000d3c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e14b      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003490:	4b7d      	ldr	r3, [pc, #500]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ed      	bne.n	800347a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349e:	7ffb      	ldrb	r3, [r7, #31]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a4:	4b78      	ldr	r3, [pc, #480]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	4a77      	ldr	r2, [pc, #476]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03c      	beq.n	8003536 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01c      	beq.n	80034fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034c4:	4b70      	ldr	r3, [pc, #448]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80034c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ca:	4a6f      	ldr	r2, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fd fc32 	bl	8000d3c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034dc:	f7fd fc2e 	bl	8000d3c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e11c      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ee:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80034f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <HAL_RCC_OscConfig+0x5cc>
 80034fc:	e01b      	b.n	8003536 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034fe:	4b62      	ldr	r3, [pc, #392]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003504:	4a60      	ldr	r2, [pc, #384]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003506:	f023 0301 	bic.w	r3, r3, #1
 800350a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fd fc15 	bl	8000d3c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003516:	f7fd fc11 	bl	8000d3c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0ff      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003528:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 800352a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ef      	bne.n	8003516 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80f3 	beq.w	8003726 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	2b02      	cmp	r3, #2
 8003546:	f040 80c9 	bne.w	80036dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800354a:	4b4f      	ldr	r3, [pc, #316]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 0203 	and.w	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	429a      	cmp	r2, r3
 800355c:	d12c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	3b01      	subs	r3, #1
 800356a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d123      	bne.n	80035b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d11b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d113      	bne.n	80035b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	3b01      	subs	r3, #1
 800359e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d109      	bne.n	80035b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d06b      	beq.n	8003690 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d062      	beq.n	8003684 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035be:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0ac      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2d      	ldr	r2, [pc, #180]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80035d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035da:	f7fd fbaf 	bl	8000d3c <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd fbab 	bl	8000d3c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e099      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_RCC_OscConfig+0x77c>)
 8003606:	4013      	ands	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003610:	3a01      	subs	r2, #1
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800361a:	0212      	lsls	r2, r2, #8
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003622:	0852      	lsrs	r2, r2, #1
 8003624:	3a01      	subs	r2, #1
 8003626:	0552      	lsls	r2, r2, #21
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800362e:	0852      	lsrs	r2, r2, #1
 8003630:	3a01      	subs	r2, #1
 8003632:	0652      	lsls	r2, r2, #25
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800363a:	06d2      	lsls	r2, r2, #27
 800363c:	430a      	orrs	r2, r1
 800363e:	4912      	ldr	r1, [pc, #72]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003640:	4313      	orrs	r3, r2
 8003642:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003650:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a0c      	ldr	r2, [pc, #48]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800365c:	f7fd fb6e 	bl	8000d3c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd fb6a 	bl	8000d3c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e058      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_RCC_OscConfig+0x778>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003682:	e050      	b.n	8003726 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e04f      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
 8003688:	40021000 	.word	0x40021000
 800368c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d144      	bne.n	8003726 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a20      	ldr	r2, [pc, #128]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b4:	f7fd fb42 	bl	8000d3c <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fd fb3e 	bl	8000d3c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e02c      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x7ac>
 80036da:	e024      	b.n	8003726 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d01f      	beq.n	8003722 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 80036e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fd fb25 	bl	8000d3c <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fd fb21 	bl	8000d3c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e00f      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	4905      	ldr	r1, [pc, #20]	; (8003730 <HAL_RCC_OscConfig+0x820>)
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_OscConfig+0x824>)
 800371c:	4013      	ands	r3, r2
 800371e:	60cb      	str	r3, [r1, #12]
 8003720:	e001      	b.n	8003726 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	feeefffc 	.word	0xfeeefffc

08003738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0e7      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b75      	ldr	r3, [pc, #468]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b72      	ldr	r3, [pc, #456]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4970      	ldr	r1, [pc, #448]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b6e      	ldr	r3, [pc, #440]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0cf      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d010      	beq.n	80037aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	4b66      	ldr	r3, [pc, #408]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003794:	429a      	cmp	r2, r3
 8003796:	d908      	bls.n	80037aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b63      	ldr	r3, [pc, #396]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4960      	ldr	r1, [pc, #384]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04c      	beq.n	8003850 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d121      	bne.n	800380e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0a6      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d6:	4b54      	ldr	r3, [pc, #336]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d115      	bne.n	800380e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e09a      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ee:	4b4e      	ldr	r3, [pc, #312]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e08e      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e086      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800380e:	4b46      	ldr	r3, [pc, #280]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f023 0203 	bic.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4943      	ldr	r1, [pc, #268]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	4313      	orrs	r3, r2
 800381e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fd fa8c 	bl	8000d3c <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	e00a      	b.n	800383e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003828:	f7fd fa88 	bl	8000d3c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e06e      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 020c 	and.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	429a      	cmp	r2, r3
 800384e:	d1eb      	bne.n	8003828 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003868:	429a      	cmp	r2, r3
 800386a:	d208      	bcs.n	800387e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b2e      	ldr	r3, [pc, #184]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	492b      	ldr	r1, [pc, #172]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d210      	bcs.n	80038ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 0207 	bic.w	r2, r3, #7
 8003894:	4923      	ldr	r1, [pc, #140]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_ClockConfig+0x1ec>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e036      	b.n	800391c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4918      	ldr	r1, [pc, #96]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4910      	ldr	r1, [pc, #64]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ec:	f000 f824 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_RCC_ClockConfig+0x1f0>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	490b      	ldr	r1, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x1f4>)
 80038fe:	5ccb      	ldrb	r3, [r1, r3]
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1f8>)
 800390a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1fc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd f9c3 	bl	8000c9c <HAL_InitTick>
 8003916:	4603      	mov	r3, r0
 8003918:	72fb      	strb	r3, [r7, #11]

  return status;
 800391a:	7afb      	ldrb	r3, [r7, #11]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40022000 	.word	0x40022000
 8003928:	40021000 	.word	0x40021000
 800392c:	08004498 	.word	0x08004498
 8003930:	20000000 	.word	0x20000000
 8003934:	20000004 	.word	0x20000004

08003938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003950:	4b3b      	ldr	r3, [pc, #236]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0x34>
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d121      	bne.n	80039aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d11e      	bne.n	80039aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003978:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	e005      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003988:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003994:	4a2b      	ldr	r2, [pc, #172]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10d      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	e004      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80039be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d134      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039c6:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0xa6>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d003      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0xac>
 80039dc:	e005      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80039e0:	617b      	str	r3, [r7, #20]
      break;
 80039e2:	e005      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80039e6:	617b      	str	r3, [r7, #20]
      break;
 80039e8:	e002      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	617b      	str	r3, [r7, #20]
      break;
 80039ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	3301      	adds	r3, #1
 80039fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	fb03 f202 	mul.w	r2, r3, r2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	0e5b      	lsrs	r3, r3, #25
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	3301      	adds	r3, #1
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a30:	69bb      	ldr	r3, [r7, #24]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3724      	adds	r7, #36	; 0x24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	080044a8 	.word	0x080044a8
 8003a48:	00f42400 	.word	0x00f42400
 8003a4c:	007a1200 	.word	0x007a1200

08003a50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a5c:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a68:	f7ff f9ee 	bl	8002e48 <HAL_PWREx_GetVoltageRange>
 8003a6c:	6178      	str	r0, [r7, #20]
 8003a6e:	e014      	b.n	8003a9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a70:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7c:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a88:	f7ff f9de 	bl	8002e48 <HAL_PWREx_GetVoltageRange>
 8003a8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa0:	d10b      	bne.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b80      	cmp	r3, #128	; 0x80
 8003aa6:	d919      	bls.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2ba0      	cmp	r3, #160	; 0xa0
 8003aac:	d902      	bls.n	8003ab4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aae:	2302      	movs	r3, #2
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e013      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	e010      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b80      	cmp	r3, #128	; 0x80
 8003abe:	d902      	bls.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e00a      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b80      	cmp	r3, #128	; 0x80
 8003aca:	d102      	bne.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003acc:	2302      	movs	r3, #2
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e004      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d101      	bne.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad8:	2301      	movs	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 0207 	bic.w	r2, r3, #7
 8003ae4:	4909      	ldr	r1, [pc, #36]	; (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40022000 	.word	0x40022000

08003b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b18:	2300      	movs	r3, #0
 8003b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d031      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b34:	d01a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b3a:	d814      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b44:	d10f      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b46:	4b5d      	ldr	r3, [pc, #372]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4a5c      	ldr	r2, [pc, #368]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b52:	e00c      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fa44 	bl	8003fe8 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b64:	e003      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	74fb      	strb	r3, [r7, #19]
      break;
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b74:	4b51      	ldr	r3, [pc, #324]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	494e      	ldr	r1, [pc, #312]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b8a:	e001      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 809e 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ba2:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	4a3f      	ldr	r2, [pc, #252]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a39      	ldr	r2, [pc, #228]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be0:	f7fd f8ac 	bl	8000d3c <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003be6:	e009      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be8:	f7fd f8a8 	bl	8000d3c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d902      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	74fb      	strb	r3, [r7, #19]
        break;
 8003bfa:	e005      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bfc:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ef      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d15a      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01e      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d019      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c36:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c56:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d016      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd f868 	bl	8000d3c <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fd f864 	bl	8000d3c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d902      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	74fb      	strb	r3, [r7, #19]
            break;
 8003c86:	e006      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c88:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0ec      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003caa:	4904      	ldr	r1, [pc, #16]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cb2:	e009      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	74bb      	strb	r3, [r7, #18]
 8003cb8:	e006      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc8:	7c7b      	ldrb	r3, [r7, #17]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cce:	4b9e      	ldr	r3, [pc, #632]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	4a9d      	ldr	r2, [pc, #628]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce6:	4b98      	ldr	r3, [pc, #608]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f023 0203 	bic.w	r2, r3, #3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4994      	ldr	r1, [pc, #592]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d08:	4b8f      	ldr	r3, [pc, #572]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f023 020c 	bic.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	498c      	ldr	r1, [pc, #560]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d2a:	4b87      	ldr	r3, [pc, #540]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	4983      	ldr	r1, [pc, #524]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	497b      	ldr	r1, [pc, #492]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4972      	ldr	r1, [pc, #456]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d90:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	496a      	ldr	r1, [pc, #424]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003db2:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	4961      	ldr	r1, [pc, #388]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd4:	4b5c      	ldr	r3, [pc, #368]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	4959      	ldr	r1, [pc, #356]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003df6:	4b54      	ldr	r3, [pc, #336]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	4950      	ldr	r1, [pc, #320]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	4948      	ldr	r1, [pc, #288]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e3a:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	493f      	ldr	r1, [pc, #252]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d028      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6a:	4937      	ldr	r1, [pc, #220]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7c:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a31      	ldr	r2, [pc, #196]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e86:	60d3      	str	r3, [r2, #12]
 8003e88:	e011      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e92:	d10c      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f8a4 	bl	8003fe8 <RCCEx_PLLSAI1_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d028      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	491f      	ldr	r1, [pc, #124]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed8:	d106      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee4:	60d3      	str	r3, [r2, #12]
 8003ee6:	e011      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f875 	bl	8003fe8 <RCCEx_PLLSAI1_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d02b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	4908      	ldr	r1, [pc, #32]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f36:	d109      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a02      	ldr	r2, [pc, #8]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f42:	60d3      	str	r3, [r2, #12]
 8003f44:	e014      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f843 	bl	8003fe8 <RCCEx_PLLSAI1_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01c      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	4916      	ldr	r1, [pc, #88]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f820 	bl	8003fe8 <RCCEx_PLLSAI1_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	4904      	ldr	r1, [pc, #16]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ff6:	4b74      	ldr	r3, [pc, #464]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004002:	4b71      	ldr	r3, [pc, #452]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0203 	and.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d10d      	bne.n	800402e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
       ||
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800401a:	4b6b      	ldr	r3, [pc, #428]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
       ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d047      	beq.n	80040be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
 8004032:	e044      	b.n	80040be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d018      	beq.n	800406e <RCCEx_PLLSAI1_Config+0x86>
 800403c:	2b03      	cmp	r3, #3
 800403e:	d825      	bhi.n	800408c <RCCEx_PLLSAI1_Config+0xa4>
 8004040:	2b01      	cmp	r3, #1
 8004042:	d002      	beq.n	800404a <RCCEx_PLLSAI1_Config+0x62>
 8004044:	2b02      	cmp	r3, #2
 8004046:	d009      	beq.n	800405c <RCCEx_PLLSAI1_Config+0x74>
 8004048:	e020      	b.n	800408c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800404a:	4b5f      	ldr	r3, [pc, #380]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11d      	bne.n	8004092 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800405a:	e01a      	b.n	8004092 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800405c:	4b5a      	ldr	r3, [pc, #360]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d116      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406c:	e013      	b.n	8004096 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800406e:	4b56      	ldr	r3, [pc, #344]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800407a:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800408a:	e006      	b.n	800409a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e004      	b.n	800409c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004092:	bf00      	nop
 8004094:	e002      	b.n	800409c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800409a:	bf00      	nop
    }

    if(status == HAL_OK)
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040a2:	4b49      	ldr	r3, [pc, #292]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	430b      	orrs	r3, r1
 80040b8:	4943      	ldr	r1, [pc, #268]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d17c      	bne.n	80041be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040c4:	4b40      	ldr	r3, [pc, #256]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d0:	f7fc fe34 	bl	8000d3c <HAL_GetTick>
 80040d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040d6:	e009      	b.n	80040ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d8:	f7fc fe30 	bl	8000d3c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d902      	bls.n	80040ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	73fb      	strb	r3, [r7, #15]
        break;
 80040ea:	e005      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ec:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ef      	bne.n	80040d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d15f      	bne.n	80041be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d110      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800410c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6892      	ldr	r2, [r2, #8]
 8004114:	0211      	lsls	r1, r2, #8
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	06d2      	lsls	r2, r2, #27
 800411c:	430a      	orrs	r2, r1
 800411e:	492a      	ldr	r1, [pc, #168]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	610b      	str	r3, [r1, #16]
 8004124:	e027      	b.n	8004176 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d112      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800412c:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004134:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6892      	ldr	r2, [r2, #8]
 800413c:	0211      	lsls	r1, r2, #8
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6912      	ldr	r2, [r2, #16]
 8004142:	0852      	lsrs	r2, r2, #1
 8004144:	3a01      	subs	r2, #1
 8004146:	0552      	lsls	r2, r2, #21
 8004148:	430a      	orrs	r2, r1
 800414a:	491f      	ldr	r1, [pc, #124]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	610b      	str	r3, [r1, #16]
 8004150:	e011      	b.n	8004176 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800415a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6892      	ldr	r2, [r2, #8]
 8004162:	0211      	lsls	r1, r2, #8
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6952      	ldr	r2, [r2, #20]
 8004168:	0852      	lsrs	r2, r2, #1
 800416a:	3a01      	subs	r2, #1
 800416c:	0652      	lsls	r2, r2, #25
 800416e:	430a      	orrs	r2, r1
 8004170:	4915      	ldr	r1, [pc, #84]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004180:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fc fddb 	bl	8000d3c <HAL_GetTick>
 8004186:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004188:	e009      	b.n	800419e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800418a:	f7fc fdd7 	bl	8000d3c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d902      	bls.n	800419e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	73fb      	strb	r3, [r7, #15]
          break;
 800419c:	e005      	b.n	80041aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ef      	beq.n	800418a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4903      	ldr	r1, [pc, #12]	; (80041c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000

080041cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e095      	b.n	800430a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ee:	d009      	beq.n	8004204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	61da      	str	r2, [r3, #28]
 80041f6:	e005      	b.n	8004204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc fc56 	bl	8000ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004244:	d902      	bls.n	800424c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e002      	b.n	8004252 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800424c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004250:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800425a:	d007      	beq.n	800426c <HAL_SPI_Init+0xa0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004264:	d002      	beq.n	800426c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	ea42 0103 	orr.w	r1, r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	f003 0204 	and.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042e8:	ea42 0103 	orr.w	r1, r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <MAX7300_Init>:
uint8_t PORTREGISTERS[32]; // array of dataport addresses. Only 12-31 will be populated

uint8_t payloadBuffer[128]; // array of bytes to use as payload buffer

// Initialize the device with all required settings
void MAX7300_Init(void) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8

	// initialize the PORTREGISTERS array (addresses as per datasheet)
	int portAddress = 0x2C; // port 12 is 2C, we increment by one
 800431a:	232c      	movs	r3, #44	; 0x2c
 800431c:	60fb      	str	r3, [r7, #12]
	for (int i = 12; i < 32; i++) {
 800431e:	230c      	movs	r3, #12
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	e00c      	b.n	800433e <MAX7300_Init+0x2a>
		PORTREGISTERS[i] = portAddress;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	b2d9      	uxtb	r1, r3
 8004328:	4a35      	ldr	r2, [pc, #212]	; (8004400 <MAX7300_Init+0xec>)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4413      	add	r3, r2
 800432e:	460a      	mov	r2, r1
 8004330:	701a      	strb	r2, [r3, #0]
		portAddress++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
	for (int i = 12; i < 32; i++) {
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	3301      	adds	r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b1f      	cmp	r3, #31
 8004342:	ddef      	ble.n	8004324 <MAX7300_Init+0x10>
	}

	// sending on peripheral I2C1, at the above address, from payloadBuffer, 2 bytes, max timeout time
	payloadBuffer[0] = MAX7300_REG_CONFIG; // define command address as the configuration register
 8004344:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <MAX7300_Init+0xf0>)
 8004346:	2204      	movs	r2, #4
 8004348:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = 0b00000001; // MSB is 0 for no transition detection, LSB is 1 for normal operation
 800434a:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <MAX7300_Init+0xf0>)
 800434c:	2201      	movs	r2, #1
 800434e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 2, 10);
 8004350:	230a      	movs	r3, #10
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2302      	movs	r3, #2
 8004356:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <MAX7300_Init+0xf0>)
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	482b      	ldr	r0, [pc, #172]	; (8004408 <MAX7300_Init+0xf4>)
 800435c:	f7fe f9ea 	bl	8002734 <HAL_I2C_Master_Transmit>
	// now to configure the ports. See tables 1 and 2 in the datasheet

	// part 1: we first have to set the register bits (LSB contained in PORTREGISTERS) to 1 to indicate active high output
	// writing more than 1 byte will automatically increment the command address. So we can just keep writing bytes and it will continue
	// to increment. We write all ports from 12 to 31 this way very quickly (see autoincrementing in datasheet)
	payloadBuffer[0] = PORTREGISTERS[12];
 8004360:	4b27      	ldr	r3, [pc, #156]	; (8004400 <MAX7300_Init+0xec>)
 8004362:	7b1a      	ldrb	r2, [r3, #12]
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <MAX7300_Init+0xf0>)
 8004366:	701a      	strb	r2, [r3, #0]
	for (int i = 12; i < 32; i++) {
 8004368:	230c      	movs	r3, #12
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	e007      	b.n	800437e <MAX7300_Init+0x6a>
		payloadBuffer[i] = 1;
 800436e:	4a25      	ldr	r2, [pc, #148]	; (8004404 <MAX7300_Init+0xf0>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
	for (int i = 12; i < 32; i++) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3301      	adds	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b1f      	cmp	r3, #31
 8004382:	ddf4      	ble.n	800436e <MAX7300_Init+0x5a>
	}

	HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 21, 10);
 8004384:	230a      	movs	r3, #10
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2315      	movs	r3, #21
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <MAX7300_Init+0xf0>)
 800438c:	2180      	movs	r1, #128	; 0x80
 800438e:	481e      	ldr	r0, [pc, #120]	; (8004408 <MAX7300_Init+0xf4>)
 8004390:	f7fe f9d0 	bl	8002734 <HAL_I2C_Master_Transmit>

	// part 2: we write the 'output' bit pair to each port's configuration bits (see datasheet table 2)
	payloadBuffer[0] = MAX7300_REG_CONFIG_P15_P12;
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <MAX7300_Init+0xf0>)
 8004396:	220b      	movs	r2, #11
 8004398:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = 0b01010101;
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <MAX7300_Init+0xf0>)
 800439c:	2255      	movs	r2, #85	; 0x55
 800439e:	705a      	strb	r2, [r3, #1]
	payloadBuffer[2] = 0b01010101;
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <MAX7300_Init+0xf0>)
 80043a2:	2255      	movs	r2, #85	; 0x55
 80043a4:	709a      	strb	r2, [r3, #2]
	payloadBuffer[3] = 0b01010101;
 80043a6:	4b17      	ldr	r3, [pc, #92]	; (8004404 <MAX7300_Init+0xf0>)
 80043a8:	2255      	movs	r2, #85	; 0x55
 80043aa:	70da      	strb	r2, [r3, #3]
	payloadBuffer[4] = 0b01010101;
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <MAX7300_Init+0xf0>)
 80043ae:	2255      	movs	r2, #85	; 0x55
 80043b0:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 5, 10);
 80043b2:	230a      	movs	r3, #10
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2305      	movs	r3, #5
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <MAX7300_Init+0xf0>)
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	4812      	ldr	r0, [pc, #72]	; (8004408 <MAX7300_Init+0xf4>)
 80043be:	f7fe f9b9 	bl	8002734 <HAL_I2C_Master_Transmit>

	// MAX7300 is now configured for all pins 12-31 to be outputs

	// we will now set all of the LOW just in case
	for (int i = 12; i < 32; i++) {
 80043c2:	230c      	movs	r3, #12
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	e013      	b.n	80043f0 <MAX7300_Init+0xdc>
		payloadBuffer[0] = PORTREGISTERS[i]; // set the address to the relevant port's setting address
 80043c8:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <MAX7300_Init+0xec>)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <MAX7300_Init+0xf0>)
 80043d2:	701a      	strb	r2, [r3, #0]
		payloadBuffer[1] = 0; // set the data to be written to 0
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <MAX7300_Init+0xf0>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, MAX7300_ADDRESS, payloadBuffer, 2, 10);
 80043da:	230a      	movs	r3, #10
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2302      	movs	r3, #2
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <MAX7300_Init+0xf0>)
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	4808      	ldr	r0, [pc, #32]	; (8004408 <MAX7300_Init+0xf4>)
 80043e6:	f7fe f9a5 	bl	8002734 <HAL_I2C_Master_Transmit>
	for (int i = 12; i < 32; i++) {
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b1f      	cmp	r3, #31
 80043f4:	dde8      	ble.n	80043c8 <MAX7300_Init+0xb4>
	}

	// now all outputs are off

}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000174 	.word	0x20000174
 8004404:	20000194 	.word	0x20000194
 8004408:	200000b8 	.word	0x200000b8

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4d0d      	ldr	r5, [pc, #52]	; (8004444 <__libc_init_array+0x38>)
 8004410:	4c0d      	ldr	r4, [pc, #52]	; (8004448 <__libc_init_array+0x3c>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	2600      	movs	r6, #0
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	4d0b      	ldr	r5, [pc, #44]	; (800444c <__libc_init_array+0x40>)
 800441e:	4c0c      	ldr	r4, [pc, #48]	; (8004450 <__libc_init_array+0x44>)
 8004420:	f000 f82e 	bl	8004480 <_init>
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	2600      	movs	r6, #0
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	080044d8 	.word	0x080044d8
 8004448:	080044d8 	.word	0x080044d8
 800444c:	080044d8 	.word	0x080044d8
 8004450:	080044dc 	.word	0x080044dc

08004454 <memcpy>:
 8004454:	440a      	add	r2, r1
 8004456:	4291      	cmp	r1, r2
 8004458:	f100 33ff 	add.w	r3, r0, #4294967295
 800445c:	d100      	bne.n	8004460 <memcpy+0xc>
 800445e:	4770      	bx	lr
 8004460:	b510      	push	{r4, lr}
 8004462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800446a:	4291      	cmp	r1, r2
 800446c:	d1f9      	bne.n	8004462 <memcpy+0xe>
 800446e:	bd10      	pop	{r4, pc}

08004470 <memset>:
 8004470:	4402      	add	r2, r0
 8004472:	4603      	mov	r3, r0
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	f803 1b01 	strb.w	r1, [r3], #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
