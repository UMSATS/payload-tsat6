
Payload PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000351c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f0  080036f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080036f0  080036f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036f0  080036f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08003704  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003704  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f973  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002674  00000000  00000000  0002f9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00032028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00032f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c00  00000000  00000000  00033d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d1b  00000000  00000000  00057950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dca1b  00000000  00000000  0006a66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e78  00000000  00000000  001470d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003698 	.word	0x08003698

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003698 	.word	0x08003698

080001d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	463b      	mov	r3, r7
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b29      	ldr	r3, [pc, #164]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001ec:	4a29      	ldr	r2, [pc, #164]	; (8000294 <MX_ADC1_Init+0xc0>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f0:	4b27      	ldr	r3, [pc, #156]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	4b26      	ldr	r3, [pc, #152]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	4b24      	ldr	r3, [pc, #144]	; (8000290 <MX_ADC1_Init+0xbc>)
 80001fe:	2200      	movs	r2, #0
 8000200:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000202:	4b23      	ldr	r3, [pc, #140]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000204:	2200      	movs	r2, #0
 8000206:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000208:	4b21      	ldr	r3, [pc, #132]	; (8000290 <MX_ADC1_Init+0xbc>)
 800020a:	2204      	movs	r2, #4
 800020c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800020e:	4b20      	ldr	r3, [pc, #128]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000210:	2200      	movs	r2, #0
 8000212:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000214:	4b1e      	ldr	r3, [pc, #120]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000216:	2200      	movs	r2, #0
 8000218:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800021a:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <MX_ADC1_Init+0xbc>)
 800021c:	2201      	movs	r2, #1
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000220:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000222:	2200      	movs	r2, #0
 8000224:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <MX_ADC1_Init+0xbc>)
 800022a:	2200      	movs	r2, #0
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800022e:	4b18      	ldr	r3, [pc, #96]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000230:	2200      	movs	r2, #0
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000236:	2200      	movs	r2, #0
 8000238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_ADC1_Init+0xbc>)
 800023e:	2200      	movs	r2, #0
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000244:	2200      	movs	r2, #0
 8000246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <MX_ADC1_Init+0xbc>)
 800024c:	f000 fdb0 	bl	8000db0 <HAL_ADC_Init>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000256:	f000 fa86 	bl	8000766 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_ADC1_Init+0xc4>)
 800025c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800025e:	2306      	movs	r3, #6
 8000260:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000266:	237f      	movs	r3, #127	; 0x7f
 8000268:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800026a:	2304      	movs	r3, #4
 800026c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000272:	463b      	mov	r3, r7
 8000274:	4619      	mov	r1, r3
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <MX_ADC1_Init+0xbc>)
 8000278:	f000 fee6 	bl	8001048 <HAL_ADC_ConfigChannel>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000282:	f000 fa70 	bl	8000766 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000286:	bf00      	nop
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028
 8000294:	50040000 	.word	0x50040000
 8000298:	04300002 	.word	0x04300002

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b0a4      	sub	sp, #144	; 0x90
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2268      	movs	r2, #104	; 0x68
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f003 f9e3 	bl	8003688 <memset>
  if(adcHandle->Instance==ADC1)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a33      	ldr	r2, [pc, #204]	; (8000394 <HAL_ADC_MspInit+0xf8>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d15f      	bne.n	800038c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002d6:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002d8:	2301      	movs	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80002e0:	2310      	movs	r3, #16
 80002e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002e4:	2307      	movs	r3, #7
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002e8:	2302      	movs	r3, #2
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80002f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fd9e 	bl	8002e3c <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000306:	f000 fa2e 	bl	8000766 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a22      	ldr	r2, [pc, #136]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000328:	f043 0304 	orr.w	r3, r3, #4
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0304 	and.w	r3, r3, #4
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	4a16      	ldr	r2, [pc, #88]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <HAL_ADC_MspInit+0xfc>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000352:	230f      	movs	r3, #15
 8000354:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000356:	230b      	movs	r3, #11
 8000358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000362:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000366:	4619      	mov	r1, r3
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <HAL_ADC_MspInit+0x100>)
 800036a:	f001 fc4b 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800036e:	233f      	movs	r3, #63	; 0x3f
 8000370:	67fb      	str	r3, [r7, #124]	; 0x7c
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000372:	230b      	movs	r3, #11
 8000374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000382:	4619      	mov	r1, r3
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f001 fc3c 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800038c:	bf00      	nop
 800038e:	3790      	adds	r7, #144	; 0x90
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	50040000 	.word	0x50040000
 8000398:	40021000 	.word	0x40021000
 800039c:	48000800 	.word	0x48000800

080003a0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <MX_CAN1_Init+0x60>)
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <MX_CAN1_Init+0x64>)
 80003a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <MX_CAN1_Init+0x60>)
 80003ac:	2210      	movs	r2, #16
 80003ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_CAN1_Init+0x60>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_CAN1_Init+0x60>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_CAN1_Init+0x60>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_CAN1_Init+0x60>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <MX_CAN1_Init+0x60>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_CAN1_Init+0x60>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_CAN1_Init+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_CAN1_Init+0x60>)
 80003dc:	2200      	movs	r2, #0
 80003de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <MX_CAN1_Init+0x60>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_CAN1_Init+0x60>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_CAN1_Init+0x60>)
 80003ee:	f001 fa27 	bl	8001840 <HAL_CAN_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80003f8:	f000 f9b5 	bl	8000766 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000090 	.word	0x20000090
 8000404:	40006400 	.word	0x40006400

08000408 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a17      	ldr	r2, [pc, #92]	; (8000484 <HAL_CAN_MspInit+0x7c>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d128      	bne.n	800047c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <HAL_CAN_MspInit+0x80>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	4a16      	ldr	r2, [pc, #88]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000434:	6593      	str	r3, [r2, #88]	; 0x58
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a10      	ldr	r2, [pc, #64]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000448:	f043 0302 	orr.w	r3, r3, #2
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <HAL_CAN_MspInit+0x80>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0302 	and.w	r3, r3, #2
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800045a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000460:	2302      	movs	r3, #2
 8000462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 800046c:	230a      	movs	r3, #10
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <HAL_CAN_MspInit+0x84>)
 8000478:	f001 fbc4 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800047c:	bf00      	nop
 800047e:	3728      	adds	r7, #40	; 0x28
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40006400 	.word	0x40006400
 8000488:	40021000 	.word	0x40021000
 800048c:	48000400 	.word	0x48000400

08000490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a33      	ldr	r2, [pc, #204]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a2d      	ldr	r2, [pc, #180]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a27      	ldr	r2, [pc, #156]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_GPIO_Init+0xe8>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004ee:	2200      	movs	r2, #0
 80004f0:	f240 71f7 	movw	r1, #2039	; 0x7f7
 80004f4:	4821      	ldr	r0, [pc, #132]	; (800057c <MX_GPIO_Init+0xec>)
 80004f6:	f001 fcff 	bl	8001ef8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000500:	481f      	ldr	r0, [pc, #124]	; (8000580 <MX_GPIO_Init+0xf0>)
 8000502:	f001 fcf9 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f001 fcf2 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000514:	f240 73f7 	movw	r3, #2039	; 0x7f7
 8000518:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	4619      	mov	r1, r3
 800052c:	4813      	ldr	r0, [pc, #76]	; (800057c <MX_GPIO_Init+0xec>)
 800052e:	f001 fb69 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000532:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	4619      	mov	r1, r3
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_GPIO_Init+0xf0>)
 800054c:	f001 fb5a 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f001 fb4a 	bl	8001c04 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	48000400 	.word	0x48000400
 8000580:	48000800 	.word	0x48000800

08000584 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_I2C1_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_I2C1_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000590:	f640 6214 	movw	r2, #3604	; 0xe14
 8000594:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <MX_I2C1_Init+0x74>)
 800059e:	2201      	movs	r2, #1
 80005a0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b4:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005c2:	f001 fcb1 	bl	8001f28 <HAL_I2C_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005cc:	f000 f8cb 	bl	8000766 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005d4:	f001 fd37 	bl	8002046 <HAL_I2CEx_ConfigAnalogFilter>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005de:	f000 f8c2 	bl	8000766 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005e6:	f001 fd79 	bl	80020dc <HAL_I2CEx_ConfigDigitalFilter>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005f0:	f000 f8b9 	bl	8000766 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000b8 	.word	0x200000b8
 80005fc:	40005400 	.word	0x40005400

08000600 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0a4      	sub	sp, #144	; 0x90
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2268      	movs	r2, #104	; 0x68
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f003 f831 	bl	8003688 <memset>
  if(i2cHandle->Instance==I2C1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <HAL_I2C_MspInit+0xb0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d13b      	bne.n	80006a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000634:	2300      	movs	r3, #0
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fbfd 	bl	8002e3c <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000648:	f000 f88d 	bl	8000766 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <HAL_I2C_MspInit+0xb4>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <HAL_I2C_MspInit+0xb4>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <HAL_I2C_MspInit+0xb4>)
 800065a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000664:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000668:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066a:	2312      	movs	r3, #18
 800066c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000676:	2303      	movs	r3, #3
 8000678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800067c:	2304      	movs	r3, #4
 800067e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f001 faba 	bl	8001c04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HAL_I2C_MspInit+0xb4>)
 8000692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_I2C_MspInit+0xb4>)
 8000696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069a:	6593      	str	r3, [r2, #88]	; 0x58
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_I2C_MspInit+0xb4>)
 800069e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a8:	bf00      	nop
 80006aa:	3790      	adds	r7, #144	; 0x90
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40005400 	.word	0x40005400
 80006b4:	40021000 	.word	0x40021000

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 f963 	bl	8000986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f80b 	bl	80006da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f7ff fee4 	bl	8000490 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006c8:	f7ff fd84 	bl	80001d4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80006cc:	f7ff fe68 	bl	80003a0 <MX_CAN1_Init>
  MX_I2C1_Init();
 80006d0:	f7ff ff58 	bl	8000584 <MX_I2C1_Init>
  MX_SPI3_Init();
 80006d4:	f000 f84c 	bl	8000770 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x20>

080006da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b096      	sub	sp, #88	; 0x58
 80006de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2244      	movs	r2, #68	; 0x44
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 ffcd 	bl	8003688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000700:	f001 fd46 	bl	8002190 <HAL_PWREx_ControlVoltageScaling>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800070a:	f000 f82c 	bl	8000766 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800070e:	2310      	movs	r3, #16
 8000710:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000712:	2301      	movs	r3, #1
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800071a:	2360      	movs	r3, #96	; 0x60
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071e:	2300      	movs	r3, #0
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd88 	bl	800223c <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000732:	f000 f818 	bl	8000766 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f988 	bl	8002a64 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800075a:	f000 f804 	bl	8000766 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3758      	adds	r7, #88	; 0x58
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076a:	b672      	cpsid	i
}
 800076c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076e:	e7fe      	b.n	800076e <Error_Handler+0x8>

08000770 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_SPI3_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_SPI3_Init+0x74>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI3_Init+0x74>)
 800078a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800078e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_SPI3_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI3_Init+0x74>)
 800079e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007be:	2207      	movs	r2, #7
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_SPI3_Init+0x74>)
 80007d0:	f002 fe92 	bl	80034f8 <HAL_SPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007da:	f7ff ffc4 	bl	8000766 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000010c 	.word	0x2000010c
 80007e8:	40003c00 	.word	0x40003c00

080007ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_SPI_MspInit+0x7c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d128      	bne.n	8000860 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_SPI_MspInit+0x80>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <HAL_SPI_MspInit+0x80>)
 8000814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_SPI_MspInit+0x80>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_SPI_MspInit+0x80>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <HAL_SPI_MspInit+0x80>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_SPI_MspInit+0x80>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800083e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000850:	2306      	movs	r3, #6
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_SPI_MspInit+0x84>)
 800085c:	f001 f9d2 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40003c00 	.word	0x40003c00
 800086c:	40021000 	.word	0x40021000
 8000870:	48000800 	.word	0x48000800

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	; 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f892 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000938:	f7ff ffea 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f002 fe6d 	bl	8003640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000966:	f7ff fea7 	bl	80006b8 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800096c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000978:	080036f8 	.word	0x080036f8
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000980:	20000174 	.word	0x20000174

08000984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_IRQHandler>

08000986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800098c:	2300      	movs	r3, #0
 800098e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f001 f903 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f80e 	bl	80009b8 <HAL_InitTick>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	e001      	b.n	80009ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a8:	f7ff ff64 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_InitTick+0x6c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d023      	beq.n	8000a14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_InitTick+0x70>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_InitTick+0x6c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f901 	bl	8001bea <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10f      	bne.n	8000a0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d809      	bhi.n	8000a08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f001 f8d9 	bl	8001bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_InitTick+0x74>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e007      	b.n	8000a18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e004      	b.n	8000a18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e001      	b.n	8000a18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000170 	.word	0x20000170

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000170 	.word	0x20000170

08000a70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	609a      	str	r2, [r3, #8]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	609a      	str	r2, [r3, #8]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3360      	adds	r3, #96	; 0x60
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <LL_ADC_SetOffset+0x44>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	430a      	orrs	r2, r1
 8000b06:	4313      	orrs	r3, r2
 8000b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b10:	bf00      	nop
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	03fff000 	.word	0x03fff000

08000b20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3360      	adds	r3, #96	; 0x60
 8000b2e:	461a      	mov	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3360      	adds	r3, #96	; 0x60
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b76:	bf00      	nop
 8000b78:	371c      	adds	r7, #28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	615a      	str	r2, [r3, #20]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3330      	adds	r3, #48	; 0x30
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	4413      	add	r3, r2
 8000bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f003 031f 	and.w	r3, r3, #31
 8000bd2:	211f      	movs	r1, #31
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0e9b      	lsrs	r3, r3, #26
 8000be0:	f003 011f 	and.w	r1, r3, #31
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bf4:	bf00      	nop
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3314      	adds	r3, #20
 8000c10:	461a      	mov	r2, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	0e5b      	lsrs	r3, r3, #25
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	4413      	add	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	0d1b      	lsrs	r3, r3, #20
 8000c28:	f003 031f 	and.w	r3, r3, #31
 8000c2c:	2107      	movs	r1, #7
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	401a      	ands	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	0d1b      	lsrs	r3, r3, #20
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0318 	and.w	r3, r3, #24
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c7c:	40d9      	lsrs	r1, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	400b      	ands	r3, r1
 8000c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c86:	431a      	orrs	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	0007ffff 	.word	0x0007ffff

08000ca0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6093      	str	r3, [r2, #8]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cd8:	d101      	bne.n	8000cde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e000      	b.n	8000ce0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d28:	d101      	bne.n	8000d2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d101      	bne.n	8000d54 <LL_ADC_IsEnabled+0x18>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <LL_ADC_IsEnabled+0x1a>
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d101      	bne.n	8000d7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d101      	bne.n	8000da0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e12f      	b.n	800102a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d109      	bne.n	8000dec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fa5f 	bl	800029c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff67 	bl	8000cc4 <LL_ADC_IsDeepPowerDownEnabled>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d004      	beq.n	8000e06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff4d 	bl	8000ca0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff82 	bl	8000d14 <LL_ADC_IsInternalRegulatorEnabled>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d115      	bne.n	8000e42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff66 	bl	8000cec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e20:	4b84      	ldr	r3, [pc, #528]	; (8001034 <HAL_ADC_Init+0x284>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	099b      	lsrs	r3, r3, #6
 8000e26:	4a84      	ldr	r2, [pc, #528]	; (8001038 <HAL_ADC_Init+0x288>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	099b      	lsrs	r3, r3, #6
 8000e2e:	3301      	adds	r3, #1
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e34:	e002      	b.n	8000e3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff64 	bl	8000d14 <LL_ADC_IsInternalRegulatorEnabled>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10d      	bne.n	8000e6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f043 0210 	orr.w	r2, r3, #16
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e62:	f043 0201 	orr.w	r2, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff75 	bl	8000d62 <LL_ADC_REG_IsConversionOngoing>
 8000e78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 80c8 	bne.w	8001018 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f040 80c4 	bne.w	8001018 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e98:	f043 0202 	orr.w	r2, r3, #2
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff49 	bl	8000d3c <LL_ADC_IsEnabled>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10b      	bne.n	8000ec8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000eb0:	4862      	ldr	r0, [pc, #392]	; (800103c <HAL_ADC_Init+0x28c>)
 8000eb2:	f7ff ff43 	bl	8000d3c <LL_ADC_IsEnabled>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d105      	bne.n	8000ec8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	485f      	ldr	r0, [pc, #380]	; (8001040 <HAL_ADC_Init+0x290>)
 8000ec4:	f7ff fdd4 	bl	8000a70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7e5b      	ldrb	r3, [r3, #25]
 8000ecc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ed2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ed8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ede:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d106      	bne.n	8000f04 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	3b01      	subs	r3, #1
 8000efc:	045b      	lsls	r3, r3, #17
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d009      	beq.n	8000f20 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HAL_ADC_Init+0x294>)
 8000f28:	4013      	ands	r3, r2
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6812      	ldr	r2, [r2, #0]
 8000f2e:	69b9      	ldr	r1, [r7, #24]
 8000f30:	430b      	orrs	r3, r1
 8000f32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff12 	bl	8000d62 <LL_ADC_REG_IsConversionOngoing>
 8000f3e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff1f 	bl	8000d88 <LL_ADC_INJ_IsConversionOngoing>
 8000f4a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d140      	bne.n	8000fd4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d13d      	bne.n	8000fd4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7e1b      	ldrb	r3, [r3, #24]
 8000f60:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f62:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f6a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f7a:	f023 0306 	bic.w	r3, r3, #6
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	430b      	orrs	r3, r1
 8000f86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d118      	bne.n	8000fc4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000fa8:	4311      	orrs	r1, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	e007      	b.n	8000fd4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10c      	bne.n	8000ff6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f023 010f 	bic.w	r1, r3, #15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ff4:	e007      	b.n	8001006 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020f 	bic.w	r2, r2, #15
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	659a      	str	r2, [r3, #88]	; 0x58
 8001016:	e007      	b.n	8001028 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	f043 0210 	orr.w	r2, r3, #16
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001028:	7ffb      	ldrb	r3, [r7, #31]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000000 	.word	0x20000000
 8001038:	053e2d63 	.word	0x053e2d63
 800103c:	50040000 	.word	0x50040000
 8001040:	50040300 	.word	0x50040300
 8001044:	fff0c007 	.word	0xfff0c007

08001048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0b6      	sub	sp, #216	; 0xd8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADC_ConfigChannel+0x22>
 8001066:	2302      	movs	r3, #2
 8001068:	e3d5      	b.n	8001816 <HAL_ADC_ConfigChannel+0x7ce>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe73 	bl	8000d62 <LL_ADC_REG_IsConversionOngoing>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 83ba 	bne.w	80017f8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d824      	bhi.n	80010d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	3b02      	subs	r3, #2
 8001092:	2b03      	cmp	r3, #3
 8001094:	d81b      	bhi.n	80010ce <HAL_ADC_ConfigChannel+0x86>
 8001096:	a201      	add	r2, pc, #4	; (adr r2, 800109c <HAL_ADC_ConfigChannel+0x54>)
 8001098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109c:	080010ad 	.word	0x080010ad
 80010a0:	080010b5 	.word	0x080010b5
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010c5 	.word	0x080010c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	220c      	movs	r2, #12
 80010b0:	605a      	str	r2, [r3, #4]
          break;
 80010b2:	e011      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2212      	movs	r2, #18
 80010b8:	605a      	str	r2, [r3, #4]
          break;
 80010ba:	e00d      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2218      	movs	r2, #24
 80010c0:	605a      	str	r2, [r3, #4]
          break;
 80010c2:	e009      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ca:	605a      	str	r2, [r3, #4]
          break;
 80010cc:	e004      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2206      	movs	r2, #6
 80010d2:	605a      	str	r2, [r3, #4]
          break;
 80010d4:	e000      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80010d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6859      	ldr	r1, [r3, #4]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	f7ff fd5f 	bl	8000ba8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe37 	bl	8000d62 <LL_ADC_REG_IsConversionOngoing>
 80010f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe43 	bl	8000d88 <LL_ADC_INJ_IsConversionOngoing>
 8001102:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001106:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 81c1 	bne.w	8001492 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001114:	2b00      	cmp	r3, #0
 8001116:	f040 81bc 	bne.w	8001492 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001122:	d10f      	bne.n	8001144 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd66 	bl	8000c00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fd20 	bl	8000b82 <LL_ADC_SetSamplingTimeCommonConfig>
 8001142:	e00e      	b.n	8001162 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	461a      	mov	r2, r3
 8001152:	f7ff fd55 	bl	8000c00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fd10 	bl	8000b82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d00a      	beq.n	800119a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6919      	ldr	r1, [r3, #16]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001194:	f7ff fca0 	bl	8000ad8 <LL_ADC_SetOffset>
 8001198:	e17b      	b.n	8001492 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fcbd 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0x17e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fcb2 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	0e9b      	lsrs	r3, r3, #26
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	e01e      	b.n	8001204 <HAL_ADC_ConfigChannel+0x1bc>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fca7 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80011f4:	2320      	movs	r3, #32
 80011f6:	e004      	b.n	8001202 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80011f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1d4>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0e9b      	lsrs	r3, r3, #26
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	e018      	b.n	800124e <HAL_ADC_ConfigChannel+0x206>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001240:	2320      	movs	r3, #32
 8001242:	e004      	b.n	800124e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800124e:	429a      	cmp	r2, r3
 8001250:	d106      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fc76 	bl	8000b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fc5a 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x244>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2101      	movs	r1, #1
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fc4f 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	0e9b      	lsrs	r3, r3, #26
 8001286:	f003 021f 	and.w	r2, r3, #31
 800128a:	e01e      	b.n	80012ca <HAL_ADC_ConfigChannel+0x282>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fc44 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80012ba:	2320      	movs	r3, #32
 80012bc:	e004      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80012be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x29a>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0e9b      	lsrs	r3, r3, #26
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	e018      	b.n	8001314 <HAL_ADC_ConfigChannel+0x2cc>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80012f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80012fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001306:	2320      	movs	r3, #32
 8001308:	e004      	b.n	8001314 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800130a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001314:	429a      	cmp	r2, r3
 8001316:	d106      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2200      	movs	r2, #0
 800131e:	2101      	movs	r1, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fc13 	bl	8000b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fbf7 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10a      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x30a>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2102      	movs	r1, #2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fbec 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	0e9b      	lsrs	r3, r3, #26
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	e01e      	b.n	8001390 <HAL_ADC_ConfigChannel+0x348>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2102      	movs	r1, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fbe1 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001378:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001380:	2320      	movs	r3, #32
 8001382:	e004      	b.n	800138e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x360>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0e9b      	lsrs	r3, r3, #26
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	e016      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x38e>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013b4:	fa93 f3a3 	rbit	r3, r3
 80013b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80013c8:	2320      	movs	r3, #32
 80013ca:	e004      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80013cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d106      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fbb2 	bl	8000b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2103      	movs	r1, #3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fb96 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10a      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x3cc>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2103      	movs	r1, #3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fb8b 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	0e9b      	lsrs	r3, r3, #26
 800140e:	f003 021f 	and.w	r2, r3, #31
 8001412:	e017      	b.n	8001444 <HAL_ADC_ConfigChannel+0x3fc>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2103      	movs	r1, #3
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb80 	bl	8000b20 <LL_ADC_GetOffsetChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001426:	fa93 f3a3 	rbit	r3, r3
 800142a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800142c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800142e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001436:	2320      	movs	r3, #32
 8001438:	e003      	b.n	8001442 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800143a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_ADC_ConfigChannel+0x414>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0e9b      	lsrs	r3, r3, #26
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	e011      	b.n	8001480 <HAL_ADC_ConfigChannel+0x438>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800146a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800146c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800146e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001474:	2320      	movs	r3, #32
 8001476:	e003      	b.n	8001480 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001480:	429a      	cmp	r2, r3
 8001482:	d106      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	2103      	movs	r1, #3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fb5d 	bl	8000b4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fc50 	bl	8000d3c <LL_ADC_IsEnabled>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 8140 	bne.w	8001724 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	6819      	ldr	r1, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	461a      	mov	r2, r3
 80014b2:	f7ff fbd1 	bl	8000c58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	4a8f      	ldr	r2, [pc, #572]	; (80016f8 <HAL_ADC_ConfigChannel+0x6b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	f040 8131 	bne.w	8001724 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10b      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x4a2>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0e9b      	lsrs	r3, r3, #26
 80014d8:	3301      	adds	r3, #1
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2b09      	cmp	r3, #9
 80014e0:	bf94      	ite	ls
 80014e2:	2301      	movls	r3, #1
 80014e4:	2300      	movhi	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	e019      	b.n	800151e <HAL_ADC_ConfigChannel+0x4d6>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80014f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80014fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001502:	2320      	movs	r3, #32
 8001504:	e003      	b.n	800150e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	3301      	adds	r3, #1
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2b09      	cmp	r3, #9
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800151e:	2b00      	cmp	r3, #0
 8001520:	d079      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152a:	2b00      	cmp	r3, #0
 800152c:	d107      	bne.n	800153e <HAL_ADC_ConfigChannel+0x4f6>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0e9b      	lsrs	r3, r3, #26
 8001534:	3301      	adds	r3, #1
 8001536:	069b      	lsls	r3, r3, #26
 8001538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800153c:	e015      	b.n	800156a <HAL_ADC_ConfigChannel+0x522>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800154c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001556:	2320      	movs	r3, #32
 8001558:	e003      	b.n	8001562 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800155a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3301      	adds	r3, #1
 8001564:	069b      	lsls	r3, r3, #26
 8001566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_ADC_ConfigChannel+0x542>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0e9b      	lsrs	r3, r3, #26
 800157c:	3301      	adds	r3, #1
 800157e:	f003 031f 	and.w	r3, r3, #31
 8001582:	2101      	movs	r1, #1
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	e017      	b.n	80015ba <HAL_ADC_ConfigChannel+0x572>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001592:	fa93 f3a3 	rbit	r3, r3
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800159a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800159c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80015a2:	2320      	movs	r3, #32
 80015a4:	e003      	b.n	80015ae <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80015a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	ea42 0103 	orr.w	r1, r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10a      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x598>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0e9b      	lsrs	r3, r3, #26
 80015d0:	3301      	adds	r3, #1
 80015d2:	f003 021f 	and.w	r2, r3, #31
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	051b      	lsls	r3, r3, #20
 80015de:	e018      	b.n	8001612 <HAL_ADC_ConfigChannel+0x5ca>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80015ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80015f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80015f8:	2320      	movs	r3, #32
 80015fa:	e003      	b.n	8001604 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80015fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fe:	fab3 f383 	clz	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	3301      	adds	r3, #1
 8001606:	f003 021f 	and.w	r2, r3, #31
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001612:	430b      	orrs	r3, r1
 8001614:	e081      	b.n	800171a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161e:	2b00      	cmp	r3, #0
 8001620:	d107      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x5ea>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0e9b      	lsrs	r3, r3, #26
 8001628:	3301      	adds	r3, #1
 800162a:	069b      	lsls	r3, r3, #26
 800162c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001630:	e015      	b.n	800165e <HAL_ADC_ConfigChannel+0x616>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800164a:	2320      	movs	r3, #32
 800164c:	e003      	b.n	8001656 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	fab3 f383 	clz	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3301      	adds	r3, #1
 8001658:	069b      	lsls	r3, r3, #26
 800165a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_ADC_ConfigChannel+0x636>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0e9b      	lsrs	r3, r3, #26
 8001670:	3301      	adds	r3, #1
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	e017      	b.n	80016ae <HAL_ADC_ConfigChannel+0x666>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	61fb      	str	r3, [r7, #28]
  return result;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001696:	2320      	movs	r3, #32
 8001698:	e003      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	fab3 f383 	clz	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	ea42 0103 	orr.w	r1, r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10d      	bne.n	80016da <HAL_ADC_ConfigChannel+0x692>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0e9b      	lsrs	r3, r3, #26
 80016c4:	3301      	adds	r3, #1
 80016c6:	f003 021f 	and.w	r2, r3, #31
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	3b1e      	subs	r3, #30
 80016d2:	051b      	lsls	r3, r3, #20
 80016d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d8:	e01e      	b.n	8001718 <HAL_ADC_ConfigChannel+0x6d0>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	613b      	str	r3, [r7, #16]
  return result;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d104      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80016f2:	2320      	movs	r3, #32
 80016f4:	e006      	b.n	8001704 <HAL_ADC_ConfigChannel+0x6bc>
 80016f6:	bf00      	nop
 80016f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	f003 021f 	and.w	r2, r3, #31
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3b1e      	subs	r3, #30
 8001712:	051b      	lsls	r3, r3, #20
 8001714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001718:	430b      	orrs	r3, r1
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	6892      	ldr	r2, [r2, #8]
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fa6e 	bl	8000c00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_ADC_ConfigChannel+0x7d8>)
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d06c      	beq.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001730:	483c      	ldr	r0, [pc, #240]	; (8001824 <HAL_ADC_ConfigChannel+0x7dc>)
 8001732:	f7ff f9c3 	bl	8000abc <LL_ADC_GetCommonPathInternalCh>
 8001736:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a3a      	ldr	r2, [pc, #232]	; (8001828 <HAL_ADC_ConfigChannel+0x7e0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d127      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d121      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a35      	ldr	r2, [pc, #212]	; (800182c <HAL_ADC_ConfigChannel+0x7e4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d157      	bne.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800175e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001762:	4619      	mov	r1, r3
 8001764:	482f      	ldr	r0, [pc, #188]	; (8001824 <HAL_ADC_ConfigChannel+0x7dc>)
 8001766:	f7ff f996 	bl	8000a96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_ADC_ConfigChannel+0x7e8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	4a30      	ldr	r2, [pc, #192]	; (8001834 <HAL_ADC_ConfigChannel+0x7ec>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001784:	e002      	b.n	800178c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3b01      	subs	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f9      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001792:	e03a      	b.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a27      	ldr	r2, [pc, #156]	; (8001838 <HAL_ADC_ConfigChannel+0x7f0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d113      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x77e>
 800179e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_ADC_ConfigChannel+0x7e4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d12a      	bne.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017bc:	4619      	mov	r1, r3
 80017be:	4819      	ldr	r0, [pc, #100]	; (8001824 <HAL_ADC_ConfigChannel+0x7dc>)
 80017c0:	f7ff f969 	bl	8000a96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017c4:	e021      	b.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1c      	ldr	r2, [pc, #112]	; (800183c <HAL_ADC_ConfigChannel+0x7f4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d11c      	bne.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d116      	bne.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_ADC_ConfigChannel+0x7e4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d111      	bne.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <HAL_ADC_ConfigChannel+0x7dc>)
 80017f2:	f7ff f950 	bl	8000a96 <LL_ADC_SetCommonPathInternalCh>
 80017f6:	e008      	b.n	800180a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f043 0220 	orr.w	r2, r3, #32
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001812:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001816:	4618      	mov	r0, r3
 8001818:	37d8      	adds	r7, #216	; 0xd8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	80080000 	.word	0x80080000
 8001824:	50040300 	.word	0x50040300
 8001828:	c7520000 	.word	0xc7520000
 800182c:	50040000 	.word	0x50040000
 8001830:	20000000 	.word	0x20000000
 8001834:	053e2d63 	.word	0x053e2d63
 8001838:	cb840000 	.word	0xcb840000
 800183c:	80000001 	.word	0x80000001

08001840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0ed      	b.n	8001a2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7fe fdd2 	bl	8000408 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001874:	f7ff f8f0 	bl	8000a58 <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800187a:	e012      	b.n	80018a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800187c:	f7ff f8ec 	bl	8000a58 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b0a      	cmp	r3, #10
 8001888:	d90b      	bls.n	80018a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0c5      	b.n	8001a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0e5      	beq.n	800187c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0202 	bic.w	r2, r2, #2
 80018be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c0:	f7ff f8ca 	bl	8000a58 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c6:	e012      	b.n	80018ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c8:	f7ff f8c6 	bl	8000a58 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b0a      	cmp	r3, #10
 80018d4:	d90b      	bls.n	80018ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2205      	movs	r2, #5
 80018e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e09f      	b.n	8001a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1e5      	bne.n	80018c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e007      	b.n	8001926 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7e5b      	ldrb	r3, [r3, #25]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e007      	b.n	8001950 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800194e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e9b      	ldrb	r3, [r3, #26]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0220 	orr.w	r2, r2, #32
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e007      	b.n	800197a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0220 	bic.w	r2, r2, #32
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7edb      	ldrb	r3, [r3, #27]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0210 	bic.w	r2, r2, #16
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e007      	b.n	80019a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0210 	orr.w	r2, r2, #16
 80019a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7f1b      	ldrb	r3, [r3, #28]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d108      	bne.n	80019be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0208 	orr.w	r2, r2, #8
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e007      	b.n	80019ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0208 	bic.w	r2, r2, #8
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7f5b      	ldrb	r3, [r3, #29]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0204 	orr.w	r2, r2, #4
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e007      	b.n	80019f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0204 	bic.w	r2, r2, #4
 80019f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	ea42 0103 	orr.w	r1, r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	; (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b68:	d301      	bcc.n	8001b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <SysTick_Config+0x40>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b76:	210f      	movs	r1, #15
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f7ff ff8e 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SysTick_Config+0x40>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SysTick_Config+0x40>)
 8001b88:	2207      	movs	r2, #7
 8001b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff47 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc4:	f7ff ff5c 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	6978      	ldr	r0, [r7, #20]
 8001bd0:	f7ff ff8e 	bl	8001af0 <NVIC_EncodePriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff5d 	bl	8001a9c <__NVIC_SetPriority>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffb0 	bl	8001b58 <SysTick_Config>
 8001bf8:	4603      	mov	r3, r0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e154      	b.n	8001ebe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8146 	beq.w	8001eb8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d005      	beq.n	8001c44 <HAL_GPIO_Init+0x40>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d130      	bne.n	8001ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 0201 	and.w	r2, r3, #1
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d017      	beq.n	8001ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d123      	bne.n	8001d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0203 	and.w	r2, r3, #3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80a0 	beq.w	8001eb8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	4b58      	ldr	r3, [pc, #352]	; (8001edc <HAL_GPIO_Init+0x2d8>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	4a57      	ldr	r2, [pc, #348]	; (8001edc <HAL_GPIO_Init+0x2d8>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6613      	str	r3, [r2, #96]	; 0x60
 8001d84:	4b55      	ldr	r3, [pc, #340]	; (8001edc <HAL_GPIO_Init+0x2d8>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d90:	4a53      	ldr	r2, [pc, #332]	; (8001ee0 <HAL_GPIO_Init+0x2dc>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dba:	d019      	beq.n	8001df0 <HAL_GPIO_Init+0x1ec>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a49      	ldr	r2, [pc, #292]	; (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x1e8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_GPIO_Init+0x2e4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a47      	ldr	r2, [pc, #284]	; (8001eec <HAL_GPIO_Init+0x2e8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1e0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a46      	ldr	r2, [pc, #280]	; (8001ef0 <HAL_GPIO_Init+0x2ec>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1dc>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e008      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de0:	2307      	movs	r3, #7
 8001de2:	e006      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de4:	2303      	movs	r3, #3
 8001de6:	e004      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001df0:	2300      	movs	r3, #0
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e02:	4937      	ldr	r1, [pc, #220]	; (8001ee0 <HAL_GPIO_Init+0x2dc>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e34:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e88:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <HAL_GPIO_Init+0x2f0>)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f47f aea3 	bne.w	8001c14 <HAL_GPIO_Init+0x10>
  }
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	48000400 	.word	0x48000400
 8001ee8:	48000800 	.word	0x48000800
 8001eec:	48000c00 	.word	0x48000c00
 8001ef0:	48001000 	.word	0x48001000
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f14:	e002      	b.n	8001f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e081      	b.n	800203e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fb56 	bl	8000600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	; 0x24
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e006      	b.n	8001fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d104      	bne.n	8001fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69d9      	ldr	r1, [r3, #28]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b20      	cmp	r3, #32
 800205a:	d138      	bne.n	80020ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002066:	2302      	movs	r3, #2
 8002068:	e032      	b.n	80020d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2224      	movs	r2, #36	; 0x24
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002098:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
  }
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d139      	bne.n	8002166 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e033      	b.n	8002168 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2224      	movs	r2, #36	; 0x24
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800212e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
  }
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_PWREx_GetVoltageRange+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	d130      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ac:	d038      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b6:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2232      	movs	r2, #50	; 0x32
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d4:	e002      	b.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e8:	d102      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f2      	bne.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d110      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e00f      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d007      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000
 8002234:	20000000 	.word	0x20000000
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	f000 bc02 	b.w	8002a54 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002250:	4b96      	ldr	r3, [pc, #600]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225a:	4b94      	ldr	r3, [pc, #592]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80e4 	beq.w	800243a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_RCC_OscConfig+0x4c>
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	f040 808b 	bne.w	8002396 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b01      	cmp	r3, #1
 8002284:	f040 8087 	bne.w	8002396 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002288:	4b88      	ldr	r3, [pc, #544]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x64>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e3d9      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	4b81      	ldr	r3, [pc, #516]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <HAL_RCC_OscConfig+0x7e>
 80022b0:	4b7e      	ldr	r3, [pc, #504]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b8:	e005      	b.n	80022c6 <HAL_RCC_OscConfig+0x8a>
 80022ba:	4b7c      	ldr	r3, [pc, #496]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d223      	bcs.n	8002312 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fd54 	bl	8002d7c <RCC_SetFlashLatencyFromMSIRange>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e3ba      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022de:	4b73      	ldr	r3, [pc, #460]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a72      	ldr	r2, [pc, #456]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b70      	ldr	r3, [pc, #448]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	496d      	ldr	r1, [pc, #436]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fc:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4968      	ldr	r1, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
 8002310:	e025      	b.n	800235e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002312:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a65      	ldr	r2, [pc, #404]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4960      	ldr	r1, [pc, #384]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002330:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	495b      	ldr	r1, [pc, #364]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fd14 	bl	8002d7c <RCC_SetFlashLatencyFromMSIRange>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e37a      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800235e:	f000 fc81 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b51      	ldr	r3, [pc, #324]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4950      	ldr	r1, [pc, #320]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a4e      	ldr	r2, [pc, #312]	; (80024b4 <HAL_RCC_OscConfig+0x278>)
 800237c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800237e:	4b4e      	ldr	r3, [pc, #312]	; (80024b8 <HAL_RCC_OscConfig+0x27c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fb18 	bl	80009b8 <HAL_InitTick>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d052      	beq.n	8002438 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	e35e      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d032      	beq.n	8002404 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a42      	ldr	r2, [pc, #264]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fb55 	bl	8000a58 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b2:	f7fe fb51 	bl	8000a58 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e347      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c4:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a35      	ldr	r2, [pc, #212]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b33      	ldr	r3, [pc, #204]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4930      	ldr	r1, [pc, #192]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	492b      	ldr	r1, [pc, #172]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 8002402:	e01a      	b.n	800243a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002410:	f7fe fb22 	bl	8000a58 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002418:	f7fe fb1e 	bl	8000a58 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e314      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1dc>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d073      	beq.n	800252e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x21c>
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d10e      	bne.n	8002470 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d063      	beq.n	800252c <HAL_RCC_OscConfig+0x2f0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d15f      	bne.n	800252c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e2f1      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x24c>
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e025      	b.n	80024d4 <HAL_RCC_OscConfig+0x298>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002490:	d114      	bne.n	80024bc <HAL_RCC_OscConfig+0x280>
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a02      	ldr	r2, [pc, #8]	; (80024ac <HAL_RCC_OscConfig+0x270>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e013      	b.n	80024d4 <HAL_RCC_OscConfig+0x298>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	080036b0 	.word	0x080036b0
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004
 80024bc:	4ba0      	ldr	r3, [pc, #640]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a9f      	ldr	r2, [pc, #636]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b9d      	ldr	r3, [pc, #628]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a9c      	ldr	r2, [pc, #624]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fabc 	bl	8000a58 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe fab8 	bl	8000a58 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e2ae      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	4b92      	ldr	r3, [pc, #584]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2a8>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe faa8 	bl	8000a58 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe faa4 	bl	8000a58 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e29a      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251e:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x2d0>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d060      	beq.n	80025fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d005      	beq.n	800254c <HAL_RCC_OscConfig+0x310>
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d119      	bne.n	800257a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d116      	bne.n	800257a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	4b7c      	ldr	r3, [pc, #496]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x328>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e277      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	4973      	ldr	r1, [pc, #460]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	e040      	b.n	80025fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d023      	beq.n	80025ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002582:	4b6f      	ldr	r3, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6e      	ldr	r2, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fa63 	bl	8000a58 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe fa5f 	bl	8000a58 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e255      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a8:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b62      	ldr	r3, [pc, #392]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	495f      	ldr	r1, [pc, #380]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
 80025c8:	e018      	b.n	80025fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80025d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fa3f 	bl	8000a58 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025de:	f7fe fa3b 	bl	8000a58 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e231      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03c      	beq.n	8002682 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01c      	beq.n	800264a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002610:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fa1a 	bl	8000a58 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe fa16 	bl	8000a58 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e20c      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 800263c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCC_OscConfig+0x3ec>
 8002648:	e01b      	b.n	8002682 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	4a3b      	ldr	r2, [pc, #236]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe f9fd 	bl	8000a58 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe f9f9 	bl	8000a58 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e1ef      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ef      	bne.n	8002662 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80a6 	beq.w	80027dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	4a26      	ldr	r2, [pc, #152]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6593      	str	r3, [r2, #88]	; 0x58
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_RCC_OscConfig+0x508>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d118      	bne.n	80026fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_RCC_OscConfig+0x508>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_RCC_OscConfig+0x508>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d4:	f7fe f9c0 	bl	8000a58 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe f9bc 	bl	8000a58 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1b2      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_RCC_OscConfig+0x508>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <HAL_RCC_OscConfig+0x4d8>
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002712:	e029      	b.n	8002768 <HAL_RCC_OscConfig+0x52c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d115      	bne.n	8002748 <HAL_RCC_OscConfig+0x50c>
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	4a03      	ldr	r2, [pc, #12]	; (8002740 <HAL_RCC_OscConfig+0x504>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800273c:	e014      	b.n	8002768 <HAL_RCC_OscConfig+0x52c>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
 8002748:	4b9a      	ldr	r3, [pc, #616]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	4a99      	ldr	r2, [pc, #612]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	4a95      	ldr	r2, [pc, #596]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002760:	f023 0304 	bic.w	r3, r3, #4
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d016      	beq.n	800279e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe f972 	bl	8000a58 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe f96e 	bl	8000a58 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e162      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ed      	beq.n	8002778 <HAL_RCC_OscConfig+0x53c>
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7fe f95b 	bl	8000a58 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe f957 	bl	8000a58 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e14b      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027bc:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ed      	bne.n	80027a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a77      	ldr	r2, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d03c      	beq.n	8002862 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01c      	beq.n	800282a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f0:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80027f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f6:	4a6f      	ldr	r2, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe f92a 	bl	8000a58 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002808:	f7fe f926 	bl	8000a58 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e11c      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800281a:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 800281c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ef      	beq.n	8002808 <HAL_RCC_OscConfig+0x5cc>
 8002828:	e01b      	b.n	8002862 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800282a:	4b62      	ldr	r3, [pc, #392]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 800282c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002830:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe f90d 	bl	8000a58 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002842:	f7fe f909 	bl	8000a58 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0ff      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002854:	4b57      	ldr	r3, [pc, #348]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ef      	bne.n	8002842 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80f3 	beq.w	8002a52 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	2b02      	cmp	r3, #2
 8002872:	f040 80c9 	bne.w	8002a08 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002876:	4b4f      	ldr	r3, [pc, #316]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 0203 	and.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	429a      	cmp	r2, r3
 8002888:	d12c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	3b01      	subs	r3, #1
 8002896:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d123      	bne.n	80028e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d11b      	bne.n	80028e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d113      	bne.n	80028e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	3b01      	subs	r3, #1
 80028ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d109      	bne.n	80028e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d06b      	beq.n	80029bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d062      	beq.n	80029b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0ac      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002904:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002906:	f7fe f8a7 	bl	8000a58 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe f8a3 	bl	8000a58 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e099      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_RCC_OscConfig+0x77c>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800293c:	3a01      	subs	r2, #1
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002946:	0212      	lsls	r2, r2, #8
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0552      	lsls	r2, r2, #21
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800295a:	0852      	lsrs	r2, r2, #1
 800295c:	3a01      	subs	r2, #1
 800295e:	0652      	lsls	r2, r2, #25
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002966:	06d2      	lsls	r2, r2, #27
 8002968:	430a      	orrs	r2, r1
 800296a:	4912      	ldr	r1, [pc, #72]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 800296c:	4313      	orrs	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002988:	f7fe f866 	bl	8000a58 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe f862 	bl	8000a58 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e058      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_RCC_OscConfig+0x778>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ae:	e050      	b.n	8002a52 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e04f      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d144      	bne.n	8002a52 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 80029da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029e0:	f7fe f83a 	bl	8000a58 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe f836 	bl	8000a58 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e02c      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x7ac>
 8002a06:	e024      	b.n	8002a52 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d01f      	beq.n	8002a4e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 8002a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f81d 	bl	8000a58 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe f819 	bl	8000a58 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e00f      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	4905      	ldr	r1, [pc, #20]	; (8002a5c <HAL_RCC_OscConfig+0x820>)
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_OscConfig+0x824>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e001      	b.n	8002a52 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	feeefffc 	.word	0xfeeefffc

08002a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0e7      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b75      	ldr	r3, [pc, #468]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 0207 	bic.w	r2, r3, #7
 8002a8e:	4970      	ldr	r1, [pc, #448]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cf      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d908      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4960      	ldr	r1, [pc, #384]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d04c      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d121      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0a6      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b02:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d115      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e09a      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b1a:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e08e      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e086      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4943      	ldr	r1, [pc, #268]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fd ff84 	bl	8000a58 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fd ff80 	bl	8000a58 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e06e      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d208      	bcs.n	8002baa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	492b      	ldr	r1, [pc, #172]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d210      	bcs.n	8002bda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 0207 	bic.w	r2, r3, #7
 8002bc0:	4923      	ldr	r1, [pc, #140]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_RCC_ClockConfig+0x1ec>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e036      	b.n	8002c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4918      	ldr	r1, [pc, #96]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d009      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4910      	ldr	r1, [pc, #64]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c18:	f000 f824 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	490b      	ldr	r1, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x1f4>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1fc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd febb 	bl	80009b8 <HAL_InitTick>
 8002c42:	4603      	mov	r3, r0
 8002c44:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c46:	7afb      	ldrb	r3, [r7, #11]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40021000 	.word	0x40021000
 8002c58:	080036b0 	.word	0x080036b0
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c72:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d121      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d11e      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c98:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	e005      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cb4:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10d      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e004      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce8:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d134      	bne.n	8002d5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d003      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0xac>
 8002d08:	e005      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d0c:	617b      	str	r3, [r7, #20]
      break;
 8002d0e:	e005      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d12:	617b      	str	r3, [r7, #20]
      break;
 8002d14:	e002      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	617b      	str	r3, [r7, #20]
      break;
 8002d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	3301      	adds	r3, #1
 8002d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	fb03 f202 	mul.w	r2, r3, r2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	0e5b      	lsrs	r3, r3, #25
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	080036c0 	.word	0x080036c0
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200

08002d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d88:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d94:	f7ff f9ee 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002d98:	6178      	str	r0, [r7, #20]
 8002d9a:	e014      	b.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da6:	6593      	str	r3, [r2, #88]	; 0x58
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002db4:	f7ff f9de 	bl	8002174 <HAL_PWREx_GetVoltageRange>
 8002db8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dcc:	d10b      	bne.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d919      	bls.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2ba0      	cmp	r3, #160	; 0xa0
 8002dd8:	d902      	bls.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dda:	2302      	movs	r3, #2
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	e013      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de0:	2301      	movs	r3, #1
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	e010      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d902      	bls.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dec:	2303      	movs	r3, #3
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e00a      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d102      	bne.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002df8:	2302      	movs	r3, #2
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e004      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b70      	cmp	r3, #112	; 0x70
 8002e02:	d101      	bne.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e04:	2301      	movs	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 0207 	bic.w	r2, r3, #7
 8002e10:	4909      	ldr	r1, [pc, #36]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40022000 	.word	0x40022000

08002e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e44:	2300      	movs	r3, #0
 8002e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e48:	2300      	movs	r3, #0
 8002e4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d031      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e60:	d01a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e66:	d814      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d009      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e7e:	e00c      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fa44 	bl	8003314 <RCCEx_PLLSAI1_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	74fb      	strb	r3, [r7, #19]
      break;
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea0:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	494e      	ldr	r1, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eb6:	e001      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 809e 	beq.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ece:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee4:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef0:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efc:	2301      	movs	r3, #1
 8002efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a39      	ldr	r2, [pc, #228]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0c:	f7fd fda4 	bl	8000a58 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7fd fda0 	bl	8000a58 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d902      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	74fb      	strb	r3, [r7, #19]
        break;
 8002f26:	e005      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f28:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ef      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d15a      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01e      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d019      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d016      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fd fd60 	bl	8000a58 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fd fd5c 	bl	8000a58 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d902      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb2:	e006      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ec      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd6:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fde:	e009      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	74bb      	strb	r3, [r7, #18]
 8002fe4:	e006      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4b9e      	ldr	r3, [pc, #632]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	4a9d      	ldr	r2, [pc, #628]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4b98      	ldr	r3, [pc, #608]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 0203 	bic.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4994      	ldr	r1, [pc, #592]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003034:	4b8f      	ldr	r3, [pc, #572]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	498c      	ldr	r1, [pc, #560]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003056:	4b87      	ldr	r3, [pc, #540]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	4983      	ldr	r1, [pc, #524]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003078:	4b7e      	ldr	r3, [pc, #504]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	497b      	ldr	r1, [pc, #492]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800309a:	4b76      	ldr	r3, [pc, #472]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	4972      	ldr	r1, [pc, #456]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030bc:	4b6d      	ldr	r3, [pc, #436]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	496a      	ldr	r1, [pc, #424]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030de:	4b65      	ldr	r3, [pc, #404]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	4961      	ldr	r1, [pc, #388]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003100:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	4959      	ldr	r1, [pc, #356]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	4950      	ldr	r1, [pc, #320]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003144:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	4948      	ldr	r1, [pc, #288]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003166:	4b43      	ldr	r3, [pc, #268]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800316c:	f023 0203 	bic.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	493f      	ldr	r1, [pc, #252]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d028      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	4937      	ldr	r1, [pc, #220]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a6:	d106      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a8:	4b32      	ldr	r3, [pc, #200]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a31      	ldr	r2, [pc, #196]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b2:	60d3      	str	r3, [r2, #12]
 80031b4:	e011      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031be:	d10c      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	2101      	movs	r1, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f8a4 	bl	8003314 <RCCEx_PLLSAI1_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d028      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	491f      	ldr	r1, [pc, #124]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003204:	d106      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800320c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003210:	60d3      	str	r3, [r2, #12]
 8003212:	e011      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f875 	bl	8003314 <RCCEx_PLLSAI1_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	4908      	ldr	r1, [pc, #32]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003262:	d109      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a02      	ldr	r2, [pc, #8]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800326a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326e:	60d3      	str	r3, [r2, #12]
 8003270:	e014      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f843 	bl	8003314 <RCCEx_PLLSAI1_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01c      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	4916      	ldr	r1, [pc, #88]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f820 	bl	8003314 <RCCEx_PLLSAI1_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fc:	4904      	ldr	r1, [pc, #16]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003304:	7cbb      	ldrb	r3, [r7, #18]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000

08003314 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003322:	4b74      	ldr	r3, [pc, #464]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800332e:	4b71      	ldr	r3, [pc, #452]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0203 	and.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d10d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
       ||
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003346:	4b6b      	ldr	r3, [pc, #428]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
       ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d047      	beq.n	80033ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	e044      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d018      	beq.n	800339a <RCCEx_PLLSAI1_Config+0x86>
 8003368:	2b03      	cmp	r3, #3
 800336a:	d825      	bhi.n	80033b8 <RCCEx_PLLSAI1_Config+0xa4>
 800336c:	2b01      	cmp	r3, #1
 800336e:	d002      	beq.n	8003376 <RCCEx_PLLSAI1_Config+0x62>
 8003370:	2b02      	cmp	r3, #2
 8003372:	d009      	beq.n	8003388 <RCCEx_PLLSAI1_Config+0x74>
 8003374:	e020      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003376:	4b5f      	ldr	r3, [pc, #380]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11d      	bne.n	80033be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003386:	e01a      	b.n	80033be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003388:	4b5a      	ldr	r3, [pc, #360]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003398:	e013      	b.n	80033c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033a6:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033b6:	e006      	b.n	80033c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e004      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ce:	4b49      	ldr	r3, [pc, #292]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	430b      	orrs	r3, r1
 80033e4:	4943      	ldr	r1, [pc, #268]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d17c      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033f0:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a3f      	ldr	r2, [pc, #252]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fd fb2c 	bl	8000a58 <HAL_GetTick>
 8003400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003402:	e009      	b.n	8003418 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003404:	f7fd fb28 	bl	8000a58 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d902      	bls.n	8003418 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	73fb      	strb	r3, [r7, #15]
        break;
 8003416:	e005      	b.n	8003424 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ef      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d15f      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d110      	bne.n	8003452 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003438:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6892      	ldr	r2, [r2, #8]
 8003440:	0211      	lsls	r1, r2, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	06d2      	lsls	r2, r2, #27
 8003448:	430a      	orrs	r2, r1
 800344a:	492a      	ldr	r1, [pc, #168]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344c:	4313      	orrs	r3, r2
 800344e:	610b      	str	r3, [r1, #16]
 8003450:	e027      	b.n	80034a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d112      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003458:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003460:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6892      	ldr	r2, [r2, #8]
 8003468:	0211      	lsls	r1, r2, #8
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6912      	ldr	r2, [r2, #16]
 800346e:	0852      	lsrs	r2, r2, #1
 8003470:	3a01      	subs	r2, #1
 8003472:	0552      	lsls	r2, r2, #21
 8003474:	430a      	orrs	r2, r1
 8003476:	491f      	ldr	r1, [pc, #124]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003478:	4313      	orrs	r3, r2
 800347a:	610b      	str	r3, [r1, #16]
 800347c:	e011      	b.n	80034a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003486:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	0211      	lsls	r1, r2, #8
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6952      	ldr	r2, [r2, #20]
 8003494:	0852      	lsrs	r2, r2, #1
 8003496:	3a01      	subs	r2, #1
 8003498:	0652      	lsls	r2, r2, #25
 800349a:	430a      	orrs	r2, r1
 800349c:	4915      	ldr	r1, [pc, #84]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fd fad3 	bl	8000a58 <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034b4:	e009      	b.n	80034ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b6:	f7fd facf 	bl	8000a58 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d902      	bls.n	80034ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	73fb      	strb	r3, [r7, #15]
          break;
 80034c8:	e005      	b.n	80034d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ef      	beq.n	80034b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000

080034f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e095      	b.n	8003636 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351a:	d009      	beq.n	8003530 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
 8003522:	e005      	b.n	8003530 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd f94e 	bl	80007ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003566:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003570:	d902      	bls.n	8003578 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e002      	b.n	800357e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800357c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003586:	d007      	beq.n	8003598 <HAL_SPI_Init+0xa0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	ea42 0103 	orr.w	r1, r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f003 0204 	and.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <__libc_init_array>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	4d0d      	ldr	r5, [pc, #52]	; (8003678 <__libc_init_array+0x38>)
 8003644:	4c0d      	ldr	r4, [pc, #52]	; (800367c <__libc_init_array+0x3c>)
 8003646:	1b64      	subs	r4, r4, r5
 8003648:	10a4      	asrs	r4, r4, #2
 800364a:	2600      	movs	r6, #0
 800364c:	42a6      	cmp	r6, r4
 800364e:	d109      	bne.n	8003664 <__libc_init_array+0x24>
 8003650:	4d0b      	ldr	r5, [pc, #44]	; (8003680 <__libc_init_array+0x40>)
 8003652:	4c0c      	ldr	r4, [pc, #48]	; (8003684 <__libc_init_array+0x44>)
 8003654:	f000 f820 	bl	8003698 <_init>
 8003658:	1b64      	subs	r4, r4, r5
 800365a:	10a4      	asrs	r4, r4, #2
 800365c:	2600      	movs	r6, #0
 800365e:	42a6      	cmp	r6, r4
 8003660:	d105      	bne.n	800366e <__libc_init_array+0x2e>
 8003662:	bd70      	pop	{r4, r5, r6, pc}
 8003664:	f855 3b04 	ldr.w	r3, [r5], #4
 8003668:	4798      	blx	r3
 800366a:	3601      	adds	r6, #1
 800366c:	e7ee      	b.n	800364c <__libc_init_array+0xc>
 800366e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003672:	4798      	blx	r3
 8003674:	3601      	adds	r6, #1
 8003676:	e7f2      	b.n	800365e <__libc_init_array+0x1e>
 8003678:	080036f0 	.word	0x080036f0
 800367c:	080036f0 	.word	0x080036f0
 8003680:	080036f0 	.word	0x080036f0
 8003684:	080036f4 	.word	0x080036f4

08003688 <memset>:
 8003688:	4402      	add	r2, r0
 800368a:	4603      	mov	r3, r0
 800368c:	4293      	cmp	r3, r2
 800368e:	d100      	bne.n	8003692 <memset+0xa>
 8003690:	4770      	bx	lr
 8003692:	f803 1b01 	strb.w	r1, [r3], #1
 8003696:	e7f9      	b.n	800368c <memset+0x4>

08003698 <_init>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr

080036a4 <_fini>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr
